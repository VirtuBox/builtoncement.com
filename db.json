{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"src/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/vue/source/browserconfig.xml","path":"browserconfig.xml","modified":0,"renderable":1},{"_id":"themes/vue/source/manifest.json","path":"manifest.json","modified":0,"renderable":1},{"_id":"themes/vue/source/css/benchmark.styl","path":"css/benchmark.styl","modified":0,"renderable":1},{"_id":"themes/vue/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/vue/source/css/page.styl","path":"css/page.styl","modified":0,"renderable":1},{"_id":"themes/vue/source/css/search.styl","path":"css/search.styl","modified":0,"renderable":1},{"_id":"themes/vue/source/images/check.png","path":"images/check.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/down.png","path":"images/down.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/feed.png","path":"images/feed.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons.png","path":"images/icons.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/menu.png","path":"images/menu.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/patreon.png","path":"images/patreon.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/search.png","path":"images/search.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/tde.png","path":"images/tde.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/vue-logo.png","path":"images/vue-logo.png","modified":0,"renderable":1},{"_id":"themes/vue/source/js/common.js","path":"js/common.js","modified":0,"renderable":1},{"_id":"themes/vue/source/js/css.escape.js","path":"js/css.escape.js","modified":0,"renderable":1},{"_id":"themes/vue/source/js/smooth-scroll.min.js","path":"js/smooth-scroll.min.js","modified":0,"renderable":1},{"_id":"themes/vue/source/images/hero-logo.png","path":"images/hero-logo.png","modified":0,"renderable":1},{"_id":"themes/vue/source/js/vue.min.js","path":"js/vue.min.js","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/android-icon-144x144.png","path":"images/icons/android-icon-144x144.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/android-icon-192x192.png","path":"images/icons/android-icon-192x192.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/android-icon-36x36.png","path":"images/icons/android-icon-36x36.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/android-icon-48x48.png","path":"images/icons/android-icon-48x48.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/android-icon-72x72.png","path":"images/icons/android-icon-72x72.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/android-icon-96x96.png","path":"images/icons/android-icon-96x96.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-114x114.png","path":"images/icons/apple-icon-114x114.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-120x120.png","path":"images/icons/apple-icon-120x120.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-144x144.png","path":"images/icons/apple-icon-144x144.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-152x152.png","path":"images/icons/apple-icon-152x152.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-180x180.png","path":"images/icons/apple-icon-180x180.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-57x57.png","path":"images/icons/apple-icon-57x57.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-60x60.png","path":"images/icons/apple-icon-60x60.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-72x72.png","path":"images/icons/apple-icon-72x72.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-76x76.png","path":"images/icons/apple-icon-76x76.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon-precomposed.png","path":"images/icons/apple-icon-precomposed.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/apple-icon.png","path":"images/icons/apple-icon.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/favicon-20x20.png","path":"images/icons/favicon-20x20.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/favicon-29x29.png","path":"images/icons/favicon-29x29.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/favicon-87x87.png","path":"images/icons/favicon-87x87.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/favicon.png","path":"images/icons/favicon.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/ms-icon-144x144.png","path":"images/icons/ms-icon-144x144.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/ms-icon-150x150.png","path":"images/icons/ms-icon-150x150.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/ms-icon-310x310.png","path":"images/icons/ms-icon-310x310.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons/ms-icon-70x70.png","path":"images/icons/ms-icon-70x70.png","modified":0,"renderable":1},{"_id":"themes/vue/source/js/vue.js","path":"js/vue.js","modified":0,"renderable":1}],"Cache":[{"_id":"src/CNAME","hash":"2f28b155ccc571395dcacec7ae31a24a7fd7983e","modified":1497211020000},{"_id":"src/index.md","hash":"fd945de1e31344f0d8be59bcc87e3f5fda468e11","modified":1497209290000},{"_id":"themes/vue/_config.yml","hash":"f23bc3d3b0237b59b199c5e58a207ba9ac84d326","modified":1497211252000},{"_id":"src/_posts/portland-development.md","hash":"f29dd49bdbc8f864aa3de8de2d6009ef47a75b46","modified":1497409327000},{"_id":"src/menu/index.md","hash":"189f0685b3420069e60d21599ace0e653ed99ecb","modified":1497209290000},{"_id":"src/perf/index.md","hash":"502830ba902b59e515d8005eb00e7374c1056f34","modified":1497409018000},{"_id":"src/support-vuejs/index.md","hash":"ae97e9182c69140624ca13797d5e24b79a55e0ed","modified":1497408999000},{"_id":"themes/vue/layout/index.ejs","hash":"4182bda185661ac5d5765daf485e2991efa389f4","modified":1497412038000},{"_id":"themes/vue/layout/layout.ejs","hash":"12ded882069559c90f5e70dde6ea5ce29c0c5481","modified":1497413811000},{"_id":"themes/vue/layout/page.ejs","hash":"6b5674391393567f84e09f1e009a5ffed5780be3","modified":1497409170000},{"_id":"themes/vue/layout/post.ejs","hash":"206faa4e4944eb092c9b9706c81131a46be6d2be","modified":1497409281000},{"_id":"themes/vue/source/browserconfig.xml","hash":"115f1a6d4b6a6ca0661f12b3d9a6123f213d78b7","modified":1497209290000},{"_id":"themes/vue/source/manifest.json","hash":"8176d00b74329f73a1b737f87d09a38a09323bd9","modified":1497213241000},{"_id":"src/portland/cookbook/adding-instance-properties.md","hash":"e83d2ceee8fd3935dbd8093f3f1707f166f14082","modified":1497209290000},{"_id":"src/portland/cookbook/index.md","hash":"feaa6cea9fe7d45f60098f35009ae8d7187d430d","modified":1497209290000},{"_id":"src/portland/dev/index.md","hash":"0c2091347213a8504ee0c1e888879618830b6a95","modified":1497247807000},{"_id":"src/portland/dev/overview.md","hash":"f3032899bce71a051354f5f9bbe41e8cb4877465","modified":1497246123000},{"_id":"src/portland/examples/commits.md","hash":"8a946162b0e550331c79041b6240073fd1bd5598","modified":1497209290000},{"_id":"src/portland/examples/deepstream.md","hash":"14216982daf959d4a5ba9e4aa871cc25091a99be","modified":1497209290000},{"_id":"src/portland/examples/elastic-header.md","hash":"d50b9889e6e9915a50afc3d9c34e679908d0e749","modified":1497209290000},{"_id":"src/portland/examples/firebase.md","hash":"0a778afde801f9509252741e6130cd03180f02ee","modified":1497209290000},{"_id":"src/portland/examples/grid-component.md","hash":"564e9ec73099df5d8fd3be34d735671cb6604553","modified":1497209290000},{"_id":"src/portland/examples/hackernews.md","hash":"22db08a2fe834370b33bbb840c096ce781896053","modified":1497209290000},{"_id":"src/portland/examples/index.md","hash":"a2f787e458fd64292f39460096c918a96c5ef723","modified":1497209290000},{"_id":"src/portland/examples/modal.md","hash":"7aa3dcb09644971aeda4170e06c77e91dc11ebbc","modified":1497209290000},{"_id":"src/portland/examples/select2.md","hash":"eac4080756ce2b345009917320e21c09e0ef29a8","modified":1497209290000},{"_id":"src/portland/examples/svg.md","hash":"79138027310406e2d4cf63c4ba440399246b3755","modified":1497209290000},{"_id":"src/portland/examples/todomvc.md","hash":"bce8452fb4eae120a328666092ca40da4f85dd78","modified":1497209290000},{"_id":"src/portland/examples/tree-view.md","hash":"bbdedaecf75828893658045e00aca90010b7f3f1","modified":1497209290000},{"_id":"themes/vue/layout/partials/header.ejs","hash":"c4f44c4a31d593d96cb694eec7ffb7ae899ba567","modified":1497212934000},{"_id":"themes/vue/layout/partials/main_menu.ejs","hash":"8442c1fd544b6270b439095be83c3aae8f9fb4e9","modified":1497219291000},{"_id":"themes/vue/layout/partials/resources_dropdown.ejs","hash":"ae1a25ff75655c40dc471926bc278d468b43e53e","modified":1497244823000},{"_id":"themes/vue/layout/partials/sidebar.ejs","hash":"048eee26846167e727c68b74fb68e40b6cc0016b","modified":1497219356000},{"_id":"themes/vue/layout/partials/sponsors.ejs","hash":"8c4f0042dc1e3c1112723025c5aeb584949f20d7","modified":1497411993000},{"_id":"themes/vue/layout/partials/toc.ejs","hash":"0be158b8cf42bff8c1e6fdf1cb22a42e862a19cd","modified":1497209290000},{"_id":"themes/vue/source/css/_common.styl","hash":"2aa214754d126deb86cbc00a12303f5666133f72","modified":1497209290000},{"_id":"themes/vue/source/css/_demo.styl","hash":"21a1a05638723cd8554562fb35f910418d3515bc","modified":1497209290000},{"_id":"themes/vue/source/css/_header.styl","hash":"d69290ef394a0f4eeaea8f8f2ac367c6d034ae72","modified":1497213205000},{"_id":"themes/vue/source/css/_migration.styl","hash":"6957759d62791edf2e6e2e8a9e026bb25492d159","modified":1497209290000},{"_id":"themes/vue/source/css/_offline-menu.styl","hash":"5c6c95cb886d61130a39122de6de3393fe3d416d","modified":1497209290000},{"_id":"themes/vue/source/css/_settings.styl","hash":"68aa521523364ada8db4ecb4284f36bc34bd888d","modified":1497226657000},{"_id":"themes/vue/source/css/_sidebar.styl","hash":"040ff325cd13c74e8f9038ae31836eabbed5ce9d","modified":1497209290000},{"_id":"themes/vue/source/css/_sponsor.styl","hash":"6a4e1503b1e4f0e98e1e008ba846036fee3199aa","modified":1497209290000},{"_id":"themes/vue/source/css/_syntax.styl","hash":"bf565891b976c57ef522cf72a44a1e28ebcca224","modified":1497243253000},{"_id":"themes/vue/source/css/benchmark.styl","hash":"95d4607b2b59623a673e131e1a267d0311fe89e6","modified":1497209290000},{"_id":"themes/vue/source/css/index.styl","hash":"7fff638dae672241d5aabf666cefacda39736c74","modified":1497209290000},{"_id":"themes/vue/source/css/page.styl","hash":"d1a9c45fbda169e44a3052cefab035e033460a1a","modified":1497226875000},{"_id":"themes/vue/source/css/search.styl","hash":"5117f05598154cfc84da04ec1a257bd186653ba2","modified":1497209290000},{"_id":"themes/vue/source/images/check.png","hash":"63c871d2b373b77c72349170f5ef426e0d1cd09b","modified":1497209290000},{"_id":"themes/vue/source/images/down.png","hash":"199cae4696850c6f7420c2706c6f4786e03c396c","modified":1497209290000},{"_id":"themes/vue/source/images/feed.png","hash":"40639090cfeac0a5ac5d92c5c1b3702c95a50a9e","modified":1497209290000},{"_id":"themes/vue/source/images/icons.png","hash":"f37248aa22ed3dc4bddefbd9499e5e68ce41a3a1","modified":1497209290000},{"_id":"themes/vue/source/images/logo.png","hash":"e495e6f5c05bf7243206a79a3ec3ea4764193231","modified":1497210498000},{"_id":"themes/vue/source/images/menu.png","hash":"3e2ba61af1ab5350ffbf0fecaf882f3bfa364ca3","modified":1497209290000},{"_id":"themes/vue/source/images/patreon.png","hash":"c36749e54c07f680b15c88dadc7b1475f4d83afa","modified":1497209290000},{"_id":"themes/vue/source/images/search.png","hash":"4546e84b0067609c3fa3c59358c68bf82ebc03a4","modified":1497209290000},{"_id":"themes/vue/source/images/tde.png","hash":"de6fa834455ebf829416cc73ec80d26e19b09fbe","modified":1497209290000},{"_id":"themes/vue/source/images/vue-logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1497209290000},{"_id":"themes/vue/source/js/common.js","hash":"9c2d447765f575c50366233ba3567e1bff42d3c5","modified":1497219314000},{"_id":"themes/vue/source/js/css.escape.js","hash":"1d0e28a08261de3955b0ee18432e304c1f468441","modified":1497209290000},{"_id":"themes/vue/source/js/smooth-scroll.min.js","hash":"48d800d2b3be86c704e002502999413504bbd04d","modified":1497209290000},{"_id":"src/portland/api/index.md","hash":"3e220e8f8e13547651a2fa8af27780da524047a9","modified":1497209290000},{"_id":"themes/vue/source/images/hero-logo.png","hash":"95dc45fe069394897ae89b7ece9774fde4da3200","modified":1497210537000},{"_id":"themes/vue/source/js/vue.min.js","hash":"4e7761d6f9f23ba54b529e048d20f93b04ce1af0","modified":1497209290000},{"_id":"themes/vue/source/images/icons/android-icon-144x144.png","hash":"92e055a07a4d1a8fbe5f0e9c5cadd70bf05633e2","modified":1497229356000},{"_id":"themes/vue/source/images/icons/android-icon-192x192.png","hash":"1ae73b61702f0738ae71255879010f49fd2edeea","modified":1497229356000},{"_id":"themes/vue/source/images/icons/android-icon-36x36.png","hash":"fdbc3a251c79af8f539ac2b4f13d6b0d331c8646","modified":1497229356000},{"_id":"themes/vue/source/images/icons/android-icon-48x48.png","hash":"c3d10414ede4b9dbe76b488d727bb6bda68e3e18","modified":1497229356000},{"_id":"themes/vue/source/images/icons/android-icon-72x72.png","hash":"c05475c34a9cd2749406dfa840a438c71cf7f3f7","modified":1497229356000},{"_id":"themes/vue/source/images/icons/android-icon-96x96.png","hash":"a2ac2fa5aa304a77fc4825c5b3f989ab974eba17","modified":1497229356000},{"_id":"themes/vue/source/images/icons/apple-icon-114x114.png","hash":"c4870aa1cf8977d65476a664cefc752a806f5ca7","modified":1497229356000},{"_id":"themes/vue/source/images/icons/apple-icon-120x120.png","hash":"e63b4941226794516ae38a0907283b8f41766d01","modified":1497229356000},{"_id":"themes/vue/source/images/icons/apple-icon-144x144.png","hash":"92e055a07a4d1a8fbe5f0e9c5cadd70bf05633e2","modified":1497229356000},{"_id":"themes/vue/source/images/icons/apple-icon-152x152.png","hash":"3e5e7a009e8d3ee7d9f2b0c19aa7cbf53e55a056","modified":1497229354000},{"_id":"themes/vue/source/images/icons/apple-icon-180x180.png","hash":"aea1f2bfc355416d383d7d70b81746b989ab8e72","modified":1497229356000},{"_id":"themes/vue/source/images/icons/apple-icon-57x57.png","hash":"8fb89fe4db0c98f07246540a2a278c587d4e489f","modified":1497229356000},{"_id":"themes/vue/source/images/icons/apple-icon-60x60.png","hash":"ce637bb0770a1f8844f65a4388d218b9ea90f7d3","modified":1497229356000},{"_id":"themes/vue/source/images/icons/apple-icon-72x72.png","hash":"c05475c34a9cd2749406dfa840a438c71cf7f3f7","modified":1497229356000},{"_id":"themes/vue/source/images/icons/apple-icon-76x76.png","hash":"66941cea0ef9ab20600674a6191e636d36d27a7a","modified":1497229356000},{"_id":"themes/vue/source/images/icons/apple-icon-precomposed.png","hash":"917d2446777005ee46a7eece1b8fde0a93b4b716","modified":1497229354000},{"_id":"themes/vue/source/images/icons/apple-icon.png","hash":"917d2446777005ee46a7eece1b8fde0a93b4b716","modified":1497229354000},{"_id":"themes/vue/source/images/icons/favicon-20x20.png","hash":"e7d4305815b6a71d89ebba10de091b5c95c203e5","modified":1497229356000},{"_id":"themes/vue/source/images/icons/favicon-29x29.png","hash":"dec7cc0ed907bb386873ffc52c841b55c27c0689","modified":1497229356000},{"_id":"themes/vue/source/images/icons/favicon-87x87.png","hash":"dec7cc0ed907bb386873ffc52c841b55c27c0689","modified":1497229356000},{"_id":"themes/vue/source/images/icons/favicon.png","hash":"e7d4305815b6a71d89ebba10de091b5c95c203e5","modified":1497229356000},{"_id":"themes/vue/source/images/icons/ms-icon-144x144.png","hash":"92e055a07a4d1a8fbe5f0e9c5cadd70bf05633e2","modified":1497229356000},{"_id":"themes/vue/source/images/icons/ms-icon-150x150.png","hash":"3e5e7a009e8d3ee7d9f2b0c19aa7cbf53e55a056","modified":1497229354000},{"_id":"themes/vue/source/images/icons/ms-icon-310x310.png","hash":"57719fdbcbb8ed3f1b6312b960068d2ad4384a17","modified":1497229356000},{"_id":"themes/vue/source/images/icons/ms-icon-70x70.png","hash":"c05475c34a9cd2749406dfa840a438c71cf7f3f7","modified":1497229356000},{"_id":"themes/vue/source/js/vue.js","hash":"8e482e1719c0ece3864b45d772d42dc203c6d999","modified":1497209290000}],"Category":[],"Data":[],"Page":[{"index":true,"_content":"","source":"index.md","raw":"index: true\n---\n","date":"2017-06-11T19:37:11.000Z","updated":"2017-06-11T19:28:10.000Z","path":"index.html","title":"","comments":1,"layout":"page","_id":"cj3wg8kkv0000q0pwqiw7u5v6","content":"","excerpt":"","more":""},{"type":"menu","_content":"","source":"menu/index.md","raw":"---\ntype: menu\n---\n","date":"2017-06-11T19:37:11.000Z","updated":"2017-06-11T19:28:10.000Z","path":"menu/index.html","title":"","comments":1,"layout":"page","_id":"cj3wg8klt0002q0pwk5r1it6g","content":"","excerpt":"","more":""},{"title":"Performance Comparisons","_content":"\n## TodoMVC Benchmark\n\n> *Last Updated: 2014-10-12*\n\nLooking for the TodoMVC Benchmark? It's been removed because after discussion with some other framework authors we have agreed that:\n\n1. The original intention of these benchmarks were for comparing Browser performance rather than that of frameworks. The \"synchrorously trigger an action xxx times\" test routine doesn't reflect meaningful real world user actions.\n\n2. Due to internal implementation differences, frameworks that uses async rendering (e.g. Vue, Om, Mercury) gains the advantage by skipping part of the calculations that happened in the same event loop. The real world user experience doesn't demonstrate such dramatic difference.\n\n3. Overall this benchmark suite gave rise to more controversy than constructive insights, so it's been removed and I'd be happy to replace it with a more meaningful way to measure front-end performance.\n","source":"perf/index.md","raw":"---\ntitle: Performance Comparisons\n---\n\n## TodoMVC Benchmark\n\n> *Last Updated: 2014-10-12*\n\nLooking for the TodoMVC Benchmark? It's been removed because after discussion with some other framework authors we have agreed that:\n\n1. The original intention of these benchmarks were for comparing Browser performance rather than that of frameworks. The \"synchrorously trigger an action xxx times\" test routine doesn't reflect meaningful real world user actions.\n\n2. Due to internal implementation differences, frameworks that uses async rendering (e.g. Vue, Om, Mercury) gains the advantage by skipping part of the calculations that happened in the same event loop. The real world user experience doesn't demonstrate such dramatic difference.\n\n3. Overall this benchmark suite gave rise to more controversy than constructive insights, so it's been removed and I'd be happy to replace it with a more meaningful way to measure front-end performance.\n","date":"2017-06-14T02:56:58.000Z","updated":"2017-06-14T02:56:58.000Z","path":"perf/index.html","comments":1,"layout":"page","_id":"cj3wg8klv0003q0pw3vizvqas","content":"<h2 id=\"TodoMVC-Benchmark\"><a href=\"#TodoMVC-Benchmark\" class=\"headerlink\" title=\"TodoMVC Benchmark\"></a>TodoMVC Benchmark</h2><blockquote>\n<p><em>Last Updated: 2014-10-12</em></p>\n</blockquote>\n<p>Looking for the TodoMVC Benchmark? It’s been removed because after discussion with some other framework authors we have agreed that:</p>\n<ol>\n<li><p>The original intention of these benchmarks were for comparing Browser performance rather than that of frameworks. The “synchrorously trigger an action xxx times” test routine doesn’t reflect meaningful real world user actions.</p>\n</li>\n<li><p>Due to internal implementation differences, frameworks that uses async rendering (e.g. Vue, Om, Mercury) gains the advantage by skipping part of the calculations that happened in the same event loop. The real world user experience doesn’t demonstrate such dramatic difference.</p>\n</li>\n<li><p>Overall this benchmark suite gave rise to more controversy than constructive insights, so it’s been removed and I’d be happy to replace it with a more meaningful way to measure front-end performance.</p>\n</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"TodoMVC-Benchmark\"><a href=\"#TodoMVC-Benchmark\" class=\"headerlink\" title=\"TodoMVC Benchmark\"></a>TodoMVC Benchmark</h2><blockquote>\n<p><em>Last Updated: 2014-10-12</em></p>\n</blockquote>\n<p>Looking for the TodoMVC Benchmark? It’s been removed because after discussion with some other framework authors we have agreed that:</p>\n<ol>\n<li><p>The original intention of these benchmarks were for comparing Browser performance rather than that of frameworks. The “synchrorously trigger an action xxx times” test routine doesn’t reflect meaningful real world user actions.</p>\n</li>\n<li><p>Due to internal implementation differences, frameworks that uses async rendering (e.g. Vue, Om, Mercury) gains the advantage by skipping part of the calculations that happened in the same event loop. The real world user experience doesn’t demonstrate such dramatic difference.</p>\n</li>\n<li><p>Overall this benchmark suite gave rise to more controversy than constructive insights, so it’s been removed and I’d be happy to replace it with a more meaningful way to measure front-end performance.</p>\n</li>\n</ol>\n"},{"_content":"# Support Vue.js Development\n\nVue.js is an MIT licensed open source project and completely free to use.\nHowever, the amount of effort needed to maintain and develop new features for the project is not sustainable without proper financial backing. You can support Vue.js development by [pledging on Patreon](https://www.patreon.com/evanyou) (recurring, with perks for different tiers) or [donating on PayPal](https://www.paypal.me/evanyou) (one time).\n\n## Current Premium Sponsors:\n\n### Platinum ($2000/mo)\n\n<p style=\"text-align: center;\">\n  <a href=\"https://stdlib.com\">\n    <img style=\"width:300px\" src=\"/images/stdlib.png\">\n  </a>\n</p>\n\n### Gold ($500/mo)\n\n<p style=\"text-align: center; margin-top: 0; margin-bottom: 60px\" class=\"sponsors-page\">\n  <a href=\"https://deepstreamhub.com\" target=\"_blank\" style=\"width:140px;top:1px\">\n    <img src=\"/images/deepstream.png\" style=\"width:140px\">\n  </a><a href=\"https://jsfiddle.net\">\n    <img src=\"/images/jsfiddle.png\">\n  </a><a href=\"https://laravel.com\">\n    <img src=\"/images/laravel.png\">\n  </a><a href=\"https://chaitin.cn\">\n    <img src=\"/images/chaitin.png\">\n  </a><a href=\"https://htmlburger.com\" target=\"_blank\">\n    <img src=\"/images/htmlburger.png\">\n  </a><a href=\"https://starter.someline.com/\" target=\"_blank\">\n    <img src=\"/images/someline.png\">\n  </a><a href=\"http://monterail.com/\" target=\"_blank\">\n    <img src=\"/images/monterail.png\">\n  </a><a href=\"https://www.trisoft.ro/\" target=\"_blank\">\n    <img src=\"/images/trisoft.png\">\n  </a><a href=\"https://www.2mhost.com/\" target=\"_blank\">\n    <img src=\"/images/2mhost.png\">\n  </a><a href=\"https://vuejobs.com/?ref=vuejs\" target=\"_blank\" style=\"position:relative;top:6px\">\n    <img src=\"/images/vuejobs.svg\">\n  </a><a href=\"https://leanpub.com/vuejs2\" target=\"_blank\">\n    <img src=\"/images/tmvuejs2.png\">\n  </a><a href=\"https://famebroker.com\" target=\"_blank\" style=\"width:135px\">\n    <img src=\"/images/famebroker.png\" style=\"width:135px\">\n  </a><a href=\"https://component.io\" target=\"_blank\" style=\"width:140px\">\n    <img src=\"/images/component_io.png\" style=\"width:140px\">\n  </a>\n</p>\n\nIf you run a business and are using Vue in a revenue-generating product, it makes business sense to sponsor Vue development: **it ensures the project that your product relies on stays healthy and actively maintained.** It can also help your exposure in the Vue community and makes it easier to attract Vue developers.\n\nIf you are a business that is building core products using Vue.js, I am also open to conversations regarding custom sponsorship / consulting arrangements. [Get in touch on Twitter](https://twitter.com/youyuxi).\n\nIf you are an individual user and have enjoyed the productivity of using Vue, consider donating as a sign of appreciation - like buying me coffee once in a while :)\n","source":"support-vuejs/index.md","raw":"# Support Vue.js Development\n\nVue.js is an MIT licensed open source project and completely free to use.\nHowever, the amount of effort needed to maintain and develop new features for the project is not sustainable without proper financial backing. You can support Vue.js development by [pledging on Patreon](https://www.patreon.com/evanyou) (recurring, with perks for different tiers) or [donating on PayPal](https://www.paypal.me/evanyou) (one time).\n\n## Current Premium Sponsors:\n\n### Platinum ($2000/mo)\n\n<p style=\"text-align: center;\">\n  <a href=\"https://stdlib.com\">\n    <img style=\"width:300px\" src=\"/images/stdlib.png\">\n  </a>\n</p>\n\n### Gold ($500/mo)\n\n<p style=\"text-align: center; margin-top: 0; margin-bottom: 60px\" class=\"sponsors-page\">\n  <a href=\"https://deepstreamhub.com\" target=\"_blank\" style=\"width:140px;top:1px\">\n    <img src=\"/images/deepstream.png\" style=\"width:140px\">\n  </a><a href=\"https://jsfiddle.net\">\n    <img src=\"/images/jsfiddle.png\">\n  </a><a href=\"https://laravel.com\">\n    <img src=\"/images/laravel.png\">\n  </a><a href=\"https://chaitin.cn\">\n    <img src=\"/images/chaitin.png\">\n  </a><a href=\"https://htmlburger.com\" target=\"_blank\">\n    <img src=\"/images/htmlburger.png\">\n  </a><a href=\"https://starter.someline.com/\" target=\"_blank\">\n    <img src=\"/images/someline.png\">\n  </a><a href=\"http://monterail.com/\" target=\"_blank\">\n    <img src=\"/images/monterail.png\">\n  </a><a href=\"https://www.trisoft.ro/\" target=\"_blank\">\n    <img src=\"/images/trisoft.png\">\n  </a><a href=\"https://www.2mhost.com/\" target=\"_blank\">\n    <img src=\"/images/2mhost.png\">\n  </a><a href=\"https://vuejobs.com/?ref=vuejs\" target=\"_blank\" style=\"position:relative;top:6px\">\n    <img src=\"/images/vuejobs.svg\">\n  </a><a href=\"https://leanpub.com/vuejs2\" target=\"_blank\">\n    <img src=\"/images/tmvuejs2.png\">\n  </a><a href=\"https://famebroker.com\" target=\"_blank\" style=\"width:135px\">\n    <img src=\"/images/famebroker.png\" style=\"width:135px\">\n  </a><a href=\"https://component.io\" target=\"_blank\" style=\"width:140px\">\n    <img src=\"/images/component_io.png\" style=\"width:140px\">\n  </a>\n</p>\n\nIf you run a business and are using Vue in a revenue-generating product, it makes business sense to sponsor Vue development: **it ensures the project that your product relies on stays healthy and actively maintained.** It can also help your exposure in the Vue community and makes it easier to attract Vue developers.\n\nIf you are a business that is building core products using Vue.js, I am also open to conversations regarding custom sponsorship / consulting arrangements. [Get in touch on Twitter](https://twitter.com/youyuxi).\n\nIf you are an individual user and have enjoyed the productivity of using Vue, consider donating as a sign of appreciation - like buying me coffee once in a while :)\n","date":"2017-06-14T02:56:39.000Z","updated":"2017-06-14T02:56:39.000Z","path":"support-vuejs/index.html","title":"","comments":1,"layout":"page","_id":"cj3wg8klx0004q0pw9wsab8u4","content":"<h1 id=\"Support-Vue-js-Development\"><a href=\"#Support-Vue-js-Development\" class=\"headerlink\" title=\"Support Vue.js Development\"></a>Support Vue.js Development</h1><p>Vue.js is an MIT licensed open source project and completely free to use.<br>However, the amount of effort needed to maintain and develop new features for the project is not sustainable without proper financial backing. You can support Vue.js development by <a href=\"https://www.patreon.com/evanyou\" target=\"_blank\" rel=\"external\">pledging on Patreon</a> (recurring, with perks for different tiers) or <a href=\"https://www.paypal.me/evanyou\" target=\"_blank\" rel=\"external\">donating on PayPal</a> (one time).</p>\n<h2 id=\"Current-Premium-Sponsors\"><a href=\"#Current-Premium-Sponsors\" class=\"headerlink\" title=\"Current Premium Sponsors:\"></a>Current Premium Sponsors:</h2><h3 id=\"Platinum-2000-mo\"><a href=\"#Platinum-2000-mo\" class=\"headerlink\" title=\"Platinum ($2000/mo)\"></a>Platinum ($2000/mo)</h3><p style=\"text-align: center;\"><br>  <a href=\"https://stdlib.com\" target=\"_blank\" rel=\"external\"><br>    <img style=\"width:300px\" src=\"/images/stdlib.png\"><br>  </a><br></p>\n\n<h3 id=\"Gold-500-mo\"><a href=\"#Gold-500-mo\" class=\"headerlink\" title=\"Gold ($500/mo)\"></a>Gold ($500/mo)</h3><p style=\"text-align: center; margin-top: 0; margin-bottom: 60px\" class=\"sponsors-page\"><br>  <a href=\"https://deepstreamhub.com\" target=\"_blank\" style=\"width:140px;top:1px\"><br>    <img src=\"/images/deepstream.png\" style=\"width:140px\"><br>  </a><a href=\"https://jsfiddle.net\" target=\"_blank\" rel=\"external\"><br>    <img src=\"/images/jsfiddle.png\"><br>  </a><a href=\"https://laravel.com\" target=\"_blank\" rel=\"external\"><br>    <img src=\"/images/laravel.png\"><br>  </a><a href=\"https://chaitin.cn\" target=\"_blank\" rel=\"external\"><br>    <img src=\"/images/chaitin.png\"><br>  </a><a href=\"https://htmlburger.com\" target=\"_blank\"><br>    <img src=\"/images/htmlburger.png\"><br>  </a><a href=\"https://starter.someline.com/\" target=\"_blank\"><br>    <img src=\"/images/someline.png\"><br>  </a><a href=\"http://monterail.com/\" target=\"_blank\"><br>    <img src=\"/images/monterail.png\"><br>  </a><a href=\"https://www.trisoft.ro/\" target=\"_blank\"><br>    <img src=\"/images/trisoft.png\"><br>  </a><a href=\"https://www.2mhost.com/\" target=\"_blank\"><br>    <img src=\"/images/2mhost.png\"><br>  </a><a href=\"https://vuejobs.com/?ref=vuejs\" target=\"_blank\" style=\"position:relative;top:6px\"><br>    <img src=\"/images/vuejobs.svg\"><br>  </a><a href=\"https://leanpub.com/vuejs2\" target=\"_blank\"><br>    <img src=\"/images/tmvuejs2.png\"><br>  </a><a href=\"https://famebroker.com\" target=\"_blank\" style=\"width:135px\"><br>    <img src=\"/images/famebroker.png\" style=\"width:135px\"><br>  </a><a href=\"https://component.io\" target=\"_blank\" style=\"width:140px\"><br>    <img src=\"/images/component_io.png\" style=\"width:140px\"><br>  </a><br></p>\n\n<p>If you run a business and are using Vue in a revenue-generating product, it makes business sense to sponsor Vue development: <strong>it ensures the project that your product relies on stays healthy and actively maintained.</strong> It can also help your exposure in the Vue community and makes it easier to attract Vue developers.</p>\n<p>If you are a business that is building core products using Vue.js, I am also open to conversations regarding custom sponsorship / consulting arrangements. <a href=\"https://twitter.com/youyuxi\" target=\"_blank\" rel=\"external\">Get in touch on Twitter</a>.</p>\n<p>If you are an individual user and have enjoyed the productivity of using Vue, consider donating as a sign of appreciation - like buying me coffee once in a while :)</p>\n","excerpt":"","more":"<h1 id=\"Support-Vue-js-Development\"><a href=\"#Support-Vue-js-Development\" class=\"headerlink\" title=\"Support Vue.js Development\"></a>Support Vue.js Development</h1><p>Vue.js is an MIT licensed open source project and completely free to use.<br>However, the amount of effort needed to maintain and develop new features for the project is not sustainable without proper financial backing. You can support Vue.js development by <a href=\"https://www.patreon.com/evanyou\">pledging on Patreon</a> (recurring, with perks for different tiers) or <a href=\"https://www.paypal.me/evanyou\">donating on PayPal</a> (one time).</p>\n<h2 id=\"Current-Premium-Sponsors\"><a href=\"#Current-Premium-Sponsors\" class=\"headerlink\" title=\"Current Premium Sponsors:\"></a>Current Premium Sponsors:</h2><h3 id=\"Platinum-2000-mo\"><a href=\"#Platinum-2000-mo\" class=\"headerlink\" title=\"Platinum ($2000/mo)\"></a>Platinum ($2000/mo)</h3><p style=\"text-align: center;\"><br>  <a href=\"https://stdlib.com\"><br>    <img style=\"width:300px\" src=\"/images/stdlib.png\"><br>  </a><br></p>\n\n<h3 id=\"Gold-500-mo\"><a href=\"#Gold-500-mo\" class=\"headerlink\" title=\"Gold ($500/mo)\"></a>Gold ($500/mo)</h3><p style=\"text-align: center; margin-top: 0; margin-bottom: 60px\" class=\"sponsors-page\"><br>  <a href=\"https://deepstreamhub.com\" target=\"_blank\" style=\"width:140px;top:1px\"><br>    <img src=\"/images/deepstream.png\" style=\"width:140px\"><br>  </a><a href=\"https://jsfiddle.net\"><br>    <img src=\"/images/jsfiddle.png\"><br>  </a><a href=\"https://laravel.com\"><br>    <img src=\"/images/laravel.png\"><br>  </a><a href=\"https://chaitin.cn\"><br>    <img src=\"/images/chaitin.png\"><br>  </a><a href=\"https://htmlburger.com\" target=\"_blank\"><br>    <img src=\"/images/htmlburger.png\"><br>  </a><a href=\"https://starter.someline.com/\" target=\"_blank\"><br>    <img src=\"/images/someline.png\"><br>  </a><a href=\"http://monterail.com/\" target=\"_blank\"><br>    <img src=\"/images/monterail.png\"><br>  </a><a href=\"https://www.trisoft.ro/\" target=\"_blank\"><br>    <img src=\"/images/trisoft.png\"><br>  </a><a href=\"https://www.2mhost.com/\" target=\"_blank\"><br>    <img src=\"/images/2mhost.png\"><br>  </a><a href=\"https://vuejobs.com/?ref=vuejs\" target=\"_blank\" style=\"position:relative;top:6px\"><br>    <img src=\"/images/vuejobs.svg\"><br>  </a><a href=\"https://leanpub.com/vuejs2\" target=\"_blank\"><br>    <img src=\"/images/tmvuejs2.png\"><br>  </a><a href=\"https://famebroker.com\" target=\"_blank\" style=\"width:135px\"><br>    <img src=\"/images/famebroker.png\" style=\"width:135px\"><br>  </a><a href=\"https://component.io\" target=\"_blank\" style=\"width:140px\"><br>    <img src=\"/images/component_io.png\" style=\"width:140px\"><br>  </a><br></p>\n\n<p>If you run a business and are using Vue in a revenue-generating product, it makes business sense to sponsor Vue development: <strong>it ensures the project that your product relies on stays healthy and actively maintained.</strong> It can also help your exposure in the Vue community and makes it easier to attract Vue developers.</p>\n<p>If you are a business that is building core products using Vue.js, I am also open to conversations regarding custom sponsorship / consulting arrangements. <a href=\"https://twitter.com/youyuxi\">Get in touch on Twitter</a>.</p>\n<p>If you are an individual user and have enjoyed the productivity of using Vue, consider donating as a sign of appreciation - like buying me coffee once in a while :)</p>\n"},{"title":"Introduction","type":"cookbook","order":0,"_content":"\n## WORK IN PROGRESS\n\n<p class=\"tip\">This cookbook is still in its very early stages. At this point, we will not be linking to it from anywhere else. Pages may be removed or reorganized at any time. Even the goals and overall format are still in flux.</p>\n\n## The Cookbook vs the Guide\n\nHow is the cookbook different from the guide? Why is this necessary?\n\n- __Greater Focus__: In the guide, we're essentially telling a story. Each section builds on and assumes knowledge from each previous section. In the cookbook, each recipe can and should stand on its own. This means recipes can focus on one specific aspect of Vue, rather than having to give a general overview.\n\n- __Greater Depth__: To avoid making the guide too long, we try to include only the simplest possible examples to help you understand each feature. Then we move on. In the cookbook, we can include more complex examples, combining features in interesting ways. Each recipe can also be as long and detailed as it needs to be, in order to fully explore its niche.\n\n- __Teaching JavaScript__: In the guide, we assume at least intermediate familiarity with ES5 JavaScript. For example, we won't explain how `Array.prototype.filter` works in a computed property that filters a list. In the cookbook however, essential JavaScript features (including ES6/2015+) can be explored and explained in the context of how they help us build better Vue applications.\n\n- __Exploring the Ecosystem__: For advanced features, we assume some ecosystem knowledge. For example, if you want to use single-file components in Webpack, we don't explain how to configure the non-Vue parts of the Webpack config. In the cookbook, we have the space to explore these ecosystem libraries in more depth - at least to the extent that is universally useful for Vue developers.\n\n## Guidelines for Recipes\n\nRecipes should generally:\n\n> 1. Solve a specific, common problem\n\n> 2. Start with the simplest possible example\n\n> 3. Introduce complexities one at a time\n\n> 4. Link to other docs, rather than re-explaining concepts\n\n> 5. Describe the problem, rather than assuming familiarity\n\n> 6. Explain the process, rather than just the end result\n\n> 7. Explain the pros and cons of your strategy, including when it is and isn't appropriate\n\n> 8. Mention alternative solutions, if relevant, but leave in-depth explorations to a separate recipe\n\n","source":"portland/cookbook/index.md","raw":"---\ntitle: Introduction\ntype: cookbook\norder: 0\n---\n\n## WORK IN PROGRESS\n\n<p class=\"tip\">This cookbook is still in its very early stages. At this point, we will not be linking to it from anywhere else. Pages may be removed or reorganized at any time. Even the goals and overall format are still in flux.</p>\n\n## The Cookbook vs the Guide\n\nHow is the cookbook different from the guide? Why is this necessary?\n\n- __Greater Focus__: In the guide, we're essentially telling a story. Each section builds on and assumes knowledge from each previous section. In the cookbook, each recipe can and should stand on its own. This means recipes can focus on one specific aspect of Vue, rather than having to give a general overview.\n\n- __Greater Depth__: To avoid making the guide too long, we try to include only the simplest possible examples to help you understand each feature. Then we move on. In the cookbook, we can include more complex examples, combining features in interesting ways. Each recipe can also be as long and detailed as it needs to be, in order to fully explore its niche.\n\n- __Teaching JavaScript__: In the guide, we assume at least intermediate familiarity with ES5 JavaScript. For example, we won't explain how `Array.prototype.filter` works in a computed property that filters a list. In the cookbook however, essential JavaScript features (including ES6/2015+) can be explored and explained in the context of how they help us build better Vue applications.\n\n- __Exploring the Ecosystem__: For advanced features, we assume some ecosystem knowledge. For example, if you want to use single-file components in Webpack, we don't explain how to configure the non-Vue parts of the Webpack config. In the cookbook, we have the space to explore these ecosystem libraries in more depth - at least to the extent that is universally useful for Vue developers.\n\n## Guidelines for Recipes\n\nRecipes should generally:\n\n> 1. Solve a specific, common problem\n\n> 2. Start with the simplest possible example\n\n> 3. Introduce complexities one at a time\n\n> 4. Link to other docs, rather than re-explaining concepts\n\n> 5. Describe the problem, rather than assuming familiarity\n\n> 6. Explain the process, rather than just the end result\n\n> 7. Explain the pros and cons of your strategy, including when it is and isn't appropriate\n\n> 8. Mention alternative solutions, if relevant, but leave in-depth explorations to a separate recipe\n\n","date":"2017-06-11T22:12:06.000Z","updated":"2017-06-11T19:28:10.000Z","path":"portland/cookbook/index.html","comments":1,"layout":"page","_id":"cj3wg8kmz0005q0pw8jy34l9d","content":"<h2 id=\"WORK-IN-PROGRESS\"><a href=\"#WORK-IN-PROGRESS\" class=\"headerlink\" title=\"WORK IN PROGRESS\"></a>WORK IN PROGRESS</h2><p class=\"tip\">This cookbook is still in its very early stages. At this point, we will not be linking to it from anywhere else. Pages may be removed or reorganized at any time. Even the goals and overall format are still in flux.</p>\n\n<h2 id=\"The-Cookbook-vs-the-Guide\"><a href=\"#The-Cookbook-vs-the-Guide\" class=\"headerlink\" title=\"The Cookbook vs the Guide\"></a>The Cookbook vs the Guide</h2><p>How is the cookbook different from the guide? Why is this necessary?</p>\n<ul>\n<li><p><strong>Greater Focus</strong>: In the guide, we’re essentially telling a story. Each section builds on and assumes knowledge from each previous section. In the cookbook, each recipe can and should stand on its own. This means recipes can focus on one specific aspect of Vue, rather than having to give a general overview.</p>\n</li>\n<li><p><strong>Greater Depth</strong>: To avoid making the guide too long, we try to include only the simplest possible examples to help you understand each feature. Then we move on. In the cookbook, we can include more complex examples, combining features in interesting ways. Each recipe can also be as long and detailed as it needs to be, in order to fully explore its niche.</p>\n</li>\n<li><p><strong>Teaching JavaScript</strong>: In the guide, we assume at least intermediate familiarity with ES5 JavaScript. For example, we won’t explain how <code>Array.prototype.filter</code> works in a computed property that filters a list. In the cookbook however, essential JavaScript features (including ES6/2015+) can be explored and explained in the context of how they help us build better Vue applications.</p>\n</li>\n<li><p><strong>Exploring the Ecosystem</strong>: For advanced features, we assume some ecosystem knowledge. For example, if you want to use single-file components in Webpack, we don’t explain how to configure the non-Vue parts of the Webpack config. In the cookbook, we have the space to explore these ecosystem libraries in more depth - at least to the extent that is universally useful for Vue developers.</p>\n</li>\n</ul>\n<h2 id=\"Guidelines-for-Recipes\"><a href=\"#Guidelines-for-Recipes\" class=\"headerlink\" title=\"Guidelines for Recipes\"></a>Guidelines for Recipes</h2><p>Recipes should generally:</p>\n<blockquote>\n<ol>\n<li><p>Solve a specific, common problem</p>\n</li>\n<li><p>Start with the simplest possible example</p>\n</li>\n<li><p>Introduce complexities one at a time</p>\n</li>\n<li><p>Link to other docs, rather than re-explaining concepts</p>\n</li>\n<li><p>Describe the problem, rather than assuming familiarity</p>\n</li>\n<li><p>Explain the process, rather than just the end result</p>\n</li>\n<li><p>Explain the pros and cons of your strategy, including when it is and isn’t appropriate</p>\n</li>\n<li><p>Mention alternative solutions, if relevant, but leave in-depth explorations to a separate recipe</p>\n</li>\n</ol>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"WORK-IN-PROGRESS\"><a href=\"#WORK-IN-PROGRESS\" class=\"headerlink\" title=\"WORK IN PROGRESS\"></a>WORK IN PROGRESS</h2><p class=\"tip\">This cookbook is still in its very early stages. At this point, we will not be linking to it from anywhere else. Pages may be removed or reorganized at any time. Even the goals and overall format are still in flux.</p>\n\n<h2 id=\"The-Cookbook-vs-the-Guide\"><a href=\"#The-Cookbook-vs-the-Guide\" class=\"headerlink\" title=\"The Cookbook vs the Guide\"></a>The Cookbook vs the Guide</h2><p>How is the cookbook different from the guide? Why is this necessary?</p>\n<ul>\n<li><p><strong>Greater Focus</strong>: In the guide, we’re essentially telling a story. Each section builds on and assumes knowledge from each previous section. In the cookbook, each recipe can and should stand on its own. This means recipes can focus on one specific aspect of Vue, rather than having to give a general overview.</p>\n</li>\n<li><p><strong>Greater Depth</strong>: To avoid making the guide too long, we try to include only the simplest possible examples to help you understand each feature. Then we move on. In the cookbook, we can include more complex examples, combining features in interesting ways. Each recipe can also be as long and detailed as it needs to be, in order to fully explore its niche.</p>\n</li>\n<li><p><strong>Teaching JavaScript</strong>: In the guide, we assume at least intermediate familiarity with ES5 JavaScript. For example, we won’t explain how <code>Array.prototype.filter</code> works in a computed property that filters a list. In the cookbook however, essential JavaScript features (including ES6/2015+) can be explored and explained in the context of how they help us build better Vue applications.</p>\n</li>\n<li><p><strong>Exploring the Ecosystem</strong>: For advanced features, we assume some ecosystem knowledge. For example, if you want to use single-file components in Webpack, we don’t explain how to configure the non-Vue parts of the Webpack config. In the cookbook, we have the space to explore these ecosystem libraries in more depth - at least to the extent that is universally useful for Vue developers.</p>\n</li>\n</ul>\n<h2 id=\"Guidelines-for-Recipes\"><a href=\"#Guidelines-for-Recipes\" class=\"headerlink\" title=\"Guidelines for Recipes\"></a>Guidelines for Recipes</h2><p>Recipes should generally:</p>\n<blockquote>\n<ol>\n<li><p>Solve a specific, common problem</p>\n</li>\n<li><p>Start with the simplest possible example</p>\n</li>\n<li><p>Introduce complexities one at a time</p>\n</li>\n<li><p>Link to other docs, rather than re-explaining concepts</p>\n</li>\n<li><p>Describe the problem, rather than assuming familiarity</p>\n</li>\n<li><p>Explain the process, rather than just the end result</p>\n</li>\n<li><p>Explain the pros and cons of your strategy, including when it is and isn’t appropriate</p>\n</li>\n<li><p>Mention alternative solutions, if relevant, but leave in-depth explorations to a separate recipe</p>\n</li>\n</ol>\n</blockquote>\n"},{"title":"Adding Instance Properties","type":"cookbook","order":1.1,"_content":"\n## Simple Example\n\nThere may be data/utilities you'd like to use in many components, but you don't want to [pollute the global scope](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch3.md). In these cases, you can make them available to each Vue instance by defining them on the prototype:\n\n``` js\nVue.prototype.$appName = 'My App'\n```\n\nNow `$appName` is available on all Vue instances, even before creation. If we run:\n\n``` js\nnew Vue({\n  beforeCreate: function () {\n    console.log(this.$appName)\n  }\n})\n```\n\nThen `\"My App\"` will be logged to the console. It's that simple!\n\n## The Importance of Scoping Instance Properties\n\nYou may be wondering:\n\n> \"Why does `appName` start with `$`? Is that important? What does it do?\n\nNo magic is happening here. `$` is simply a convention Vue uses for properties that are available to all instances. This avoids conflicts with any defined data, computed properties, or methods.\n\n> \"Conflicts? What do you mean?\"\n\nAnother great question! If you just set:\n\n``` js\nVue.prototype.appName = 'My App'\n```\n\nThen what would you expect to be logged below?\n\n``` js\nnew Vue({\n  data: {\n    // Uh oh - appName is *also* the name of the\n    // instance property we just defined!\n    appName: 'The name of some other app'\n  },\n  beforeCreate: function () {\n    console.log(this.appName)\n  },\n  created: function () {\n    console.log(this.appName)\n  }\n})\n```\n\nIt would be `\"The name of some other app\"`, then `\"My App\"`, because `this.appName` is overwritten ([sort of](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch5.md)) by `data` when the instance is created. We scope instance properties with `$` to avoid this. You can even use your own convention if you'd like, such as `$_appName` or `ΩappName`, to prevent even conflicts with plugins or future features.\n\n## Real-World Example: Replacing Vue Resource with Axios\n\nLet's say you're replacing the [now-retired Vue Resource](https://medium.com/the-vue-point/retiring-vue-resource-871a82880af4). You really enjoyed accessing request methods through `this.$http` and you want to do the same thing with Axios instead.\n\nAll you have to do is include axios in your project:\n\n``` html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.15.2/axios.js\"></script>\n\n<div id=\"app\">\n  <ul>\n    <li v-for=\"user in users\">{{ user.name }}</li>\n  </ul>\n</div>\n```\n\nAlias `axios` to `Vue.prototype.$http`:\n\n``` js\nVue.prototype.$http = axios\n```\n\nThen you'll be able to use methods like `this.$http.get` in any Vue instance:\n\n``` js\nnew Vue({\n  el: '#app',\n  data: {\n    users: []\n  },\n  created () {\n    var vm = this\n    this.$http.get('https://jsonplaceholder.typicode.com/users')\n      .then(function (response) {\n        vm.users = response.data\n      })\n  }\n})\n```\n\n## The Context of Prototype Methods\n\nIn case you're not aware, methods added to a prototype in JavaScript gain the context of the instance. That means they can use `this` to access data, computed properties, methods, or anything else defined on the instance.\n\nLet's take advantage of this in a `$reverseText` method:\n\n``` js\nVue.prototype.$reverseText = function (propertyName) {\n  this[propertyName] = this[propertyName].split('').reverse().join('')\n}\n\nnew Vue({\n  data: {\n    message: 'Hello'\n  },\n  created: function () {\n    console.log(this.message)    // => \"Hello\"\n    this.$reverseText('message')\n    console.log(this.message)    // => \"olleH\"\n  }\n})\n```\n\nNote that the context binding will __not__ work if you use an ES6/2015 arrow function, as they implicitly bind to their parent scope. That means the arrow function version:\n\n``` js\nVue.prototype.$reverseText = propertyName => {\n  this[propertyName] = this[propertyName].split('').reverse().join('')\n}\n```\n\nWould throw an error:\n\n``` log\nUncaught TypeError: Cannot read property 'split' of undefined\n```\n\n## When To Avoid This Pattern\n\nAs long as you're vigilant in scoping prototype properties, using this pattern is quite safe - as in, unlikely to produce bugs.\n\nHowever, it can sometimes cause confusion with other developers. They might see `this.$http`, for example, and think, \"Oh, I didn't know about this Vue feature!\" Then they move to a different project and are confused when `this.$http` is undefined. Or, maybe they want to Google how to do something, but can't find results because they don't realize they're actually using Axios under an alias.\n\n__The convenience comes at the cost of explicitness.__ When just looking at a component, it's impossible to tell where `$http` came from. Vue itself? A plugin? A coworker?\n\nSo what are the alternatives?\n\n## Alternative Patterns\n\n### When Not Using a Module System\n\nIn applications with __no__ module system (e.g. via Webpack or Browserify), there's a pattern that's often used with _any_ JavaScript-enhanced frontend: a global `App` object.\n\nIf what you want to add has nothing to do with Vue specifically, this may be a good alternative to reach for. Here's an example:\n\n``` js\nvar App = Object.freeze({\n  name: 'My App',\n  description: '2.1.4',\n  helpers: {\n    // This is a purely functional version of\n    // the $reverseText method we saw earlier\n    reverseText: function (text) {\n      return text.split('').reverse().join('')\n    }\n  }\n})\n```\n\n<p class=\"tip\">If you raised an eyebrow at `Object.freeze`, what it does is prevent the object from being changed in the future. This essentially makes all its properties constants, protecting you from future state bugs.</p>\n\nNow the source of these shared properties is much more obvious: there's an `App` object defined somewhere in the app. To find it, developers need only run a project-wide search.\n\nAnother advantage is that `App` can now be used _anywhere_ in your code, whether it's Vue-related or not. That includes attaching values directly to instance options, rather than having to enter a function to access properties on `this`:\n\n``` js\nnew Vue({\n  data: {\n    appVersion: App.version\n  },\n  methods: {\n    reverseText: App.helpers.reverseText\n  }\n})\n```\n\n### When Using a Module System\n\nWhen you have access to a module system, you can easily organize shared code into modules, then `require`/`import` those modules wherever they're needed. This is the epitome of explicitness, because in each file you gain a list of dependencies. You know _exactly_ each one came from.\n\nWhile certainly more verbose, this approach is definitely the most maintainable, especially when working with other developers and/or building a large app.\n","source":"portland/cookbook/adding-instance-properties.md","raw":"---\ntitle: Adding Instance Properties\ntype: cookbook\norder: 1.1\n---\n\n## Simple Example\n\nThere may be data/utilities you'd like to use in many components, but you don't want to [pollute the global scope](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch3.md). In these cases, you can make them available to each Vue instance by defining them on the prototype:\n\n``` js\nVue.prototype.$appName = 'My App'\n```\n\nNow `$appName` is available on all Vue instances, even before creation. If we run:\n\n``` js\nnew Vue({\n  beforeCreate: function () {\n    console.log(this.$appName)\n  }\n})\n```\n\nThen `\"My App\"` will be logged to the console. It's that simple!\n\n## The Importance of Scoping Instance Properties\n\nYou may be wondering:\n\n> \"Why does `appName` start with `$`? Is that important? What does it do?\n\nNo magic is happening here. `$` is simply a convention Vue uses for properties that are available to all instances. This avoids conflicts with any defined data, computed properties, or methods.\n\n> \"Conflicts? What do you mean?\"\n\nAnother great question! If you just set:\n\n``` js\nVue.prototype.appName = 'My App'\n```\n\nThen what would you expect to be logged below?\n\n``` js\nnew Vue({\n  data: {\n    // Uh oh - appName is *also* the name of the\n    // instance property we just defined!\n    appName: 'The name of some other app'\n  },\n  beforeCreate: function () {\n    console.log(this.appName)\n  },\n  created: function () {\n    console.log(this.appName)\n  }\n})\n```\n\nIt would be `\"The name of some other app\"`, then `\"My App\"`, because `this.appName` is overwritten ([sort of](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch5.md)) by `data` when the instance is created. We scope instance properties with `$` to avoid this. You can even use your own convention if you'd like, such as `$_appName` or `ΩappName`, to prevent even conflicts with plugins or future features.\n\n## Real-World Example: Replacing Vue Resource with Axios\n\nLet's say you're replacing the [now-retired Vue Resource](https://medium.com/the-vue-point/retiring-vue-resource-871a82880af4). You really enjoyed accessing request methods through `this.$http` and you want to do the same thing with Axios instead.\n\nAll you have to do is include axios in your project:\n\n``` html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.15.2/axios.js\"></script>\n\n<div id=\"app\">\n  <ul>\n    <li v-for=\"user in users\">{{ user.name }}</li>\n  </ul>\n</div>\n```\n\nAlias `axios` to `Vue.prototype.$http`:\n\n``` js\nVue.prototype.$http = axios\n```\n\nThen you'll be able to use methods like `this.$http.get` in any Vue instance:\n\n``` js\nnew Vue({\n  el: '#app',\n  data: {\n    users: []\n  },\n  created () {\n    var vm = this\n    this.$http.get('https://jsonplaceholder.typicode.com/users')\n      .then(function (response) {\n        vm.users = response.data\n      })\n  }\n})\n```\n\n## The Context of Prototype Methods\n\nIn case you're not aware, methods added to a prototype in JavaScript gain the context of the instance. That means they can use `this` to access data, computed properties, methods, or anything else defined on the instance.\n\nLet's take advantage of this in a `$reverseText` method:\n\n``` js\nVue.prototype.$reverseText = function (propertyName) {\n  this[propertyName] = this[propertyName].split('').reverse().join('')\n}\n\nnew Vue({\n  data: {\n    message: 'Hello'\n  },\n  created: function () {\n    console.log(this.message)    // => \"Hello\"\n    this.$reverseText('message')\n    console.log(this.message)    // => \"olleH\"\n  }\n})\n```\n\nNote that the context binding will __not__ work if you use an ES6/2015 arrow function, as they implicitly bind to their parent scope. That means the arrow function version:\n\n``` js\nVue.prototype.$reverseText = propertyName => {\n  this[propertyName] = this[propertyName].split('').reverse().join('')\n}\n```\n\nWould throw an error:\n\n``` log\nUncaught TypeError: Cannot read property 'split' of undefined\n```\n\n## When To Avoid This Pattern\n\nAs long as you're vigilant in scoping prototype properties, using this pattern is quite safe - as in, unlikely to produce bugs.\n\nHowever, it can sometimes cause confusion with other developers. They might see `this.$http`, for example, and think, \"Oh, I didn't know about this Vue feature!\" Then they move to a different project and are confused when `this.$http` is undefined. Or, maybe they want to Google how to do something, but can't find results because they don't realize they're actually using Axios under an alias.\n\n__The convenience comes at the cost of explicitness.__ When just looking at a component, it's impossible to tell where `$http` came from. Vue itself? A plugin? A coworker?\n\nSo what are the alternatives?\n\n## Alternative Patterns\n\n### When Not Using a Module System\n\nIn applications with __no__ module system (e.g. via Webpack or Browserify), there's a pattern that's often used with _any_ JavaScript-enhanced frontend: a global `App` object.\n\nIf what you want to add has nothing to do with Vue specifically, this may be a good alternative to reach for. Here's an example:\n\n``` js\nvar App = Object.freeze({\n  name: 'My App',\n  description: '2.1.4',\n  helpers: {\n    // This is a purely functional version of\n    // the $reverseText method we saw earlier\n    reverseText: function (text) {\n      return text.split('').reverse().join('')\n    }\n  }\n})\n```\n\n<p class=\"tip\">If you raised an eyebrow at `Object.freeze`, what it does is prevent the object from being changed in the future. This essentially makes all its properties constants, protecting you from future state bugs.</p>\n\nNow the source of these shared properties is much more obvious: there's an `App` object defined somewhere in the app. To find it, developers need only run a project-wide search.\n\nAnother advantage is that `App` can now be used _anywhere_ in your code, whether it's Vue-related or not. That includes attaching values directly to instance options, rather than having to enter a function to access properties on `this`:\n\n``` js\nnew Vue({\n  data: {\n    appVersion: App.version\n  },\n  methods: {\n    reverseText: App.helpers.reverseText\n  }\n})\n```\n\n### When Using a Module System\n\nWhen you have access to a module system, you can easily organize shared code into modules, then `require`/`import` those modules wherever they're needed. This is the epitome of explicitness, because in each file you gain a list of dependencies. You know _exactly_ each one came from.\n\nWhile certainly more verbose, this approach is definitely the most maintainable, especially when working with other developers and/or building a large app.\n","date":"2017-06-11T22:12:06.000Z","updated":"2017-06-11T19:28:10.000Z","path":"portland/cookbook/adding-instance-properties.html","comments":1,"layout":"page","_id":"cj3wg8kn00006q0pwq4dim6rh","content":"<h2 id=\"Simple-Example\"><a href=\"#Simple-Example\" class=\"headerlink\" title=\"Simple Example\"></a>Simple Example</h2><p>There may be data/utilities you’d like to use in many components, but you don’t want to <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch3.md\" target=\"_blank\" rel=\"external\">pollute the global scope</a>. In these cases, you can make them available to each Vue instance by defining them on the prototype:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.prototype.$appName = <span class=\"string\">'My App'</span></div></pre></td></tr></table></figure>\n<p>Now <code>$appName</code> is available on all Vue instances, even before creation. If we run:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">beforeCreate</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$appName)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Then <code>&quot;My App&quot;</code> will be logged to the console. It’s that simple!</p>\n<h2 id=\"The-Importance-of-Scoping-Instance-Properties\"><a href=\"#The-Importance-of-Scoping-Instance-Properties\" class=\"headerlink\" title=\"The Importance of Scoping Instance Properties\"></a>The Importance of Scoping Instance Properties</h2><p>You may be wondering:</p>\n<blockquote>\n<p>“Why does <code>appName</code> start with <code>$</code>? Is that important? What does it do?</p>\n</blockquote>\n<p>No magic is happening here. <code>$</code> is simply a convention Vue uses for properties that are available to all instances. This avoids conflicts with any defined data, computed properties, or methods.</p>\n<blockquote>\n<p>“Conflicts? What do you mean?”</p>\n</blockquote>\n<p>Another great question! If you just set:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.prototype.appName = <span class=\"string\">'My App'</span></div></pre></td></tr></table></figure>\n<p>Then what would you expect to be logged below?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// Uh oh - appName is *also* the name of the</span></div><div class=\"line\">    <span class=\"comment\">// instance property we just defined!</span></div><div class=\"line\">    appName: <span class=\"string\">'The name of some other app'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">beforeCreate</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.appName)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.appName)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>It would be <code>&quot;The name of some other app&quot;</code>, then <code>&quot;My App&quot;</code>, because <code>this.appName</code> is overwritten (<a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch5.md\" target=\"_blank\" rel=\"external\">sort of</a>) by <code>data</code> when the instance is created. We scope instance properties with <code>$</code> to avoid this. You can even use your own convention if you’d like, such as <code>$_appName</code> or <code>ΩappName</code>, to prevent even conflicts with plugins or future features.</p>\n<h2 id=\"Real-World-Example-Replacing-Vue-Resource-with-Axios\"><a href=\"#Real-World-Example-Replacing-Vue-Resource-with-Axios\" class=\"headerlink\" title=\"Real-World Example: Replacing Vue Resource with Axios\"></a>Real-World Example: Replacing Vue Resource with Axios</h2><p>Let’s say you’re replacing the <a href=\"https://medium.com/the-vue-point/retiring-vue-resource-871a82880af4\" target=\"_blank\" rel=\"external\">now-retired Vue Resource</a>. You really enjoyed accessing request methods through <code>this.$http</code> and you want to do the same thing with Axios instead.</p>\n<p>All you have to do is include axios in your project:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.15.2/axios.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Alias <code>axios</code> to <code>Vue.prototype.$http</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.prototype.$http = axios</div></pre></td></tr></table></figure>\n<p>Then you’ll be able to use methods like <code>this.$http.get</code> in any Vue instance:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">users</span>: []</div><div class=\"line\">  &#125;,</div><div class=\"line\">  created () &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.$http.get(<span class=\"string\">'https://jsonplaceholder.typicode.com/users'</span>)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">        vm.users = response.data</div><div class=\"line\">      &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"The-Context-of-Prototype-Methods\"><a href=\"#The-Context-of-Prototype-Methods\" class=\"headerlink\" title=\"The Context of Prototype Methods\"></a>The Context of Prototype Methods</h2><p>In case you’re not aware, methods added to a prototype in JavaScript gain the context of the instance. That means they can use <code>this</code> to access data, computed properties, methods, or anything else defined on the instance.</p>\n<p>Let’s take advantage of this in a <code>$reverseText</code> method:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.prototype.$reverseText = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">propertyName</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>[propertyName] = <span class=\"keyword\">this</span>[propertyName].split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'Hello'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.message)    <span class=\"comment\">// =&gt; \"Hello\"</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.$reverseText(<span class=\"string\">'message'</span>)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.message)    <span class=\"comment\">// =&gt; \"olleH\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Note that the context binding will <strong>not</strong> work if you use an ES6/2015 arrow function, as they implicitly bind to their parent scope. That means the arrow function version:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.prototype.$reverseText = <span class=\"function\"><span class=\"params\">propertyName</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>[propertyName] = <span class=\"keyword\">this</span>[propertyName].split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Would throw an error:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">Uncaught TypeError: Cannot read property &apos;split&apos; of undefined</div></pre></td></tr></table></figure>\n<h2 id=\"When-To-Avoid-This-Pattern\"><a href=\"#When-To-Avoid-This-Pattern\" class=\"headerlink\" title=\"When To Avoid This Pattern\"></a>When To Avoid This Pattern</h2><p>As long as you’re vigilant in scoping prototype properties, using this pattern is quite safe - as in, unlikely to produce bugs.</p>\n<p>However, it can sometimes cause confusion with other developers. They might see <code>this.$http</code>, for example, and think, “Oh, I didn’t know about this Vue feature!” Then they move to a different project and are confused when <code>this.$http</code> is undefined. Or, maybe they want to Google how to do something, but can’t find results because they don’t realize they’re actually using Axios under an alias.</p>\n<p><strong>The convenience comes at the cost of explicitness.</strong> When just looking at a component, it’s impossible to tell where <code>$http</code> came from. Vue itself? A plugin? A coworker?</p>\n<p>So what are the alternatives?</p>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><h3 id=\"When-Not-Using-a-Module-System\"><a href=\"#When-Not-Using-a-Module-System\" class=\"headerlink\" title=\"When Not Using a Module System\"></a>When Not Using a Module System</h3><p>In applications with <strong>no</strong> module system (e.g. via Webpack or Browserify), there’s a pattern that’s often used with <em>any</em> JavaScript-enhanced frontend: a global <code>App</code> object.</p>\n<p>If what you want to add has nothing to do with Vue specifically, this may be a good alternative to reach for. Here’s an example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> App = <span class=\"built_in\">Object</span>.freeze(&#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'My App'</span>,</div><div class=\"line\">  <span class=\"attr\">description</span>: <span class=\"string\">'2.1.4'</span>,</div><div class=\"line\">  <span class=\"attr\">helpers</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// This is a purely functional version of</span></div><div class=\"line\">    <span class=\"comment\">// the $reverseText method we saw earlier</span></div><div class=\"line\">    reverseText: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> text.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p class=\"tip\">If you raised an eyebrow at <code>Object.freeze</code>, what it does is prevent the object from being changed in the future. This essentially makes all its properties constants, protecting you from future state bugs.</p>\n\n<p>Now the source of these shared properties is much more obvious: there’s an <code>App</code> object defined somewhere in the app. To find it, developers need only run a project-wide search.</p>\n<p>Another advantage is that <code>App</code> can now be used <em>anywhere</em> in your code, whether it’s Vue-related or not. That includes attaching values directly to instance options, rather than having to enter a function to access properties on <code>this</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">appVersion</span>: App.version</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">reverseText</span>: App.helpers.reverseText</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"When-Using-a-Module-System\"><a href=\"#When-Using-a-Module-System\" class=\"headerlink\" title=\"When Using a Module System\"></a>When Using a Module System</h3><p>When you have access to a module system, you can easily organize shared code into modules, then <code>require</code>/<code>import</code> those modules wherever they’re needed. This is the epitome of explicitness, because in each file you gain a list of dependencies. You know <em>exactly</em> each one came from.</p>\n<p>While certainly more verbose, this approach is definitely the most maintainable, especially when working with other developers and/or building a large app.</p>\n","excerpt":"","more":"<h2 id=\"Simple-Example\"><a href=\"#Simple-Example\" class=\"headerlink\" title=\"Simple Example\"></a>Simple Example</h2><p>There may be data/utilities you’d like to use in many components, but you don’t want to <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch3.md\">pollute the global scope</a>. In these cases, you can make them available to each Vue instance by defining them on the prototype:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.prototype.$appName = <span class=\"string\">'My App'</span></div></pre></td></tr></table></figure>\n<p>Now <code>$appName</code> is available on all Vue instances, even before creation. If we run:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">beforeCreate</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$appName)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Then <code>&quot;My App&quot;</code> will be logged to the console. It’s that simple!</p>\n<h2 id=\"The-Importance-of-Scoping-Instance-Properties\"><a href=\"#The-Importance-of-Scoping-Instance-Properties\" class=\"headerlink\" title=\"The Importance of Scoping Instance Properties\"></a>The Importance of Scoping Instance Properties</h2><p>You may be wondering:</p>\n<blockquote>\n<p>“Why does <code>appName</code> start with <code>$</code>? Is that important? What does it do?</p>\n</blockquote>\n<p>No magic is happening here. <code>$</code> is simply a convention Vue uses for properties that are available to all instances. This avoids conflicts with any defined data, computed properties, or methods.</p>\n<blockquote>\n<p>“Conflicts? What do you mean?”</p>\n</blockquote>\n<p>Another great question! If you just set:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.prototype.appName = <span class=\"string\">'My App'</span></div></pre></td></tr></table></figure>\n<p>Then what would you expect to be logged below?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// Uh oh - appName is *also* the name of the</span></div><div class=\"line\">    <span class=\"comment\">// instance property we just defined!</span></div><div class=\"line\">    appName: <span class=\"string\">'The name of some other app'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">beforeCreate</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.appName)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.appName)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>It would be <code>&quot;The name of some other app&quot;</code>, then <code>&quot;My App&quot;</code>, because <code>this.appName</code> is overwritten (<a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch5.md\">sort of</a>) by <code>data</code> when the instance is created. We scope instance properties with <code>$</code> to avoid this. You can even use your own convention if you’d like, such as <code>$_appName</code> or <code>ΩappName</code>, to prevent even conflicts with plugins or future features.</p>\n<h2 id=\"Real-World-Example-Replacing-Vue-Resource-with-Axios\"><a href=\"#Real-World-Example-Replacing-Vue-Resource-with-Axios\" class=\"headerlink\" title=\"Real-World Example: Replacing Vue Resource with Axios\"></a>Real-World Example: Replacing Vue Resource with Axios</h2><p>Let’s say you’re replacing the <a href=\"https://medium.com/the-vue-point/retiring-vue-resource-871a82880af4\">now-retired Vue Resource</a>. You really enjoyed accessing request methods through <code>this.$http</code> and you want to do the same thing with Axios instead.</p>\n<p>All you have to do is include axios in your project:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.15.2/axios.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users\"</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Alias <code>axios</code> to <code>Vue.prototype.$http</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.prototype.$http = axios</div></pre></td></tr></table></figure>\n<p>Then you’ll be able to use methods like <code>this.$http.get</code> in any Vue instance:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">users</span>: []</div><div class=\"line\">  &#125;,</div><div class=\"line\">  created () &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.$http.get(<span class=\"string\">'https://jsonplaceholder.typicode.com/users'</span>)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">        vm.users = response.data</div><div class=\"line\">      &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"The-Context-of-Prototype-Methods\"><a href=\"#The-Context-of-Prototype-Methods\" class=\"headerlink\" title=\"The Context of Prototype Methods\"></a>The Context of Prototype Methods</h2><p>In case you’re not aware, methods added to a prototype in JavaScript gain the context of the instance. That means they can use <code>this</code> to access data, computed properties, methods, or anything else defined on the instance.</p>\n<p>Let’s take advantage of this in a <code>$reverseText</code> method:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.prototype.$reverseText = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">propertyName</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>[propertyName] = <span class=\"keyword\">this</span>[propertyName].split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'Hello'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.message)    <span class=\"comment\">// =&gt; \"Hello\"</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.$reverseText(<span class=\"string\">'message'</span>)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.message)    <span class=\"comment\">// =&gt; \"olleH\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Note that the context binding will <strong>not</strong> work if you use an ES6/2015 arrow function, as they implicitly bind to their parent scope. That means the arrow function version:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.prototype.$reverseText = <span class=\"function\"><span class=\"params\">propertyName</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>[propertyName] = <span class=\"keyword\">this</span>[propertyName].split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Would throw an error:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">Uncaught TypeError: Cannot read property &apos;split&apos; of undefined</div></pre></td></tr></table></figure>\n<h2 id=\"When-To-Avoid-This-Pattern\"><a href=\"#When-To-Avoid-This-Pattern\" class=\"headerlink\" title=\"When To Avoid This Pattern\"></a>When To Avoid This Pattern</h2><p>As long as you’re vigilant in scoping prototype properties, using this pattern is quite safe - as in, unlikely to produce bugs.</p>\n<p>However, it can sometimes cause confusion with other developers. They might see <code>this.$http</code>, for example, and think, “Oh, I didn’t know about this Vue feature!” Then they move to a different project and are confused when <code>this.$http</code> is undefined. Or, maybe they want to Google how to do something, but can’t find results because they don’t realize they’re actually using Axios under an alias.</p>\n<p><strong>The convenience comes at the cost of explicitness.</strong> When just looking at a component, it’s impossible to tell where <code>$http</code> came from. Vue itself? A plugin? A coworker?</p>\n<p>So what are the alternatives?</p>\n<h2 id=\"Alternative-Patterns\"><a href=\"#Alternative-Patterns\" class=\"headerlink\" title=\"Alternative Patterns\"></a>Alternative Patterns</h2><h3 id=\"When-Not-Using-a-Module-System\"><a href=\"#When-Not-Using-a-Module-System\" class=\"headerlink\" title=\"When Not Using a Module System\"></a>When Not Using a Module System</h3><p>In applications with <strong>no</strong> module system (e.g. via Webpack or Browserify), there’s a pattern that’s often used with <em>any</em> JavaScript-enhanced frontend: a global <code>App</code> object.</p>\n<p>If what you want to add has nothing to do with Vue specifically, this may be a good alternative to reach for. Here’s an example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> App = <span class=\"built_in\">Object</span>.freeze(&#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'My App'</span>,</div><div class=\"line\">  <span class=\"attr\">description</span>: <span class=\"string\">'2.1.4'</span>,</div><div class=\"line\">  <span class=\"attr\">helpers</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// This is a purely functional version of</span></div><div class=\"line\">    <span class=\"comment\">// the $reverseText method we saw earlier</span></div><div class=\"line\">    reverseText: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> text.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p class=\"tip\">If you raised an eyebrow at <code>Object.freeze</code>, what it does is prevent the object from being changed in the future. This essentially makes all its properties constants, protecting you from future state bugs.</p>\n\n<p>Now the source of these shared properties is much more obvious: there’s an <code>App</code> object defined somewhere in the app. To find it, developers need only run a project-wide search.</p>\n<p>Another advantage is that <code>App</code> can now be used <em>anywhere</em> in your code, whether it’s Vue-related or not. That includes attaching values directly to instance options, rather than having to enter a function to access properties on <code>this</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">appVersion</span>: App.version</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">reverseText</span>: App.helpers.reverseText</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"When-Using-a-Module-System\"><a href=\"#When-Using-a-Module-System\" class=\"headerlink\" title=\"When Using a Module System\"></a>When Using a Module System</h3><p>When you have access to a module system, you can easily organize shared code into modules, then <code>require</code>/<code>import</code> those modules wherever they’re needed. This is the epitome of explicitness, because in each file you gain a list of dependencies. You know <em>exactly</em> each one came from.</p>\n<p>While certainly more verbose, this approach is definitely the most maintainable, especially when working with other developers and/or building a large app.</p>\n"},{"title":"Introduction","type":"guide","order":2,"_content":"\n## What is Cement?\n\nCement is an advanced Application Framework for Python, with a primary focus on Command Line Interfaces (CLI).  Its goal is to introduce a standard, and feature-full platform for both simple and complex command line applications as well as support rapid development needs without sacrificing quality.  Cement is flexible, and it's use cases span from the simplicity of a micro-framework to the complexity of a mega-framework. Whether it's a single file script, or a multi-tier application, Cement is the foundation you've been looking for.\n\nThe first commit to Git was on Dec 4, 2009.  Since then, the framework has seen several iterations in design, and has continued to grow and improve since it's inception.  Cement is the most stable, and complete framework for command line and backend application development.\n\n## Core Features\n\nCement core features include (but are not limited to):\n\n- Core pieces of the framework are customizable via handlers/interfaces\n- Handler system connects implementation classes with Interfaces\n- Extension handler interface to easily extend framework functionality\n- Config handler supports parsing multiple config files into one config\n- Argument handler parses command line arguments and merges with config\n- Log handler supports console and file logging\n- Plugin handler provides an interface to easily extend your application\n- Output handler interface renders return dictionaries to console\n- Cache handler interface adds caching support for improved performance\n- Controller handler supports sub-commands, and nested controllers\n- Hook support adds a bit of magic to apps and also ties into framework\n- Zero external dependencies* (not including optional extensions)\n- 100% test coverage using `nose` and `coverage`\n- 100% PEP8 and style compliant using `flake8`\n- Extensive Sphinx documentation\n- Tested on Python 3.5+\n- Does not support Python 2.x\n\n<p class=\"tip-warn\">Some optional extensions that are shipped with the mainline Cement sources do require external dependencies.  It is the responsibility of the application developer to include these dependencies along with their application, as Cement explicitly does not include them.</p>\n\n## License\n\nThe Cement Framework is Open Source and is distributed under the BSD License (three clause).\n\n```\nCopyright (c) 2009-2017 Data Folk Labs, LLC\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of Data Folk Labs, LLC. nor the names of its\n      contributors may be used to endorse or promote products derived from\n      this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n## Installation\n\nStable versions are available via PyPi:\n\n```\n$ pip install cement\n```\n\nDevelopment versions are available via Github:\n\n```\n$ git clone git://github.com/datafolklabs/cement.git\n\n$ cd cement/\n\n$ python setup.py install\n```\n\n## Getting Started\n\n<p class=\"tip-warn\">The developer guide assumes intermediate level knowledge of Python. If you are totally new to Python development, you might want to get more familiar with the language before jumping into a framework.</p>\n\nEx: Hello World:\n\n```python\nfrom cement import App\n\nwith App('myapp') as app:\n    app.run()\n    print('Hello World!')\n```\n\nCLI Usage:\n\n```\n$ python myapp.py --help\nusage: myapp [-h] [--debug] [--quiet]\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --debug     toggle debug output\n  --quiet     suppress all output\n\n$ python myapp.py\nHello World!\n```\n\n\n","source":"portland/dev/index.md","raw":"---\ntitle: Introduction\ntype: guide\norder: 2\n---\n\n## What is Cement?\n\nCement is an advanced Application Framework for Python, with a primary focus on Command Line Interfaces (CLI).  Its goal is to introduce a standard, and feature-full platform for both simple and complex command line applications as well as support rapid development needs without sacrificing quality.  Cement is flexible, and it's use cases span from the simplicity of a micro-framework to the complexity of a mega-framework. Whether it's a single file script, or a multi-tier application, Cement is the foundation you've been looking for.\n\nThe first commit to Git was on Dec 4, 2009.  Since then, the framework has seen several iterations in design, and has continued to grow and improve since it's inception.  Cement is the most stable, and complete framework for command line and backend application development.\n\n## Core Features\n\nCement core features include (but are not limited to):\n\n- Core pieces of the framework are customizable via handlers/interfaces\n- Handler system connects implementation classes with Interfaces\n- Extension handler interface to easily extend framework functionality\n- Config handler supports parsing multiple config files into one config\n- Argument handler parses command line arguments and merges with config\n- Log handler supports console and file logging\n- Plugin handler provides an interface to easily extend your application\n- Output handler interface renders return dictionaries to console\n- Cache handler interface adds caching support for improved performance\n- Controller handler supports sub-commands, and nested controllers\n- Hook support adds a bit of magic to apps and also ties into framework\n- Zero external dependencies* (not including optional extensions)\n- 100% test coverage using `nose` and `coverage`\n- 100% PEP8 and style compliant using `flake8`\n- Extensive Sphinx documentation\n- Tested on Python 3.5+\n- Does not support Python 2.x\n\n<p class=\"tip-warn\">Some optional extensions that are shipped with the mainline Cement sources do require external dependencies.  It is the responsibility of the application developer to include these dependencies along with their application, as Cement explicitly does not include them.</p>\n\n## License\n\nThe Cement Framework is Open Source and is distributed under the BSD License (three clause).\n\n```\nCopyright (c) 2009-2017 Data Folk Labs, LLC\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of Data Folk Labs, LLC. nor the names of its\n      contributors may be used to endorse or promote products derived from\n      this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n## Installation\n\nStable versions are available via PyPi:\n\n```\n$ pip install cement\n```\n\nDevelopment versions are available via Github:\n\n```\n$ git clone git://github.com/datafolklabs/cement.git\n\n$ cd cement/\n\n$ python setup.py install\n```\n\n## Getting Started\n\n<p class=\"tip-warn\">The developer guide assumes intermediate level knowledge of Python. If you are totally new to Python development, you might want to get more familiar with the language before jumping into a framework.</p>\n\nEx: Hello World:\n\n```python\nfrom cement import App\n\nwith App('myapp') as app:\n    app.run()\n    print('Hello World!')\n```\n\nCLI Usage:\n\n```\n$ python myapp.py --help\nusage: myapp [-h] [--debug] [--quiet]\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --debug     toggle debug output\n  --quiet     suppress all output\n\n$ python myapp.py\nHello World!\n```\n\n\n","date":"2017-06-12T06:10:07.000Z","updated":"2017-06-12T06:10:07.000Z","path":"portland/dev/index.html","comments":1,"layout":"page","_id":"cj3wg8kn10007q0pwaip3vdma","content":"<h2 id=\"What-is-Cement\"><a href=\"#What-is-Cement\" class=\"headerlink\" title=\"What is Cement?\"></a>What is Cement?</h2><p>Cement is an advanced Application Framework for Python, with a primary focus on Command Line Interfaces (CLI).  Its goal is to introduce a standard, and feature-full platform for both simple and complex command line applications as well as support rapid development needs without sacrificing quality.  Cement is flexible, and it’s use cases span from the simplicity of a micro-framework to the complexity of a mega-framework. Whether it’s a single file script, or a multi-tier application, Cement is the foundation you’ve been looking for.</p>\n<p>The first commit to Git was on Dec 4, 2009.  Since then, the framework has seen several iterations in design, and has continued to grow and improve since it’s inception.  Cement is the most stable, and complete framework for command line and backend application development.</p>\n<h2 id=\"Core-Features\"><a href=\"#Core-Features\" class=\"headerlink\" title=\"Core Features\"></a>Core Features</h2><p>Cement core features include (but are not limited to):</p>\n<ul>\n<li>Core pieces of the framework are customizable via handlers/interfaces</li>\n<li>Handler system connects implementation classes with Interfaces</li>\n<li>Extension handler interface to easily extend framework functionality</li>\n<li>Config handler supports parsing multiple config files into one config</li>\n<li>Argument handler parses command line arguments and merges with config</li>\n<li>Log handler supports console and file logging</li>\n<li>Plugin handler provides an interface to easily extend your application</li>\n<li>Output handler interface renders return dictionaries to console</li>\n<li>Cache handler interface adds caching support for improved performance</li>\n<li>Controller handler supports sub-commands, and nested controllers</li>\n<li>Hook support adds a bit of magic to apps and also ties into framework</li>\n<li>Zero external dependencies* (not including optional extensions)</li>\n<li>100% test coverage using <code>nose</code> and <code>coverage</code></li>\n<li>100% PEP8 and style compliant using <code>flake8</code></li>\n<li>Extensive Sphinx documentation</li>\n<li>Tested on Python 3.5+</li>\n<li>Does not support Python 2.x</li>\n</ul>\n<p class=\"tip-warn\">Some optional extensions that are shipped with the mainline Cement sources do require external dependencies.  It is the responsibility of the application developer to include these dependencies along with their application, as Cement explicitly does not include them.</p>\n\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><p>The Cement Framework is Open Source and is distributed under the BSD License (three clause).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">Copyright (c) 2009-2017 Data Folk Labs, LLC</div><div class=\"line\">All rights reserved.</div><div class=\"line\"></div><div class=\"line\">Redistribution and use in source and binary forms, with or without</div><div class=\"line\">modification, are permitted provided that the following conditions are met:</div><div class=\"line\"></div><div class=\"line\">    * Redistributions of source code must retain the above copyright notice,</div><div class=\"line\">      this list of conditions and the following disclaimer.</div><div class=\"line\">    * Redistributions in binary form must reproduce the above copyright</div><div class=\"line\">      notice, this list of conditions and the following disclaimer in the</div><div class=\"line\">      documentation and/or other materials provided with the distribution.</div><div class=\"line\">    * Neither the name of Data Folk Labs, LLC. nor the names of its</div><div class=\"line\">      contributors may be used to endorse or promote products derived from</div><div class=\"line\">      this software without specific prior written permission.</div><div class=\"line\"></div><div class=\"line\">THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot;</div><div class=\"line\">AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</div><div class=\"line\">IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</div><div class=\"line\">DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</div><div class=\"line\">FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</div><div class=\"line\">DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</div><div class=\"line\">SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</div><div class=\"line\">CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</div><div class=\"line\">OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</div><div class=\"line\">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</div></pre></td></tr></table></figure>\n<h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><p>Stable versions are available via PyPi:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ pip install cement</div></pre></td></tr></table></figure>\n<p>Development versions are available via Github:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git clone git://github.com/datafolklabs/cement.git</div><div class=\"line\"></div><div class=\"line\">$ cd cement/</div><div class=\"line\"></div><div class=\"line\">$ python setup.py install</div></pre></td></tr></table></figure>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><p class=\"tip-warn\">The developer guide assumes intermediate level knowledge of Python. If you are totally new to Python development, you might want to get more familiar with the language before jumping into a framework.</p>\n\n<p>Ex: Hello World:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> App(<span class=\"string\">'myapp'</span>) <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div><div class=\"line\">    print(<span class=\"string\">'Hello World!'</span>)</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py --help</div><div class=\"line\">usage: myapp [-h] [--debug] [--quiet]</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --help  show this help message and exit</div><div class=\"line\">  --debug     toggle debug output</div><div class=\"line\">  --quiet     suppress all output</div><div class=\"line\"></div><div class=\"line\">$ python myapp.py</div><div class=\"line\">Hello World!</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"What-is-Cement\"><a href=\"#What-is-Cement\" class=\"headerlink\" title=\"What is Cement?\"></a>What is Cement?</h2><p>Cement is an advanced Application Framework for Python, with a primary focus on Command Line Interfaces (CLI).  Its goal is to introduce a standard, and feature-full platform for both simple and complex command line applications as well as support rapid development needs without sacrificing quality.  Cement is flexible, and it’s use cases span from the simplicity of a micro-framework to the complexity of a mega-framework. Whether it’s a single file script, or a multi-tier application, Cement is the foundation you’ve been looking for.</p>\n<p>The first commit to Git was on Dec 4, 2009.  Since then, the framework has seen several iterations in design, and has continued to grow and improve since it’s inception.  Cement is the most stable, and complete framework for command line and backend application development.</p>\n<h2 id=\"Core-Features\"><a href=\"#Core-Features\" class=\"headerlink\" title=\"Core Features\"></a>Core Features</h2><p>Cement core features include (but are not limited to):</p>\n<ul>\n<li>Core pieces of the framework are customizable via handlers/interfaces</li>\n<li>Handler system connects implementation classes with Interfaces</li>\n<li>Extension handler interface to easily extend framework functionality</li>\n<li>Config handler supports parsing multiple config files into one config</li>\n<li>Argument handler parses command line arguments and merges with config</li>\n<li>Log handler supports console and file logging</li>\n<li>Plugin handler provides an interface to easily extend your application</li>\n<li>Output handler interface renders return dictionaries to console</li>\n<li>Cache handler interface adds caching support for improved performance</li>\n<li>Controller handler supports sub-commands, and nested controllers</li>\n<li>Hook support adds a bit of magic to apps and also ties into framework</li>\n<li>Zero external dependencies* (not including optional extensions)</li>\n<li>100% test coverage using <code>nose</code> and <code>coverage</code></li>\n<li>100% PEP8 and style compliant using <code>flake8</code></li>\n<li>Extensive Sphinx documentation</li>\n<li>Tested on Python 3.5+</li>\n<li>Does not support Python 2.x</li>\n</ul>\n<p class=\"tip-warn\">Some optional extensions that are shipped with the mainline Cement sources do require external dependencies.  It is the responsibility of the application developer to include these dependencies along with their application, as Cement explicitly does not include them.</p>\n\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><p>The Cement Framework is Open Source and is distributed under the BSD License (three clause).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">Copyright (c) 2009-2017 Data Folk Labs, LLC</div><div class=\"line\">All rights reserved.</div><div class=\"line\"></div><div class=\"line\">Redistribution and use in source and binary forms, with or without</div><div class=\"line\">modification, are permitted provided that the following conditions are met:</div><div class=\"line\"></div><div class=\"line\">    * Redistributions of source code must retain the above copyright notice,</div><div class=\"line\">      this list of conditions and the following disclaimer.</div><div class=\"line\">    * Redistributions in binary form must reproduce the above copyright</div><div class=\"line\">      notice, this list of conditions and the following disclaimer in the</div><div class=\"line\">      documentation and/or other materials provided with the distribution.</div><div class=\"line\">    * Neither the name of Data Folk Labs, LLC. nor the names of its</div><div class=\"line\">      contributors may be used to endorse or promote products derived from</div><div class=\"line\">      this software without specific prior written permission.</div><div class=\"line\"></div><div class=\"line\">THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot;</div><div class=\"line\">AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</div><div class=\"line\">IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</div><div class=\"line\">DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</div><div class=\"line\">FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</div><div class=\"line\">DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</div><div class=\"line\">SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</div><div class=\"line\">CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</div><div class=\"line\">OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</div><div class=\"line\">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</div></pre></td></tr></table></figure>\n<h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><p>Stable versions are available via PyPi:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ pip install cement</div></pre></td></tr></table></figure>\n<p>Development versions are available via Github:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git clone git://github.com/datafolklabs/cement.git</div><div class=\"line\"></div><div class=\"line\">$ cd cement/</div><div class=\"line\"></div><div class=\"line\">$ python setup.py install</div></pre></td></tr></table></figure>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><p class=\"tip-warn\">The developer guide assumes intermediate level knowledge of Python. If you are totally new to Python development, you might want to get more familiar with the language before jumping into a framework.</p>\n\n<p>Ex: Hello World:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> App(<span class=\"string\">'myapp'</span>) <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div><div class=\"line\">    print(<span class=\"string\">'Hello World!'</span>)</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py --help</div><div class=\"line\">usage: myapp [-h] [--debug] [--quiet]</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --help  show this help message and exit</div><div class=\"line\">  --debug     toggle debug output</div><div class=\"line\">  --quiet     suppress all output</div><div class=\"line\"></div><div class=\"line\">$ python myapp.py</div><div class=\"line\">Hello World!</div></pre></td></tr></table></figure>\n"},{"title":"GitHub Commits","type":"examples","order":1,"_content":"\n> This example fetches latest Vue.js commits data from GitHub's API and displays them as a list. You can switch between the master and dev branches.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/c5g8xnar/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"portland/examples/commits.md","raw":"---\ntitle: GitHub Commits\ntype: examples\norder: 1\n---\n\n> This example fetches latest Vue.js commits data from GitHub's API and displays them as a list. You can switch between the master and dev branches.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/c5g8xnar/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2017-06-11T22:12:06.000Z","updated":"2017-06-11T19:28:10.000Z","path":"portland/examples/commits.html","comments":1,"layout":"page","_id":"cj3wg8kn20008q0pwsl7zkj4m","content":"<blockquote>\n<p>This example fetches latest Vue.js commits data from GitHub’s API and displays them as a list. You can switch between the master and dev branches.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/c5g8xnar/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>This example fetches latest Vue.js commits data from GitHub’s API and displays them as a list. You can switch between the master and dev branches.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/c5g8xnar/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Realtime with deepstreamHub","type":"examples","order":9,"_content":"\n> This example uses [deepstreamHub](https://deepstreamhub.com/) to synchronize realtime data, send events and make remote procedure calls between clients (you can try opening it in multiple browser windows).\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/ff0sp9hw/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"portland/examples/deepstream.md","raw":"---\ntitle: Realtime with deepstreamHub\ntype: examples\norder: 9\n---\n\n> This example uses [deepstreamHub](https://deepstreamhub.com/) to synchronize realtime data, send events and make remote procedure calls between clients (you can try opening it in multiple browser windows).\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/ff0sp9hw/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2017-06-11T22:12:06.000Z","updated":"2017-06-11T19:28:10.000Z","path":"portland/examples/deepstream.html","comments":1,"layout":"page","_id":"cj3wg8kn30009q0pwwmuwqi63","content":"<blockquote>\n<p>This example uses <a href=\"https://deepstreamhub.com/\" target=\"_blank\" rel=\"external\">deepstreamHub</a> to synchronize realtime data, send events and make remote procedure calls between clients (you can try opening it in multiple browser windows).</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/ff0sp9hw/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>This example uses <a href=\"https://deepstreamhub.com/\">deepstreamHub</a> to synchronize realtime data, send events and make remote procedure calls between clients (you can try opening it in multiple browser windows).</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/ff0sp9hw/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Framework Overview","type":"guide","order":3,"_content":"\nThis section is intended to give a brief overview of some of the most commonly used core features of Cement.  Please do not be discouraged if you don't \"get it\" right away.  Please also do not think, \"is this it?\".  This is not intended to be an exhaustive end-all-be-all coverage of every feature of the framework.\n\nSome assumptions are being made here.  Primarily, we assume that you've used and are familiar with Python.  The overview is intended to give a high level look at using Cement.  Please dive deeper into the individual sections after the overview in order to gain a better understanding of each component.\n\n\n## The Application Object\n\nThe core of your application starts with the Cement `App` object, which we will refer to throughout this documentation in several ways:\n\n- `App` - The uninstantiated Cement `App` base class\n- `MyApp` - The uninstatiated/sub-classed Cement application you are creating\n- `app` - The instantiated application object\n\n\nTechnically, Cement `App` can be used direcly (as in the example), however in practice you will almost always sub-class `App` in order to configure it for your needs (I.e. `MyApp`).\n\n\nUsing Cement App Directly:\n\n```python\nfrom cement import App\n\nwith App('myapp') as app:\n    app.run()\n```\n\nSub-classing Cement App:\n\n```python\nfrom cement import App\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n\nwith MyApp() as app:\n    app.run()\n```\n\nCLI Usage:\n\n```bash\n$ python myapp.py --help\nusage: myapp [-h] [--debug] [--quiet]\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --debug     toggle debug output\n  --quiet     suppress all output\n```\n\n\n## MetaMixin\n\nCement uses `MetaMixin` classes everywhere, which allows the framework to define default functionality but also provides an easy mechanism for developers to override and customize.  \n\nThis is implemented by declaring a `Meta` class, under your application and/or other Cement Handler classes.  \n\nEx: Defining Meta Classes\n\n```python\nfrom cement import App\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        extensions = ['json']\n```\n\n\nAll Meta-options can also be overridden by any `**kwargs` that are passed to the parent class that is being instantiated. \n\nEx: Passing meta options via `**kwargs`:\n\n```python\nApp('myapp', config_defaults={'foo': 'bar'})\n```\n\nNearly every Cement class has an associated `Meta` class, which we often refer to as `App.Meta`, `SomeHandlerClass.Meta`, etc.  The instantiated object is refered to in code as `app._meta`, `some_handler._meta`, etc.\n\nEx: Sub-classing Cement App / Overriding Metadata Options:\n\n```python\nfrom cement import App, init_defaults\n\n# define default application configuration settings\ndefaults = init_defaults('myapp')\ndefaults['myapp']['foo'] = 'bar'\n\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        config_defaults = defaults\n\n\nwith MyApp() as app:\n    app.run()\n    print(\"Foo => %s\" % app.config.get('myapp', 'foo'))\n```\n\nCLI Usage\n\n```\n$ python myapp.py\nFoo => bar\n```\n\n\n## Interfaces and Handlers\n\n\nAll aspects of the framework are broken up into interfaces, and handlers. Interfaces define some functionality, and Handlers implement that functionality. Cement defines the following interfaces:\n\n- `extension` - Framework extensions loading\n- `log` - Logging to console/file\n- `config` - Application Configuration defaults, overrides by file, etc\n- `mail` - Mail sending (smtp, etc)\n- `plugin` - Application plugin loading\n- `output` - Output rendering (JSON, Yaml, Mustache Templates, etc)\n- `argument` - Command line argument parsing\n- `controller` - Command dispatch (sub-commands, sub-command arguments, etc)\n- `cache` - Key/Value data store (memcached, redis, etc)\n\nFor example, the builtin configuration handler `ConfigParserConfigHandler`, implements the `config` interface.  Handlers are referred to by the interfaces they implement, such as `config.configparser`, `config.json`, `config.yaml`, etc.\n\n<p class=\"tip\">Application developers can also define their own interfaces, allowing customization by plugins.</p>\n\n\nEx: Overriding Default Framework Handlers\n\n```python\nfrom cement import App\nfrom cement.ext.ext_configparser import ConfigParserConfigHandler\n\n\nclass MyConfigHandler(ConfigParserConfigHandler):\n    class Meta:\n        label = 'my_config_handler'\n\n    # do something to subclass/re-implement \n    # config handler here...\n\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        config_handler = 'my_config_handler'\n        handlers = [\n            MyConfigHandler\n        ]\n```\n\n\n**Overriding Via Configuration Files**\n\n`MyApp` defines and/or defaults to builtin handlers for all of the above listed core handlers.  Whatever the application code defines is the default,  however you can also override via the configuration file(s) as in the example to the right.  \n\nFor example, imagine that your default `mail_handler` is `smtp` for sending email via your local SMTP server.  This is a configuration that might very on a per-user/environment basis.  Via the application configuration, you could override this with an alternative mail handler like `mail_handler=some_other_mail_handler`\n\n\nEx: Overriding Via Configuration File\n\n```\n[myapp]\n\n### override App.Meta.mail_handler \nmail_handler = my_mail_handler\n\n```\n\n\n## Configuration\n\nCement supports loading multiple configuration files out-of-the-box. Configurations loaded from files are merged in, overriding the applications default settings (`App.Meta.config_defaults`).  The default configuration handler is `ConfigParserConfigHandler`, based on [ConfigParser](https://docs.python.org/3/library/configparser.html) in the standard library, and is instantiated as `app.config`.\n\nCement looks for configuration files in the most common places such as:\n\n- `/etc/myapp/myapp.conf`\n- `~/.myapp.conf`\n- `~/.myapp/config`\n- etc \n\nThe list of configuration file paths can be customized via the meta option `App.Meta.config_files` as well as their extension (i.e. `.conf`) can also be easily modified with `App.Meta.config_extension`.\n\nThe builtin configuration handler `ConfigParserConfigHandler` uses common unix-like config files where `blocks` or `sections` are defined with brackets; `[myapp]`, `[plugin.myplugin]`, `[interface.handler]`, etc.\n\nAdditional support for the following file formats is provided via optional extensions:\n\n- Json\n- Yaml\n\n<p class=\"tip\">Config handler's provide dropin replacements for the default `ConfigParserConfigHandler`, and are often based on it.  For example, the `JsonConfigHandler` and `YamlConfigHandler` hanlers do nothing more than support reading alternative file formats.  Accessing the config settings in the app is exactly the same.</p>\n\nAll extensions and application plugins can support customization loaded from the application configuration file under the section `[interface.handler]`. For example, the `ColorLogHandler` extension reads it's configuration from `[log.colorlog]`.\n\nEx: Application Configuration Settings\n\n```python\nfrom cement import App, init_defaults\n\ndefaults = init_defaults('myapp')\ndefaults['myapp']['foo'] = 'bar'\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        config_defaults = defaults\n\nwith MyApp() as app:\n    app.run()\n    print(\"Foo => %s\" % app.config.get('myapp', 'foo'))\n```\n\nConfiguration (`~/.myapp.conf`):\n\n```\n[myapp]\nfoo = not-bar\n```\n\nCLI Usage:\n\n```\n$ python myapp.py\nFoo => not-bar\n```\n\n**Alternative Configuration Handler Example**\n\nThe follow is an example of overriding the default config handler with an alternative, drop-in replacement `YamlConfighandler`:\n\nEx: Alternative Configuration Handler (Yaml):\n\n```python\nfrom cement import App\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        extensions = ['yaml']\n        config_handler = 'yaml'\n        config_extension = '.yml'\n```\n\nConfiguration (`~/.myapp.yml`):\n\n```yaml\nmyapp:\n    foo: not-bar\n```\n\n\n## Arguments\n\nArgument parsing is based on the standard [Argparse](https://docs.python.org/3/library/argparse.html) library, with the same usage that you're familiar with.  The argument handler `ArgparseArgumentHandler` is instantiated as `app.args`, arguments are defined with `app.args.add_argument()`, and parsed arguments are stored as `app.args.parsed_args` (or more conveniently `app.pargs` for easy reference).\n\n\nEx: Simple Arguments Defined With Cement App\n\n```python\n\nfrom cement import App\n\nwith App('myapp') as app:\n    app.args.add_argument('-f', '--foo', \n                          help='notorous foo option', \n                          dest='foo')\n    app.run()\n\n    # do something with parsed arguments\n    if app.pargs.foo is not None:\n        print(\"Foo Argument => %s\" % app.pargs.foo)\n\n```\n\nCLI Usage:\n\n```\n$ python myapp.py --help\nusage: myapp [-h] [--debug] [--quiet] [-f FOO]\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --debug            toggle debug output\n  --quiet            suppress all output\n  -f FOO, --foo FOO  notorous foo option\n\n$ python myapp.py -f bar\nFoo Argument => bar\n```\n\n\n\n**Arguments Defined by Controllers**\n\nThe power of the framework comes into play when we start talking about application controllers that streamline the process of mapping arguments and sub-commands to actions/functions as in the example (more on that later).\n\nEx: Arguments Defined by Controllers\n\n```python\n\nfrom cement import App, Controller, ex\n\n\nclass Base(Controller):\n    class Meta:\n        label = 'base'\n\n        arguments = [\n            # list of tuples in the format `( [], {} )`\n            ( [ '-f', '--foo' ],\n              { 'help' : 'notorious foo option',\n                'dest' : 'foo' } ),\n        ]\n\n    @ex(hide=True)\n    def _default(self):\n        print('Inside BaseController._default()')\n\n        # do something with parsed arguments\n        if self.app.pargs.foo is not None:\n            print(\"Foo Argument => %s\" % self.app.pargs.foo)\n\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        handlers = [Base]\n\n\nwith MyApp() as app:\n    app.run()\n\n```\n\nCLI Usage:\n\n```\n$ python myapp.py --help\nusage: myapp [-h] [--debug] [--quiet] [-f FOO]\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --debug            toggle debug output\n  --quiet            suppress all output\n  -f FOO, --foo FOO  notorous foo option\n\n$ python myapp.py -f bar\nFoo Argument => bar\n```\n\n\n## Logging\n\nLogging is based on the standard [Logging](https://docs.python.org/3/library/logging.html) library, with the same usage you're familiar with.  The logging facility is customizable via the `[log.logging]` section of an applications configuration:\n\n\n- `level` - The level at which to start logging (`INFO`, `WARNING`, `ERROR`,\n  `FATAL`, `DEBUG`, etc).\n- `file` (*path*) - File path to log to.\n- `to_console` (*bool*) - Whether or not to log to console.\n- `rotate` (*bool*) - Whether or not to rotate the log file when it hits \n  `max_bytes`\n- `max_bytes` (*int*) - Maximum file size in bytes before file gets rotated\n- `max_files` (*int*) - Maximum number of log files to keep after rotating\n\n\nCement also includes the following optional extensions that provide drop-in replacements for the default log handler:\n\n- `ColorlogHandler` - Provides colorized log output via the [Colorlog](https://github.com/borntyping/python-colorlog) library.\n\n\nEx: Logging Example\n\n```python\n\nfrom cement import App\n\nwith App('myapp') as app:\n    app.run()\n\n    # log messages to console and file\n    app.log.info('this is an info message')\n    app.log.warning('this is an warning message')\n    app.log.error('this is an error message')\n    app.log.fatal('this is an fatal message')\n    app.log.debug('this is an debug message')\n    \n\n```\n\nEx: Logging Configuration Example\n\n```\n[myapp]\nlog_handler = logging\n\n[log.logging]\nto_console = true\nfile = /path/to/myapp.log\nlevel = warning\n```\n\nCLI Usage:\n\n```\n$ python myapp.py\nINFO: this is an info message\nWARNING: this is an warning message\nERROR: this is an error message\nCRITICAL: this is an fatal message\n```\n\n## Output\n\nBy default, Cement does not define any output handlers.  Just like any other app, you are free to `print()` to console all you like or use the builtin  logging facility.  That said, more complex applications will benefit greatly by separating the output from the logic.  Think of output handling as the `view` in a traditional [MVC Framework](https://en.wikipedia.org/wiki/Model-view-controller).\n\nCement ships with several types of extensions that produce output in different forms, including the following:\n\n- Text Rendered From Template Files\n- Programatic Structures (JSON, Yaml, etc)\n- Tabulated (like MySQL, etc)\n- Etc\n\nThe following output handlers ship with Cement:\n\n- `Json` - Produces JSON output from dicts\n- `Yaml` - Produces Yaml output from dicts\n- `Mustache` - Produces text output rendered from [Mustache](http://mustache.github.io/) templates\n- `Handlebars` - Produces text output rendered from [Handlebars](https://github.com/wbond/pybars3) templates\n- `Jinja2` - Produces text output rendered from [Jinja2](http://jinja.pocoo.org/) templates\n- `Tabulated` - Produces tabulated text output rendered via the [Tabulate](https://pypi.python.org/pypi/tabulate) library.\n\n\nEx: Standard Output via Print Statements\n\n```python\nfrom cement import App\n\nwith App('myapp') as app:\n    print('About Run MyApp!')\n    app.run()\n```\n\n\n**Multiple Output Handler Support**\n\nOne of the unique features of Cement is that you can build your application to support multiple output handlers and formats.  Output handlers have a special attribute that allows them to be exposed via the CLI option `-o` (configurable via `App.Meta.core_handler_override_options`).  Therefore, you might have default text based output rendered from Mustache templates, but optionally output programatic structures *from the same dict* when necessary (i.e.`$ myapp -o json`).\n\n\nEx: Mixed Template/JSON Output Example\n\n```python\nfrom cement import App\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n\n        ### add optional extensions\n        extensions = ['json', 'mustache']\n\n        ### set the default output handler\n        output_handler = 'mustache'\n\n        ### external template directory\n        template_dir = '/path/to/templates'\n\n        ### internal template module (shipped with app code)\n        template_module = 'myapp.templates'\n\n\nwith MyApp() as app:\n    app.run()\n\n    ### create some data\n    data = {\n        'foo' : 'bar',\n    }\n\n    ### render data using mustache template (by default)\n    app.render(data, 'example.m')\n\n```\n\n\nEx: Mustache Template: /path/to/templates/example.m\n\n```\nThe value of foo={{foo}}.\n```\n\n\nCLI Usage:\n\n```\n$ python myapp.py --help\nusage: myapp [-h] [--debug] [--quiet] [-o {json}]\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --debug     toggle debug output\n  --quiet     suppress all output\n  -o {json}   output handler\n\n\n$ python myapp.py\nThe value of foo=bar\n\n\n$ python myapp.py -o json\n{\"foo\": \"bar\"}\n```\n\n\n[comment]: <> (--------------------------------------------------------------)\n\n## Controllers\n\nControllers provide a common means of organizing application logic into relevant chunks of code, as well as the ability for plugins and extensions to extend an applications capabilities. It is the `Controller` piece of the traditional  [MVC Framework](https://en.wikipedia.org/wiki/Model-view-controller).\n\nThe first controller is called `base`, and if registered will take over runtime control when `app.run()` is called.  What this means is, instead of Cement calling `app.args.parse_arguments()` directly, the application dispatch is handed over to the `base` controller, that is then responsible for parsing and handling arguments.  This is what we call `Runtime Dispatch`.\n\nThe most notable action of `Runtime Dispatch` is mapping arguments and sub-commands to their respective controllers and functions.  For example, the default action when running `$ myapp` without any arguments or sub-commands is to execute the `BaseController._default()` function.\n\nEx: Application Base Controller\n\n```python\nfrom cement import App, Controller, ex\n\n\nclass Base(Controller):\n    class Meta:\n        label = 'base'\n\n        arguments = [\n            # list of tuples in the format `( [], {} )`\n            ( [ '-a' ],\n              { 'help' : 'example a option',\n                'dest' : 'a' } ),\n        ]\n\n    def _default(self):\n        print('Inside Base._default()')\n        if self.app.pargs.a:\n            print('Received Option: -a')\n\n    @ex(\n        help='sub-command under base controller',\n        arguments=[\n            ( [ '-b' ],\n              { 'help' : 'cmd1 b option' } ),\n        ]\n    )\n    def cmd1(self):\n        print('Inside Base.cmd1()')\n        if self.app.pargs.b:\n            print('Recieved Option: -b')\n\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        handlers = [\n            Base,\n        ]\n\n\nwith MyApp() as app:\n    app.run()\n```\n\nCLI Usage:\n\n```bash\n### help output shows base namespace arguments and sub-commands\n\n$ python myapp.py --help\nusage: myapp [-h] [--debug] [--quiet] [-a A] {cmd1} ...\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --debug     toggle debug output\n  --quiet     suppress all output\n  -a A        example a option\n\nsub-commands:\n  {cmd1}\n    cmd1      sub-command under base controller\n\n\n$ python myapp.py -a foo\nInside Base._default()\nReceived Option: -a\n\n\n### sub-commands support their own arguments\n\n$ python myapp.py cmd1 --help\nusage: myapp cmd1 [-h] [-b B]\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -b B        cmd1 b option\n\n\n$ python myapp.py cmd1 -b foo\nInside Base.cmd1()\nRecieved Option: -b\n```\n\n**Nested / Embedded Controllers**\n\nCement supports two types of controller `stacking`:\n\n- `nested` - The arguments and commands are nested under a sub-parser whose label is that of the controller.  For example, a nested controller with a label of `my-nested-controller` would be called as `$ myapp my-nested-controller sub-command`.\n- `embedded` - The arguments and commands are embedded within it's parent controller, therefore appearing as if they were defined by the parent itself.  A sub-command under an embedded controller would be called as `$ myapp sub-command`.\n\n\nControllers can be stacked on other controllers as many levels deep as necessary.  An `embedded` controller can be stacked on top of a `nested` controller, and vice versa.  There is little, if any, limitation.\n\n\n**Controller Arguments vs Command Arguments**\n\nBoth Controllers and their sub-commands can have arguments defined.  Think of controllers as the primary namespace.  It's arguments should be globally relevant within that namespace.  A sub-command within the namespace can have it's own arguments, but are only relevant to that sub-command.\n\nI.e. `$ myapp -a my-controller -b my-sub-command -c`\n\nIn the above example, `-a` is relevant to the global scope of the entire application because it is defined on the `base` controller.  Option `-b` is relevant to the scope of `my-controller` and all sub-commands under it. Finally, `-c` is only relevant to the `my-sub-command` and has no use elsewhere.\n\n\n**Exposing Sub-Commands**\n\nBy default, no commands are exposed to the CLI except that a `_default()` function will be called if no sub-command is passed (configurable by `Controller.Meta.default_func`).\n\nTo expose a function as a sub-command, you must decorate it with `@ex()`. It's usage is simple, and supports the following parameters:\n\n- `hide` (*bool*) - Whether or not to display in `--help` output.\n- `arguments` (*list*) - Argument list of tuples in the format `( [], {} )`, that are passed to `Argparse.add_argument(*args, **kwargs)`.\n- `**kwargs` - Additional keyword arguments are passed directly to Argparse when creating the sub-parser for this command.\n\n\n<p class='tip'>Why `ex`?  Well, `ex` is short for `expose`, and just so happens that `@ex(` is exactly `4` characters, making it lineup perfectly with indented parameters.  It makes things more readable, more-better.</p>\n\n\n\n## Framework Extensions\n\nCement's Interfaces and Handlers system makes extending the framework easy, and limitless.  Cement ships dozens of extensions that either alter existing funtionality, or add to it.  For example, the default logging facility provides basic logging capabilities, however with a single line of code an application can instead use the `colorlog` extension to enable colorized console logging.  \n\nThe example provides a quick look at using the `alarm` extension to handle application timeouts of long running operations\n\nEx: Using Framework Extensions:\n\n```python\nfrom time import sleep\nfrom cement import App\n\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        extensions = [\n            'alarm',\n        ]\n\n\nwith MyApp() as app:\n    app.run()\n\n    ### set an alarm based on the max allowed run time\n    app.alarm.set(3, \"The operation timed out after 3 seconds!\")\n\n    ### do something that takes time to operate\n    sleep(5)\n\n    ### stop the alarm if it ran within the time frame\n    app.alarm.stop()\n```\n\nCLI Usage:\n\n```bash\n$ python myapp.py\nERROR: The operation timed out after 3 seconds!\nTraceback (most recent call last):\n  File \"myapp.py\", line 20, in <module>\n    sleep(5)\n  File \"cement/core/foundation.py\", line 123, in cement_signal_handler\n    raise exc.CaughtSignal(signum, frame)\ncement.core.exc.CaughtSignal: Caught signal 14\n```\n\n\n**Included Extensions**\n\nCement includes (but is not limited to) the following extensions:\n\n- `alarm` - Provides easy access to setting an application alarm to handle timing out operations\n- `argparse` - Provides `ArgparseArgumentHandler` and `ArgparseController` handlers built on Argparse\n- `colorlog` - Provides `ColorLogHandler` that produces colorized console logging\n- `configparser` - Provides `ConfigParserConfigHandler` handler for application configuration built on on ConfigParser\n- `daemon` - Provides daemonization, pidfile management, user/group context switching, etc\n- `handlebars` - Provides `HandlebarsOutputHandler` to render text output from Handlerbars templates\n- `jinja2` - Provides `Jinja2OutputHandler` to render text output from Jinja2 templates\n- `json` - Provides `JsonConfigHandler` and `JsonOutputHandler` to read JSON configuration files, and produce JSON structured output.\n- `logging` - Provides `LoggingLogHandler` for standard application logging\n- `memcached` - Providers `MemcachedCacheHandler` for caching built on Memcached\n- `mustache` - Provides `MustacheOutputHandler` to render text output from Mustache templates\n- `plugin` - Provides `CementPluginHandler` for application plugin support\n- `redis` - Provides `RedisCacheHandler` for caching built on Redis\n- `smtp` - Provides `SMTPMailHandler` for email messaging\n- `tabulate` - Provides `TabulateOutputHandler` for text output tabularized like MySQL, etc\n- `watchdog` - Provides cross-platform directory/file monitoring in order to handle filesystem events as they occur.\n- `yaml` - Providers `YamlConfigHandler` and `YamlOutputHandler` to read Yaml configuration files, and produce Yaml structured output.\n\n\n## Application Plugins\n\nCement provides an interface that automatically handles the management, configuration, and loading of Application Plugins.  A Plugin is essentially the same as a Framework Extension, but is application specific where extensions are agnostic (can be used by any application).  \n\nA plugin can be anything, and provide any kind of functionality from defining runtime hooks, to extending an applications capabilities by adding nested/embedded controllers.  the only thing that a plugin must provide is a `load()` function that is called when the plugin is imported.\n\nEx: Basic Application\n\n```python\nfrom cement import App, Controller, ex\n\n\nclass Base(Controller):\n    class Meta:\n        label = 'base'\n\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        handlers = [\n            Base,\n        ]\n\n\nwith MyApp() as app:\n    app.run()\n```\n\nCLI Usage (without plugin enabled):\n\n```\n$ python test.py --help\nusage: myapp [-h] [--debug] [--quiet] {} ...\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --debug     toggle debug output\n  --quiet     suppress all output\n\nsub-commands:\n  {}\n```\n\nEx: Plugin\n\n```python\nfrom cement import Controller, ex\n\n\nclass MyPlugin(Controller):\n    class Meta:\n        label = 'myplugin'\n        stacked_on = 'base'\n        stacked_type = 'embedded'\n\n    @ex()\n    def cmd1(self):\n        print('Inside MyPlugin.cmd1()')\n\n\ndef load(app):\n    app.handler.register(MyPlugin)\n\n```\n\nConfiguration (`~/.myapp.conf`):\n\n```\n[myapp]\nplugin_dir = /path/to/myapp/plugins\n\n[plugin.myplugin]\nenabled = true\n```\n\nCLI Usage:\n\n```\n$ python myapp.py --help\nusage: myapp [-h] [--debug] [--quiet] {cmd1} ...\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --debug     toggle debug output\n  --quiet     suppress all output\n\nsub-commands:\n  {cmd1}\n\n\n$ python myapp.py cmd1\nInside MyPlugin.cmd1()\n```\n\n\n\n## Hooks\n\nHooks provide developers the ability to tie into the framework, and applications without direct access to the runtime.  For example, a plugin might need to execute some code after arguments have been parsed, but before controller sub-commands are dispatched.  As a plugin developer, you don't have direct access to the applications runtime code but you can still tie into it with the builtin `post_argument_parsing` hook.\n\nCement defines several hooks that tie in to specific points throughout the application life cycle, however application developers can also define their own hooks allowing others to tie elsewhere, when needed.\n\nEx: Executing Code Via Hooks\n\n```python\nfrom cement import App\n\n\ndef my_example_hook(app):\n    print('Inside my_example_hook()')\n\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        hooks = [\n            ('post_argument_parsing', my_example_hook),\n        ]\n\n\nwith MyApp() as app:\n    app.run()\n```\n\nCLI Usage:\n\n```bash\n$ python myapp.py\nInside my_example_hook()\n```\n\n","source":"portland/dev/overview.md","raw":"---\ntitle: Framework Overview\ntype: guide\norder: 3\n---\n\nThis section is intended to give a brief overview of some of the most commonly used core features of Cement.  Please do not be discouraged if you don't \"get it\" right away.  Please also do not think, \"is this it?\".  This is not intended to be an exhaustive end-all-be-all coverage of every feature of the framework.\n\nSome assumptions are being made here.  Primarily, we assume that you've used and are familiar with Python.  The overview is intended to give a high level look at using Cement.  Please dive deeper into the individual sections after the overview in order to gain a better understanding of each component.\n\n\n## The Application Object\n\nThe core of your application starts with the Cement `App` object, which we will refer to throughout this documentation in several ways:\n\n- `App` - The uninstantiated Cement `App` base class\n- `MyApp` - The uninstatiated/sub-classed Cement application you are creating\n- `app` - The instantiated application object\n\n\nTechnically, Cement `App` can be used direcly (as in the example), however in practice you will almost always sub-class `App` in order to configure it for your needs (I.e. `MyApp`).\n\n\nUsing Cement App Directly:\n\n```python\nfrom cement import App\n\nwith App('myapp') as app:\n    app.run()\n```\n\nSub-classing Cement App:\n\n```python\nfrom cement import App\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n\nwith MyApp() as app:\n    app.run()\n```\n\nCLI Usage:\n\n```bash\n$ python myapp.py --help\nusage: myapp [-h] [--debug] [--quiet]\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --debug     toggle debug output\n  --quiet     suppress all output\n```\n\n\n## MetaMixin\n\nCement uses `MetaMixin` classes everywhere, which allows the framework to define default functionality but also provides an easy mechanism for developers to override and customize.  \n\nThis is implemented by declaring a `Meta` class, under your application and/or other Cement Handler classes.  \n\nEx: Defining Meta Classes\n\n```python\nfrom cement import App\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        extensions = ['json']\n```\n\n\nAll Meta-options can also be overridden by any `**kwargs` that are passed to the parent class that is being instantiated. \n\nEx: Passing meta options via `**kwargs`:\n\n```python\nApp('myapp', config_defaults={'foo': 'bar'})\n```\n\nNearly every Cement class has an associated `Meta` class, which we often refer to as `App.Meta`, `SomeHandlerClass.Meta`, etc.  The instantiated object is refered to in code as `app._meta`, `some_handler._meta`, etc.\n\nEx: Sub-classing Cement App / Overriding Metadata Options:\n\n```python\nfrom cement import App, init_defaults\n\n# define default application configuration settings\ndefaults = init_defaults('myapp')\ndefaults['myapp']['foo'] = 'bar'\n\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        config_defaults = defaults\n\n\nwith MyApp() as app:\n    app.run()\n    print(\"Foo => %s\" % app.config.get('myapp', 'foo'))\n```\n\nCLI Usage\n\n```\n$ python myapp.py\nFoo => bar\n```\n\n\n## Interfaces and Handlers\n\n\nAll aspects of the framework are broken up into interfaces, and handlers. Interfaces define some functionality, and Handlers implement that functionality. Cement defines the following interfaces:\n\n- `extension` - Framework extensions loading\n- `log` - Logging to console/file\n- `config` - Application Configuration defaults, overrides by file, etc\n- `mail` - Mail sending (smtp, etc)\n- `plugin` - Application plugin loading\n- `output` - Output rendering (JSON, Yaml, Mustache Templates, etc)\n- `argument` - Command line argument parsing\n- `controller` - Command dispatch (sub-commands, sub-command arguments, etc)\n- `cache` - Key/Value data store (memcached, redis, etc)\n\nFor example, the builtin configuration handler `ConfigParserConfigHandler`, implements the `config` interface.  Handlers are referred to by the interfaces they implement, such as `config.configparser`, `config.json`, `config.yaml`, etc.\n\n<p class=\"tip\">Application developers can also define their own interfaces, allowing customization by plugins.</p>\n\n\nEx: Overriding Default Framework Handlers\n\n```python\nfrom cement import App\nfrom cement.ext.ext_configparser import ConfigParserConfigHandler\n\n\nclass MyConfigHandler(ConfigParserConfigHandler):\n    class Meta:\n        label = 'my_config_handler'\n\n    # do something to subclass/re-implement \n    # config handler here...\n\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        config_handler = 'my_config_handler'\n        handlers = [\n            MyConfigHandler\n        ]\n```\n\n\n**Overriding Via Configuration Files**\n\n`MyApp` defines and/or defaults to builtin handlers for all of the above listed core handlers.  Whatever the application code defines is the default,  however you can also override via the configuration file(s) as in the example to the right.  \n\nFor example, imagine that your default `mail_handler` is `smtp` for sending email via your local SMTP server.  This is a configuration that might very on a per-user/environment basis.  Via the application configuration, you could override this with an alternative mail handler like `mail_handler=some_other_mail_handler`\n\n\nEx: Overriding Via Configuration File\n\n```\n[myapp]\n\n### override App.Meta.mail_handler \nmail_handler = my_mail_handler\n\n```\n\n\n## Configuration\n\nCement supports loading multiple configuration files out-of-the-box. Configurations loaded from files are merged in, overriding the applications default settings (`App.Meta.config_defaults`).  The default configuration handler is `ConfigParserConfigHandler`, based on [ConfigParser](https://docs.python.org/3/library/configparser.html) in the standard library, and is instantiated as `app.config`.\n\nCement looks for configuration files in the most common places such as:\n\n- `/etc/myapp/myapp.conf`\n- `~/.myapp.conf`\n- `~/.myapp/config`\n- etc \n\nThe list of configuration file paths can be customized via the meta option `App.Meta.config_files` as well as their extension (i.e. `.conf`) can also be easily modified with `App.Meta.config_extension`.\n\nThe builtin configuration handler `ConfigParserConfigHandler` uses common unix-like config files where `blocks` or `sections` are defined with brackets; `[myapp]`, `[plugin.myplugin]`, `[interface.handler]`, etc.\n\nAdditional support for the following file formats is provided via optional extensions:\n\n- Json\n- Yaml\n\n<p class=\"tip\">Config handler's provide dropin replacements for the default `ConfigParserConfigHandler`, and are often based on it.  For example, the `JsonConfigHandler` and `YamlConfigHandler` hanlers do nothing more than support reading alternative file formats.  Accessing the config settings in the app is exactly the same.</p>\n\nAll extensions and application plugins can support customization loaded from the application configuration file under the section `[interface.handler]`. For example, the `ColorLogHandler` extension reads it's configuration from `[log.colorlog]`.\n\nEx: Application Configuration Settings\n\n```python\nfrom cement import App, init_defaults\n\ndefaults = init_defaults('myapp')\ndefaults['myapp']['foo'] = 'bar'\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        config_defaults = defaults\n\nwith MyApp() as app:\n    app.run()\n    print(\"Foo => %s\" % app.config.get('myapp', 'foo'))\n```\n\nConfiguration (`~/.myapp.conf`):\n\n```\n[myapp]\nfoo = not-bar\n```\n\nCLI Usage:\n\n```\n$ python myapp.py\nFoo => not-bar\n```\n\n**Alternative Configuration Handler Example**\n\nThe follow is an example of overriding the default config handler with an alternative, drop-in replacement `YamlConfighandler`:\n\nEx: Alternative Configuration Handler (Yaml):\n\n```python\nfrom cement import App\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        extensions = ['yaml']\n        config_handler = 'yaml'\n        config_extension = '.yml'\n```\n\nConfiguration (`~/.myapp.yml`):\n\n```yaml\nmyapp:\n    foo: not-bar\n```\n\n\n## Arguments\n\nArgument parsing is based on the standard [Argparse](https://docs.python.org/3/library/argparse.html) library, with the same usage that you're familiar with.  The argument handler `ArgparseArgumentHandler` is instantiated as `app.args`, arguments are defined with `app.args.add_argument()`, and parsed arguments are stored as `app.args.parsed_args` (or more conveniently `app.pargs` for easy reference).\n\n\nEx: Simple Arguments Defined With Cement App\n\n```python\n\nfrom cement import App\n\nwith App('myapp') as app:\n    app.args.add_argument('-f', '--foo', \n                          help='notorous foo option', \n                          dest='foo')\n    app.run()\n\n    # do something with parsed arguments\n    if app.pargs.foo is not None:\n        print(\"Foo Argument => %s\" % app.pargs.foo)\n\n```\n\nCLI Usage:\n\n```\n$ python myapp.py --help\nusage: myapp [-h] [--debug] [--quiet] [-f FOO]\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --debug            toggle debug output\n  --quiet            suppress all output\n  -f FOO, --foo FOO  notorous foo option\n\n$ python myapp.py -f bar\nFoo Argument => bar\n```\n\n\n\n**Arguments Defined by Controllers**\n\nThe power of the framework comes into play when we start talking about application controllers that streamline the process of mapping arguments and sub-commands to actions/functions as in the example (more on that later).\n\nEx: Arguments Defined by Controllers\n\n```python\n\nfrom cement import App, Controller, ex\n\n\nclass Base(Controller):\n    class Meta:\n        label = 'base'\n\n        arguments = [\n            # list of tuples in the format `( [], {} )`\n            ( [ '-f', '--foo' ],\n              { 'help' : 'notorious foo option',\n                'dest' : 'foo' } ),\n        ]\n\n    @ex(hide=True)\n    def _default(self):\n        print('Inside BaseController._default()')\n\n        # do something with parsed arguments\n        if self.app.pargs.foo is not None:\n            print(\"Foo Argument => %s\" % self.app.pargs.foo)\n\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        handlers = [Base]\n\n\nwith MyApp() as app:\n    app.run()\n\n```\n\nCLI Usage:\n\n```\n$ python myapp.py --help\nusage: myapp [-h] [--debug] [--quiet] [-f FOO]\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --debug            toggle debug output\n  --quiet            suppress all output\n  -f FOO, --foo FOO  notorous foo option\n\n$ python myapp.py -f bar\nFoo Argument => bar\n```\n\n\n## Logging\n\nLogging is based on the standard [Logging](https://docs.python.org/3/library/logging.html) library, with the same usage you're familiar with.  The logging facility is customizable via the `[log.logging]` section of an applications configuration:\n\n\n- `level` - The level at which to start logging (`INFO`, `WARNING`, `ERROR`,\n  `FATAL`, `DEBUG`, etc).\n- `file` (*path*) - File path to log to.\n- `to_console` (*bool*) - Whether or not to log to console.\n- `rotate` (*bool*) - Whether or not to rotate the log file when it hits \n  `max_bytes`\n- `max_bytes` (*int*) - Maximum file size in bytes before file gets rotated\n- `max_files` (*int*) - Maximum number of log files to keep after rotating\n\n\nCement also includes the following optional extensions that provide drop-in replacements for the default log handler:\n\n- `ColorlogHandler` - Provides colorized log output via the [Colorlog](https://github.com/borntyping/python-colorlog) library.\n\n\nEx: Logging Example\n\n```python\n\nfrom cement import App\n\nwith App('myapp') as app:\n    app.run()\n\n    # log messages to console and file\n    app.log.info('this is an info message')\n    app.log.warning('this is an warning message')\n    app.log.error('this is an error message')\n    app.log.fatal('this is an fatal message')\n    app.log.debug('this is an debug message')\n    \n\n```\n\nEx: Logging Configuration Example\n\n```\n[myapp]\nlog_handler = logging\n\n[log.logging]\nto_console = true\nfile = /path/to/myapp.log\nlevel = warning\n```\n\nCLI Usage:\n\n```\n$ python myapp.py\nINFO: this is an info message\nWARNING: this is an warning message\nERROR: this is an error message\nCRITICAL: this is an fatal message\n```\n\n## Output\n\nBy default, Cement does not define any output handlers.  Just like any other app, you are free to `print()` to console all you like or use the builtin  logging facility.  That said, more complex applications will benefit greatly by separating the output from the logic.  Think of output handling as the `view` in a traditional [MVC Framework](https://en.wikipedia.org/wiki/Model-view-controller).\n\nCement ships with several types of extensions that produce output in different forms, including the following:\n\n- Text Rendered From Template Files\n- Programatic Structures (JSON, Yaml, etc)\n- Tabulated (like MySQL, etc)\n- Etc\n\nThe following output handlers ship with Cement:\n\n- `Json` - Produces JSON output from dicts\n- `Yaml` - Produces Yaml output from dicts\n- `Mustache` - Produces text output rendered from [Mustache](http://mustache.github.io/) templates\n- `Handlebars` - Produces text output rendered from [Handlebars](https://github.com/wbond/pybars3) templates\n- `Jinja2` - Produces text output rendered from [Jinja2](http://jinja.pocoo.org/) templates\n- `Tabulated` - Produces tabulated text output rendered via the [Tabulate](https://pypi.python.org/pypi/tabulate) library.\n\n\nEx: Standard Output via Print Statements\n\n```python\nfrom cement import App\n\nwith App('myapp') as app:\n    print('About Run MyApp!')\n    app.run()\n```\n\n\n**Multiple Output Handler Support**\n\nOne of the unique features of Cement is that you can build your application to support multiple output handlers and formats.  Output handlers have a special attribute that allows them to be exposed via the CLI option `-o` (configurable via `App.Meta.core_handler_override_options`).  Therefore, you might have default text based output rendered from Mustache templates, but optionally output programatic structures *from the same dict* when necessary (i.e.`$ myapp -o json`).\n\n\nEx: Mixed Template/JSON Output Example\n\n```python\nfrom cement import App\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n\n        ### add optional extensions\n        extensions = ['json', 'mustache']\n\n        ### set the default output handler\n        output_handler = 'mustache'\n\n        ### external template directory\n        template_dir = '/path/to/templates'\n\n        ### internal template module (shipped with app code)\n        template_module = 'myapp.templates'\n\n\nwith MyApp() as app:\n    app.run()\n\n    ### create some data\n    data = {\n        'foo' : 'bar',\n    }\n\n    ### render data using mustache template (by default)\n    app.render(data, 'example.m')\n\n```\n\n\nEx: Mustache Template: /path/to/templates/example.m\n\n```\nThe value of foo={{foo}}.\n```\n\n\nCLI Usage:\n\n```\n$ python myapp.py --help\nusage: myapp [-h] [--debug] [--quiet] [-o {json}]\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --debug     toggle debug output\n  --quiet     suppress all output\n  -o {json}   output handler\n\n\n$ python myapp.py\nThe value of foo=bar\n\n\n$ python myapp.py -o json\n{\"foo\": \"bar\"}\n```\n\n\n[comment]: <> (--------------------------------------------------------------)\n\n## Controllers\n\nControllers provide a common means of organizing application logic into relevant chunks of code, as well as the ability for plugins and extensions to extend an applications capabilities. It is the `Controller` piece of the traditional  [MVC Framework](https://en.wikipedia.org/wiki/Model-view-controller).\n\nThe first controller is called `base`, and if registered will take over runtime control when `app.run()` is called.  What this means is, instead of Cement calling `app.args.parse_arguments()` directly, the application dispatch is handed over to the `base` controller, that is then responsible for parsing and handling arguments.  This is what we call `Runtime Dispatch`.\n\nThe most notable action of `Runtime Dispatch` is mapping arguments and sub-commands to their respective controllers and functions.  For example, the default action when running `$ myapp` without any arguments or sub-commands is to execute the `BaseController._default()` function.\n\nEx: Application Base Controller\n\n```python\nfrom cement import App, Controller, ex\n\n\nclass Base(Controller):\n    class Meta:\n        label = 'base'\n\n        arguments = [\n            # list of tuples in the format `( [], {} )`\n            ( [ '-a' ],\n              { 'help' : 'example a option',\n                'dest' : 'a' } ),\n        ]\n\n    def _default(self):\n        print('Inside Base._default()')\n        if self.app.pargs.a:\n            print('Received Option: -a')\n\n    @ex(\n        help='sub-command under base controller',\n        arguments=[\n            ( [ '-b' ],\n              { 'help' : 'cmd1 b option' } ),\n        ]\n    )\n    def cmd1(self):\n        print('Inside Base.cmd1()')\n        if self.app.pargs.b:\n            print('Recieved Option: -b')\n\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        handlers = [\n            Base,\n        ]\n\n\nwith MyApp() as app:\n    app.run()\n```\n\nCLI Usage:\n\n```bash\n### help output shows base namespace arguments and sub-commands\n\n$ python myapp.py --help\nusage: myapp [-h] [--debug] [--quiet] [-a A] {cmd1} ...\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --debug     toggle debug output\n  --quiet     suppress all output\n  -a A        example a option\n\nsub-commands:\n  {cmd1}\n    cmd1      sub-command under base controller\n\n\n$ python myapp.py -a foo\nInside Base._default()\nReceived Option: -a\n\n\n### sub-commands support their own arguments\n\n$ python myapp.py cmd1 --help\nusage: myapp cmd1 [-h] [-b B]\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -b B        cmd1 b option\n\n\n$ python myapp.py cmd1 -b foo\nInside Base.cmd1()\nRecieved Option: -b\n```\n\n**Nested / Embedded Controllers**\n\nCement supports two types of controller `stacking`:\n\n- `nested` - The arguments and commands are nested under a sub-parser whose label is that of the controller.  For example, a nested controller with a label of `my-nested-controller` would be called as `$ myapp my-nested-controller sub-command`.\n- `embedded` - The arguments and commands are embedded within it's parent controller, therefore appearing as if they were defined by the parent itself.  A sub-command under an embedded controller would be called as `$ myapp sub-command`.\n\n\nControllers can be stacked on other controllers as many levels deep as necessary.  An `embedded` controller can be stacked on top of a `nested` controller, and vice versa.  There is little, if any, limitation.\n\n\n**Controller Arguments vs Command Arguments**\n\nBoth Controllers and their sub-commands can have arguments defined.  Think of controllers as the primary namespace.  It's arguments should be globally relevant within that namespace.  A sub-command within the namespace can have it's own arguments, but are only relevant to that sub-command.\n\nI.e. `$ myapp -a my-controller -b my-sub-command -c`\n\nIn the above example, `-a` is relevant to the global scope of the entire application because it is defined on the `base` controller.  Option `-b` is relevant to the scope of `my-controller` and all sub-commands under it. Finally, `-c` is only relevant to the `my-sub-command` and has no use elsewhere.\n\n\n**Exposing Sub-Commands**\n\nBy default, no commands are exposed to the CLI except that a `_default()` function will be called if no sub-command is passed (configurable by `Controller.Meta.default_func`).\n\nTo expose a function as a sub-command, you must decorate it with `@ex()`. It's usage is simple, and supports the following parameters:\n\n- `hide` (*bool*) - Whether or not to display in `--help` output.\n- `arguments` (*list*) - Argument list of tuples in the format `( [], {} )`, that are passed to `Argparse.add_argument(*args, **kwargs)`.\n- `**kwargs` - Additional keyword arguments are passed directly to Argparse when creating the sub-parser for this command.\n\n\n<p class='tip'>Why `ex`?  Well, `ex` is short for `expose`, and just so happens that `@ex(` is exactly `4` characters, making it lineup perfectly with indented parameters.  It makes things more readable, more-better.</p>\n\n\n\n## Framework Extensions\n\nCement's Interfaces and Handlers system makes extending the framework easy, and limitless.  Cement ships dozens of extensions that either alter existing funtionality, or add to it.  For example, the default logging facility provides basic logging capabilities, however with a single line of code an application can instead use the `colorlog` extension to enable colorized console logging.  \n\nThe example provides a quick look at using the `alarm` extension to handle application timeouts of long running operations\n\nEx: Using Framework Extensions:\n\n```python\nfrom time import sleep\nfrom cement import App\n\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        extensions = [\n            'alarm',\n        ]\n\n\nwith MyApp() as app:\n    app.run()\n\n    ### set an alarm based on the max allowed run time\n    app.alarm.set(3, \"The operation timed out after 3 seconds!\")\n\n    ### do something that takes time to operate\n    sleep(5)\n\n    ### stop the alarm if it ran within the time frame\n    app.alarm.stop()\n```\n\nCLI Usage:\n\n```bash\n$ python myapp.py\nERROR: The operation timed out after 3 seconds!\nTraceback (most recent call last):\n  File \"myapp.py\", line 20, in <module>\n    sleep(5)\n  File \"cement/core/foundation.py\", line 123, in cement_signal_handler\n    raise exc.CaughtSignal(signum, frame)\ncement.core.exc.CaughtSignal: Caught signal 14\n```\n\n\n**Included Extensions**\n\nCement includes (but is not limited to) the following extensions:\n\n- `alarm` - Provides easy access to setting an application alarm to handle timing out operations\n- `argparse` - Provides `ArgparseArgumentHandler` and `ArgparseController` handlers built on Argparse\n- `colorlog` - Provides `ColorLogHandler` that produces colorized console logging\n- `configparser` - Provides `ConfigParserConfigHandler` handler for application configuration built on on ConfigParser\n- `daemon` - Provides daemonization, pidfile management, user/group context switching, etc\n- `handlebars` - Provides `HandlebarsOutputHandler` to render text output from Handlerbars templates\n- `jinja2` - Provides `Jinja2OutputHandler` to render text output from Jinja2 templates\n- `json` - Provides `JsonConfigHandler` and `JsonOutputHandler` to read JSON configuration files, and produce JSON structured output.\n- `logging` - Provides `LoggingLogHandler` for standard application logging\n- `memcached` - Providers `MemcachedCacheHandler` for caching built on Memcached\n- `mustache` - Provides `MustacheOutputHandler` to render text output from Mustache templates\n- `plugin` - Provides `CementPluginHandler` for application plugin support\n- `redis` - Provides `RedisCacheHandler` for caching built on Redis\n- `smtp` - Provides `SMTPMailHandler` for email messaging\n- `tabulate` - Provides `TabulateOutputHandler` for text output tabularized like MySQL, etc\n- `watchdog` - Provides cross-platform directory/file monitoring in order to handle filesystem events as they occur.\n- `yaml` - Providers `YamlConfigHandler` and `YamlOutputHandler` to read Yaml configuration files, and produce Yaml structured output.\n\n\n## Application Plugins\n\nCement provides an interface that automatically handles the management, configuration, and loading of Application Plugins.  A Plugin is essentially the same as a Framework Extension, but is application specific where extensions are agnostic (can be used by any application).  \n\nA plugin can be anything, and provide any kind of functionality from defining runtime hooks, to extending an applications capabilities by adding nested/embedded controllers.  the only thing that a plugin must provide is a `load()` function that is called when the plugin is imported.\n\nEx: Basic Application\n\n```python\nfrom cement import App, Controller, ex\n\n\nclass Base(Controller):\n    class Meta:\n        label = 'base'\n\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        handlers = [\n            Base,\n        ]\n\n\nwith MyApp() as app:\n    app.run()\n```\n\nCLI Usage (without plugin enabled):\n\n```\n$ python test.py --help\nusage: myapp [-h] [--debug] [--quiet] {} ...\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --debug     toggle debug output\n  --quiet     suppress all output\n\nsub-commands:\n  {}\n```\n\nEx: Plugin\n\n```python\nfrom cement import Controller, ex\n\n\nclass MyPlugin(Controller):\n    class Meta:\n        label = 'myplugin'\n        stacked_on = 'base'\n        stacked_type = 'embedded'\n\n    @ex()\n    def cmd1(self):\n        print('Inside MyPlugin.cmd1()')\n\n\ndef load(app):\n    app.handler.register(MyPlugin)\n\n```\n\nConfiguration (`~/.myapp.conf`):\n\n```\n[myapp]\nplugin_dir = /path/to/myapp/plugins\n\n[plugin.myplugin]\nenabled = true\n```\n\nCLI Usage:\n\n```\n$ python myapp.py --help\nusage: myapp [-h] [--debug] [--quiet] {cmd1} ...\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --debug     toggle debug output\n  --quiet     suppress all output\n\nsub-commands:\n  {cmd1}\n\n\n$ python myapp.py cmd1\nInside MyPlugin.cmd1()\n```\n\n\n\n## Hooks\n\nHooks provide developers the ability to tie into the framework, and applications without direct access to the runtime.  For example, a plugin might need to execute some code after arguments have been parsed, but before controller sub-commands are dispatched.  As a plugin developer, you don't have direct access to the applications runtime code but you can still tie into it with the builtin `post_argument_parsing` hook.\n\nCement defines several hooks that tie in to specific points throughout the application life cycle, however application developers can also define their own hooks allowing others to tie elsewhere, when needed.\n\nEx: Executing Code Via Hooks\n\n```python\nfrom cement import App\n\n\ndef my_example_hook(app):\n    print('Inside my_example_hook()')\n\n\nclass MyApp(App):\n    class Meta:\n        label = 'myapp'\n        hooks = [\n            ('post_argument_parsing', my_example_hook),\n        ]\n\n\nwith MyApp() as app:\n    app.run()\n```\n\nCLI Usage:\n\n```bash\n$ python myapp.py\nInside my_example_hook()\n```\n\n","date":"2017-06-12T05:42:03.000Z","updated":"2017-06-12T05:42:03.000Z","path":"portland/dev/overview.html","comments":1,"layout":"page","_id":"cj3wg8kn4000aq0pwpm9yselt","content":"<p>This section is intended to give a brief overview of some of the most commonly used core features of Cement.  Please do not be discouraged if you don’t “get it” right away.  Please also do not think, “is this it?”.  This is not intended to be an exhaustive end-all-be-all coverage of every feature of the framework.</p>\n<p>Some assumptions are being made here.  Primarily, we assume that you’ve used and are familiar with Python.  The overview is intended to give a high level look at using Cement.  Please dive deeper into the individual sections after the overview in order to gain a better understanding of each component.</p>\n<h2 id=\"The-Application-Object\"><a href=\"#The-Application-Object\" class=\"headerlink\" title=\"The Application Object\"></a>The Application Object</h2><p>The core of your application starts with the Cement <code>App</code> object, which we will refer to throughout this documentation in several ways:</p>\n<ul>\n<li><code>App</code> - The uninstantiated Cement <code>App</code> base class</li>\n<li><code>MyApp</code> - The uninstatiated/sub-classed Cement application you are creating</li>\n<li><code>app</code> - The instantiated application object</li>\n</ul>\n<p>Technically, Cement <code>App</code> can be used direcly (as in the example), however in practice you will almost always sub-class <code>App</code> in order to configure it for your needs (I.e. <code>MyApp</code>).</p>\n<p>Using Cement App Directly:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> App(<span class=\"string\">'myapp'</span>) <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p>Sub-classing Cement App:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py --<span class=\"built_in\">help</span></div><div class=\"line\">usage: myapp [-h] [--debug] [--quiet]</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --<span class=\"built_in\">help</span>  show this <span class=\"built_in\">help</span> message and <span class=\"built_in\">exit</span></div><div class=\"line\">  --debug     toggle debug output</div><div class=\"line\">  --quiet     suppress all output</div></pre></td></tr></table></figure>\n<h2 id=\"MetaMixin\"><a href=\"#MetaMixin\" class=\"headerlink\" title=\"MetaMixin\"></a>MetaMixin</h2><p>Cement uses <code>MetaMixin</code> classes everywhere, which allows the framework to define default functionality but also provides an easy mechanism for developers to override and customize.  </p>\n<p>This is implemented by declaring a <code>Meta</code> class, under your application and/or other Cement Handler classes.  </p>\n<p>Ex: Defining Meta Classes</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        extensions = [<span class=\"string\">'json'</span>]</div></pre></td></tr></table></figure>\n<p>All Meta-options can also be overridden by any <code>**kwargs</code> that are passed to the parent class that is being instantiated. </p>\n<p>Ex: Passing meta options via <code>**kwargs</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\">App(<span class=\"string\">'myapp'</span>, config_defaults=&#123;<span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>&#125;)</div></pre></td></tr></table></figure>\n<p>Nearly every Cement class has an associated <code>Meta</code> class, which we often refer to as <code>App.Meta</code>, <code>SomeHandlerClass.Meta</code>, etc.  The instantiated object is refered to in code as <code>app._meta</code>, <code>some_handler._meta</code>, etc.</p>\n<p>Ex: Sub-classing Cement App / Overriding Metadata Options:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App, init_defaults</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># define default application configuration settings</span></div><div class=\"line\">defaults = init_defaults(<span class=\"string\">'myapp'</span>)</div><div class=\"line\">defaults[<span class=\"string\">'myapp'</span>][<span class=\"string\">'foo'</span>] = <span class=\"string\">'bar'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        config_defaults = defaults</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div><div class=\"line\">    print(<span class=\"string\">\"Foo =&gt; %s\"</span> % app.config.get(<span class=\"string\">'myapp'</span>, <span class=\"string\">'foo'</span>))</div></pre></td></tr></table></figure>\n<p>CLI Usage</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py</div><div class=\"line\">Foo =&gt; bar</div></pre></td></tr></table></figure>\n<h2 id=\"Interfaces-and-Handlers\"><a href=\"#Interfaces-and-Handlers\" class=\"headerlink\" title=\"Interfaces and Handlers\"></a>Interfaces and Handlers</h2><p>All aspects of the framework are broken up into interfaces, and handlers. Interfaces define some functionality, and Handlers implement that functionality. Cement defines the following interfaces:</p>\n<ul>\n<li><code>extension</code> - Framework extensions loading</li>\n<li><code>log</code> - Logging to console/file</li>\n<li><code>config</code> - Application Configuration defaults, overrides by file, etc</li>\n<li><code>mail</code> - Mail sending (smtp, etc)</li>\n<li><code>plugin</code> - Application plugin loading</li>\n<li><code>output</code> - Output rendering (JSON, Yaml, Mustache Templates, etc)</li>\n<li><code>argument</code> - Command line argument parsing</li>\n<li><code>controller</code> - Command dispatch (sub-commands, sub-command arguments, etc)</li>\n<li><code>cache</code> - Key/Value data store (memcached, redis, etc)</li>\n</ul>\n<p>For example, the builtin configuration handler <code>ConfigParserConfigHandler</code>, implements the <code>config</code> interface.  Handlers are referred to by the interfaces they implement, such as <code>config.configparser</code>, <code>config.json</code>, <code>config.yaml</code>, etc.</p>\n<p class=\"tip\">Application developers can also define their own interfaces, allowing customization by plugins.</p>\n\n\n<p>Ex: Overriding Default Framework Handlers</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"><span class=\"keyword\">from</span> cement.ext.ext_configparser <span class=\"keyword\">import</span> ConfigParserConfigHandler</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyConfigHandler</span><span class=\"params\">(ConfigParserConfigHandler)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'my_config_handler'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># do something to subclass/re-implement </span></div><div class=\"line\">    <span class=\"comment\"># config handler here...</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        config_handler = <span class=\"string\">'my_config_handler'</span></div><div class=\"line\">        handlers = [</div><div class=\"line\">            MyConfigHandler</div><div class=\"line\">        ]</div></pre></td></tr></table></figure>\n<p><strong>Overriding Via Configuration Files</strong></p>\n<p><code>MyApp</code> defines and/or defaults to builtin handlers for all of the above listed core handlers.  Whatever the application code defines is the default,  however you can also override via the configuration file(s) as in the example to the right.  </p>\n<p>For example, imagine that your default <code>mail_handler</code> is <code>smtp</code> for sending email via your local SMTP server.  This is a configuration that might very on a per-user/environment basis.  Via the application configuration, you could override this with an alternative mail handler like <code>mail_handler=some_other_mail_handler</code></p>\n<p>Ex: Overriding Via Configuration File</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">[myapp]</div><div class=\"line\"></div><div class=\"line\">### override App.Meta.mail_handler </div><div class=\"line\">mail_handler = my_mail_handler</div></pre></td></tr></table></figure>\n<h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h2><p>Cement supports loading multiple configuration files out-of-the-box. Configurations loaded from files are merged in, overriding the applications default settings (<code>App.Meta.config_defaults</code>).  The default configuration handler is <code>ConfigParserConfigHandler</code>, based on <a href=\"https://docs.python.org/3/library/configparser.html\" target=\"_blank\" rel=\"external\">ConfigParser</a> in the standard library, and is instantiated as <code>app.config</code>.</p>\n<p>Cement looks for configuration files in the most common places such as:</p>\n<ul>\n<li><code>/etc/myapp/myapp.conf</code></li>\n<li><code>~/.myapp.conf</code></li>\n<li><code>~/.myapp/config</code></li>\n<li>etc </li>\n</ul>\n<p>The list of configuration file paths can be customized via the meta option <code>App.Meta.config_files</code> as well as their extension (i.e. <code>.conf</code>) can also be easily modified with <code>App.Meta.config_extension</code>.</p>\n<p>The builtin configuration handler <code>ConfigParserConfigHandler</code> uses common unix-like config files where <code>blocks</code> or <code>sections</code> are defined with brackets; <code>[myapp]</code>, <code>[plugin.myplugin]</code>, <code>[interface.handler]</code>, etc.</p>\n<p>Additional support for the following file formats is provided via optional extensions:</p>\n<ul>\n<li>Json</li>\n<li>Yaml</li>\n</ul>\n<p class=\"tip\">Config handler’s provide dropin replacements for the default <code>ConfigParserConfigHandler</code>, and are often based on it.  For example, the <code>JsonConfigHandler</code> and <code>YamlConfigHandler</code> hanlers do nothing more than support reading alternative file formats.  Accessing the config settings in the app is exactly the same.</p>\n\n<p>All extensions and application plugins can support customization loaded from the application configuration file under the section <code>[interface.handler]</code>. For example, the <code>ColorLogHandler</code> extension reads it’s configuration from <code>[log.colorlog]</code>.</p>\n<p>Ex: Application Configuration Settings</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App, init_defaults</div><div class=\"line\"></div><div class=\"line\">defaults = init_defaults(<span class=\"string\">'myapp'</span>)</div><div class=\"line\">defaults[<span class=\"string\">'myapp'</span>][<span class=\"string\">'foo'</span>] = <span class=\"string\">'bar'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        config_defaults = defaults</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div><div class=\"line\">    print(<span class=\"string\">\"Foo =&gt; %s\"</span> % app.config.get(<span class=\"string\">'myapp'</span>, <span class=\"string\">'foo'</span>))</div></pre></td></tr></table></figure>\n<p>Configuration (<code>~/.myapp.conf</code>):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">[myapp]</div><div class=\"line\">foo = not-bar</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py</div><div class=\"line\">Foo =&gt; not-bar</div></pre></td></tr></table></figure>\n<p><strong>Alternative Configuration Handler Example</strong></p>\n<p>The follow is an example of overriding the default config handler with an alternative, drop-in replacement <code>YamlConfighandler</code>:</p>\n<p>Ex: Alternative Configuration Handler (Yaml):</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        extensions = [<span class=\"string\">'yaml'</span>]</div><div class=\"line\">        config_handler = <span class=\"string\">'yaml'</span></div><div class=\"line\">        config_extension = <span class=\"string\">'.yml'</span></div></pre></td></tr></table></figure>\n<p>Configuration (<code>~/.myapp.yml</code>):</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">myapp:</span></div><div class=\"line\"><span class=\"attr\">    foo:</span> <span class=\"string\">not-bar</span></div></pre></td></tr></table></figure>\n<h2 id=\"Arguments\"><a href=\"#Arguments\" class=\"headerlink\" title=\"Arguments\"></a>Arguments</h2><p>Argument parsing is based on the standard <a href=\"https://docs.python.org/3/library/argparse.html\" target=\"_blank\" rel=\"external\">Argparse</a> library, with the same usage that you’re familiar with.  The argument handler <code>ArgparseArgumentHandler</code> is instantiated as <code>app.args</code>, arguments are defined with <code>app.args.add_argument()</code>, and parsed arguments are stored as <code>app.args.parsed_args</code> (or more conveniently <code>app.pargs</code> for easy reference).</p>\n<p>Ex: Simple Arguments Defined With Cement App</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> App(<span class=\"string\">'myapp'</span>) <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.args.add_argument(<span class=\"string\">'-f'</span>, <span class=\"string\">'--foo'</span>, </div><div class=\"line\">                          help=<span class=\"string\">'notorous foo option'</span>, </div><div class=\"line\">                          dest=<span class=\"string\">'foo'</span>)</div><div class=\"line\">    app.run()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># do something with parsed arguments</span></div><div class=\"line\">    <span class=\"keyword\">if</span> app.pargs.foo <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        print(<span class=\"string\">\"Foo Argument =&gt; %s\"</span> % app.pargs.foo)</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py --help</div><div class=\"line\">usage: myapp [-h] [--debug] [--quiet] [-f FOO]</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --help         show this help message and exit</div><div class=\"line\">  --debug            toggle debug output</div><div class=\"line\">  --quiet            suppress all output</div><div class=\"line\">  -f FOO, --foo FOO  notorous foo option</div><div class=\"line\"></div><div class=\"line\">$ python myapp.py -f bar</div><div class=\"line\">Foo Argument =&gt; bar</div></pre></td></tr></table></figure>\n<p><strong>Arguments Defined by Controllers</strong></p>\n<p>The power of the framework comes into play when we start talking about application controllers that streamline the process of mapping arguments and sub-commands to actions/functions as in the example (more on that later).</p>\n<p>Ex: Arguments Defined by Controllers</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App, Controller, ex</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span><span class=\"params\">(Controller)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'base'</span></div><div class=\"line\"></div><div class=\"line\">        arguments = [</div><div class=\"line\">            <span class=\"comment\"># list of tuples in the format `( [], &#123;&#125; )`</span></div><div class=\"line\">            ( [ <span class=\"string\">'-f'</span>, <span class=\"string\">'--foo'</span> ],</div><div class=\"line\">              &#123; <span class=\"string\">'help'</span> : <span class=\"string\">'notorious foo option'</span>,</div><div class=\"line\">                <span class=\"string\">'dest'</span> : <span class=\"string\">'foo'</span> &#125; ),</div><div class=\"line\">        ]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @ex(hide=True)</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_default</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Inside BaseController._default()'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># do something with parsed arguments</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.app.pargs.foo <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            print(<span class=\"string\">\"Foo Argument =&gt; %s\"</span> % self.app.pargs.foo)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        handlers = [Base]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py --help</div><div class=\"line\">usage: myapp [-h] [--debug] [--quiet] [-f FOO]</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --help         show this help message and exit</div><div class=\"line\">  --debug            toggle debug output</div><div class=\"line\">  --quiet            suppress all output</div><div class=\"line\">  -f FOO, --foo FOO  notorous foo option</div><div class=\"line\"></div><div class=\"line\">$ python myapp.py -f bar</div><div class=\"line\">Foo Argument =&gt; bar</div></pre></td></tr></table></figure>\n<h2 id=\"Logging\"><a href=\"#Logging\" class=\"headerlink\" title=\"Logging\"></a>Logging</h2><p>Logging is based on the standard <a href=\"https://docs.python.org/3/library/logging.html\" target=\"_blank\" rel=\"external\">Logging</a> library, with the same usage you’re familiar with.  The logging facility is customizable via the <code>[log.logging]</code> section of an applications configuration:</p>\n<ul>\n<li><code>level</code> - The level at which to start logging (<code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>,<br><code>FATAL</code>, <code>DEBUG</code>, etc).</li>\n<li><code>file</code> (<em>path</em>) - File path to log to.</li>\n<li><code>to_console</code> (<em>bool</em>) - Whether or not to log to console.</li>\n<li><code>rotate</code> (<em>bool</em>) - Whether or not to rotate the log file when it hits<br><code>max_bytes</code></li>\n<li><code>max_bytes</code> (<em>int</em>) - Maximum file size in bytes before file gets rotated</li>\n<li><code>max_files</code> (<em>int</em>) - Maximum number of log files to keep after rotating</li>\n</ul>\n<p>Cement also includes the following optional extensions that provide drop-in replacements for the default log handler:</p>\n<ul>\n<li><code>ColorlogHandler</code> - Provides colorized log output via the <a href=\"https://github.com/borntyping/python-colorlog\" target=\"_blank\" rel=\"external\">Colorlog</a> library.</li>\n</ul>\n<p>Ex: Logging Example</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> App(<span class=\"string\">'myapp'</span>) <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># log messages to console and file</span></div><div class=\"line\">    app.log.info(<span class=\"string\">'this is an info message'</span>)</div><div class=\"line\">    app.log.warning(<span class=\"string\">'this is an warning message'</span>)</div><div class=\"line\">    app.log.error(<span class=\"string\">'this is an error message'</span>)</div><div class=\"line\">    app.log.fatal(<span class=\"string\">'this is an fatal message'</span>)</div><div class=\"line\">    app.log.debug(<span class=\"string\">'this is an debug message'</span>)</div></pre></td></tr></table></figure>\n<p>Ex: Logging Configuration Example</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">[myapp]</div><div class=\"line\">log_handler = logging</div><div class=\"line\"></div><div class=\"line\">[log.logging]</div><div class=\"line\">to_console = true</div><div class=\"line\">file = /path/to/myapp.log</div><div class=\"line\">level = warning</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py</div><div class=\"line\">INFO: this is an info message</div><div class=\"line\">WARNING: this is an warning message</div><div class=\"line\">ERROR: this is an error message</div><div class=\"line\">CRITICAL: this is an fatal message</div></pre></td></tr></table></figure>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>By default, Cement does not define any output handlers.  Just like any other app, you are free to <code>print()</code> to console all you like or use the builtin  logging facility.  That said, more complex applications will benefit greatly by separating the output from the logic.  Think of output handling as the <code>view</code> in a traditional <a href=\"https://en.wikipedia.org/wiki/Model-view-controller\" target=\"_blank\" rel=\"external\">MVC Framework</a>.</p>\n<p>Cement ships with several types of extensions that produce output in different forms, including the following:</p>\n<ul>\n<li>Text Rendered From Template Files</li>\n<li>Programatic Structures (JSON, Yaml, etc)</li>\n<li>Tabulated (like MySQL, etc)</li>\n<li>Etc</li>\n</ul>\n<p>The following output handlers ship with Cement:</p>\n<ul>\n<li><code>Json</code> - Produces JSON output from dicts</li>\n<li><code>Yaml</code> - Produces Yaml output from dicts</li>\n<li><code>Mustache</code> - Produces text output rendered from <a href=\"http://mustache.github.io/\" target=\"_blank\" rel=\"external\">Mustache</a> templates</li>\n<li><code>Handlebars</code> - Produces text output rendered from <a href=\"https://github.com/wbond/pybars3\" target=\"_blank\" rel=\"external\">Handlebars</a> templates</li>\n<li><code>Jinja2</code> - Produces text output rendered from <a href=\"http://jinja.pocoo.org/\" target=\"_blank\" rel=\"external\">Jinja2</a> templates</li>\n<li><code>Tabulated</code> - Produces tabulated text output rendered via the <a href=\"https://pypi.python.org/pypi/tabulate\" target=\"_blank\" rel=\"external\">Tabulate</a> library.</li>\n</ul>\n<p>Ex: Standard Output via Print Statements</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> App(<span class=\"string\">'myapp'</span>) <span class=\"keyword\">as</span> app:</div><div class=\"line\">    print(<span class=\"string\">'About Run MyApp!'</span>)</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p><strong>Multiple Output Handler Support</strong></p>\n<p>One of the unique features of Cement is that you can build your application to support multiple output handlers and formats.  Output handlers have a special attribute that allows them to be exposed via the CLI option <code>-o</code> (configurable via <code>App.Meta.core_handler_override_options</code>).  Therefore, you might have default text based output rendered from Mustache templates, but optionally output programatic structures <em>from the same dict</em> when necessary (i.e.<code>$ myapp -o json</code>).</p>\n<p>Ex: Mixed Template/JSON Output Example</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">### add optional extensions</span></div><div class=\"line\">        extensions = [<span class=\"string\">'json'</span>, <span class=\"string\">'mustache'</span>]</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">### set the default output handler</span></div><div class=\"line\">        output_handler = <span class=\"string\">'mustache'</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">### external template directory</span></div><div class=\"line\">        template_dir = <span class=\"string\">'/path/to/templates'</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">### internal template module (shipped with app code)</span></div><div class=\"line\">        template_module = <span class=\"string\">'myapp.templates'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">### create some data</span></div><div class=\"line\">    data = &#123;</div><div class=\"line\">        <span class=\"string\">'foo'</span> : <span class=\"string\">'bar'</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">### render data using mustache template (by default)</span></div><div class=\"line\">    app.render(data, <span class=\"string\">'example.m'</span>)</div></pre></td></tr></table></figure>\n<p>Ex: Mustache Template: /path/to/templates/example.m</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">The value of foo=&#123;&#123;foo&#125;&#125;.</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py --help</div><div class=\"line\">usage: myapp [-h] [--debug] [--quiet] [-o &#123;json&#125;]</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --help  show this help message and exit</div><div class=\"line\">  --debug     toggle debug output</div><div class=\"line\">  --quiet     suppress all output</div><div class=\"line\">  -o &#123;json&#125;   output handler</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$ python myapp.py</div><div class=\"line\">The value of foo=bar</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$ python myapp.py -o json</div><div class=\"line\">&#123;&quot;foo&quot;: &quot;bar&quot;&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Controllers\"><a href=\"#Controllers\" class=\"headerlink\" title=\"Controllers\"></a>Controllers</h2><p>Controllers provide a common means of organizing application logic into relevant chunks of code, as well as the ability for plugins and extensions to extend an applications capabilities. It is the <code>Controller</code> piece of the traditional  <a href=\"https://en.wikipedia.org/wiki/Model-view-controller\" target=\"_blank\" rel=\"external\">MVC Framework</a>.</p>\n<p>The first controller is called <code>base</code>, and if registered will take over runtime control when <code>app.run()</code> is called.  What this means is, instead of Cement calling <code>app.args.parse_arguments()</code> directly, the application dispatch is handed over to the <code>base</code> controller, that is then responsible for parsing and handling arguments.  This is what we call <code>Runtime Dispatch</code>.</p>\n<p>The most notable action of <code>Runtime Dispatch</code> is mapping arguments and sub-commands to their respective controllers and functions.  For example, the default action when running <code>$ myapp</code> without any arguments or sub-commands is to execute the <code>BaseController._default()</code> function.</p>\n<p>Ex: Application Base Controller</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App, Controller, ex</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span><span class=\"params\">(Controller)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'base'</span></div><div class=\"line\"></div><div class=\"line\">        arguments = [</div><div class=\"line\">            <span class=\"comment\"># list of tuples in the format `( [], &#123;&#125; )`</span></div><div class=\"line\">            ( [ <span class=\"string\">'-a'</span> ],</div><div class=\"line\">              &#123; <span class=\"string\">'help'</span> : <span class=\"string\">'example a option'</span>,</div><div class=\"line\">                <span class=\"string\">'dest'</span> : <span class=\"string\">'a'</span> &#125; ),</div><div class=\"line\">        ]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_default</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Inside Base._default()'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> self.app.pargs.a:</div><div class=\"line\">            print(<span class=\"string\">'Received Option: -a'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @ex(</span></div><div class=\"line\">        help=<span class=\"string\">'sub-command under base controller'</span>,</div><div class=\"line\">        arguments=[</div><div class=\"line\">            ( [ <span class=\"string\">'-b'</span> ],</div><div class=\"line\">              &#123; <span class=\"string\">'help'</span> : <span class=\"string\">'cmd1 b option'</span> &#125; ),</div><div class=\"line\">        ]</div><div class=\"line\">    )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cmd1</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Inside Base.cmd1()'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> self.app.pargs.b:</div><div class=\"line\">            print(<span class=\"string\">'Recieved Option: -b'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        handlers = [</div><div class=\"line\">            Base,</div><div class=\"line\">        ]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">### help output shows base namespace arguments and sub-commands</span></div><div class=\"line\"></div><div class=\"line\">$ python myapp.py --<span class=\"built_in\">help</span></div><div class=\"line\">usage: myapp [-h] [--debug] [--quiet] [-a A] &#123;cmd1&#125; ...</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --<span class=\"built_in\">help</span>  show this <span class=\"built_in\">help</span> message and <span class=\"built_in\">exit</span></div><div class=\"line\">  --debug     toggle debug output</div><div class=\"line\">  --quiet     suppress all output</div><div class=\"line\">  -a A        example a option</div><div class=\"line\"></div><div class=\"line\">sub-commands:</div><div class=\"line\">  &#123;cmd1&#125;</div><div class=\"line\">    cmd1      sub-command under base controller</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$ python myapp.py -a foo</div><div class=\"line\">Inside Base._default()</div><div class=\"line\">Received Option: -a</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">### sub-commands support their own arguments</span></div><div class=\"line\"></div><div class=\"line\">$ python myapp.py cmd1 --<span class=\"built_in\">help</span></div><div class=\"line\">usage: myapp cmd1 [-h] [-b B]</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --<span class=\"built_in\">help</span>  show this <span class=\"built_in\">help</span> message and <span class=\"built_in\">exit</span></div><div class=\"line\">  -b B        cmd1 b option</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$ python myapp.py cmd1 -b foo</div><div class=\"line\">Inside Base.cmd1()</div><div class=\"line\">Recieved Option: -b</div></pre></td></tr></table></figure>\n<p><strong>Nested / Embedded Controllers</strong></p>\n<p>Cement supports two types of controller <code>stacking</code>:</p>\n<ul>\n<li><code>nested</code> - The arguments and commands are nested under a sub-parser whose label is that of the controller.  For example, a nested controller with a label of <code>my-nested-controller</code> would be called as <code>$ myapp my-nested-controller sub-command</code>.</li>\n<li><code>embedded</code> - The arguments and commands are embedded within it’s parent controller, therefore appearing as if they were defined by the parent itself.  A sub-command under an embedded controller would be called as <code>$ myapp sub-command</code>.</li>\n</ul>\n<p>Controllers can be stacked on other controllers as many levels deep as necessary.  An <code>embedded</code> controller can be stacked on top of a <code>nested</code> controller, and vice versa.  There is little, if any, limitation.</p>\n<p><strong>Controller Arguments vs Command Arguments</strong></p>\n<p>Both Controllers and their sub-commands can have arguments defined.  Think of controllers as the primary namespace.  It’s arguments should be globally relevant within that namespace.  A sub-command within the namespace can have it’s own arguments, but are only relevant to that sub-command.</p>\n<p>I.e. <code>$ myapp -a my-controller -b my-sub-command -c</code></p>\n<p>In the above example, <code>-a</code> is relevant to the global scope of the entire application because it is defined on the <code>base</code> controller.  Option <code>-b</code> is relevant to the scope of <code>my-controller</code> and all sub-commands under it. Finally, <code>-c</code> is only relevant to the <code>my-sub-command</code> and has no use elsewhere.</p>\n<p><strong>Exposing Sub-Commands</strong></p>\n<p>By default, no commands are exposed to the CLI except that a <code>_default()</code> function will be called if no sub-command is passed (configurable by <code>Controller.Meta.default_func</code>).</p>\n<p>To expose a function as a sub-command, you must decorate it with <code>@ex()</code>. It’s usage is simple, and supports the following parameters:</p>\n<ul>\n<li><code>hide</code> (<em>bool</em>) - Whether or not to display in <code>--help</code> output.</li>\n<li><code>arguments</code> (<em>list</em>) - Argument list of tuples in the format <code>( [], {} )</code>, that are passed to <code>Argparse.add_argument(*args, **kwargs)</code>.</li>\n<li><code>**kwargs</code> - Additional keyword arguments are passed directly to Argparse when creating the sub-parser for this command.</li>\n</ul>\n<p class=\"tip\">Why <code>ex</code>?  Well, <code>ex</code> is short for <code>expose</code>, and just so happens that <code>@ex(</code> is exactly <code>4</code> characters, making it lineup perfectly with indented parameters.  It makes things more readable, more-better.</p>\n\n\n\n<h2 id=\"Framework-Extensions\"><a href=\"#Framework-Extensions\" class=\"headerlink\" title=\"Framework Extensions\"></a>Framework Extensions</h2><p>Cement’s Interfaces and Handlers system makes extending the framework easy, and limitless.  Cement ships dozens of extensions that either alter existing funtionality, or add to it.  For example, the default logging facility provides basic logging capabilities, however with a single line of code an application can instead use the <code>colorlog</code> extension to enable colorized console logging.  </p>\n<p>The example provides a quick look at using the <code>alarm</code> extension to handle application timeouts of long running operations</p>\n<p>Ex: Using Framework Extensions:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</div><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        extensions = [</div><div class=\"line\">            <span class=\"string\">'alarm'</span>,</div><div class=\"line\">        ]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">### set an alarm based on the max allowed run time</span></div><div class=\"line\">    app.alarm.set(<span class=\"number\">3</span>, <span class=\"string\">\"The operation timed out after 3 seconds!\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">### do something that takes time to operate</span></div><div class=\"line\">    sleep(<span class=\"number\">5</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">### stop the alarm if it ran within the time frame</span></div><div class=\"line\">    app.alarm.stop()</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py</div><div class=\"line\">ERROR: The operation timed out after 3 seconds!</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"myapp.py\"</span>, line 20, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    sleep(5)</div><div class=\"line\">  File <span class=\"string\">\"cement/core/foundation.py\"</span>, line 123, <span class=\"keyword\">in</span> cement_signal_handler</div><div class=\"line\">    raise exc.CaughtSignal(signum, frame)</div><div class=\"line\">cement.core.exc.CaughtSignal: Caught signal 14</div></pre></td></tr></table></figure>\n<p><strong>Included Extensions</strong></p>\n<p>Cement includes (but is not limited to) the following extensions:</p>\n<ul>\n<li><code>alarm</code> - Provides easy access to setting an application alarm to handle timing out operations</li>\n<li><code>argparse</code> - Provides <code>ArgparseArgumentHandler</code> and <code>ArgparseController</code> handlers built on Argparse</li>\n<li><code>colorlog</code> - Provides <code>ColorLogHandler</code> that produces colorized console logging</li>\n<li><code>configparser</code> - Provides <code>ConfigParserConfigHandler</code> handler for application configuration built on on ConfigParser</li>\n<li><code>daemon</code> - Provides daemonization, pidfile management, user/group context switching, etc</li>\n<li><code>handlebars</code> - Provides <code>HandlebarsOutputHandler</code> to render text output from Handlerbars templates</li>\n<li><code>jinja2</code> - Provides <code>Jinja2OutputHandler</code> to render text output from Jinja2 templates</li>\n<li><code>json</code> - Provides <code>JsonConfigHandler</code> and <code>JsonOutputHandler</code> to read JSON configuration files, and produce JSON structured output.</li>\n<li><code>logging</code> - Provides <code>LoggingLogHandler</code> for standard application logging</li>\n<li><code>memcached</code> - Providers <code>MemcachedCacheHandler</code> for caching built on Memcached</li>\n<li><code>mustache</code> - Provides <code>MustacheOutputHandler</code> to render text output from Mustache templates</li>\n<li><code>plugin</code> - Provides <code>CementPluginHandler</code> for application plugin support</li>\n<li><code>redis</code> - Provides <code>RedisCacheHandler</code> for caching built on Redis</li>\n<li><code>smtp</code> - Provides <code>SMTPMailHandler</code> for email messaging</li>\n<li><code>tabulate</code> - Provides <code>TabulateOutputHandler</code> for text output tabularized like MySQL, etc</li>\n<li><code>watchdog</code> - Provides cross-platform directory/file monitoring in order to handle filesystem events as they occur.</li>\n<li><code>yaml</code> - Providers <code>YamlConfigHandler</code> and <code>YamlOutputHandler</code> to read Yaml configuration files, and produce Yaml structured output.</li>\n</ul>\n<h2 id=\"Application-Plugins\"><a href=\"#Application-Plugins\" class=\"headerlink\" title=\"Application Plugins\"></a>Application Plugins</h2><p>Cement provides an interface that automatically handles the management, configuration, and loading of Application Plugins.  A Plugin is essentially the same as a Framework Extension, but is application specific where extensions are agnostic (can be used by any application).  </p>\n<p>A plugin can be anything, and provide any kind of functionality from defining runtime hooks, to extending an applications capabilities by adding nested/embedded controllers.  the only thing that a plugin must provide is a <code>load()</code> function that is called when the plugin is imported.</p>\n<p>Ex: Basic Application</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App, Controller, ex</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span><span class=\"params\">(Controller)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'base'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        handlers = [</div><div class=\"line\">            Base,</div><div class=\"line\">        ]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p>CLI Usage (without plugin enabled):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python test.py --help</div><div class=\"line\">usage: myapp [-h] [--debug] [--quiet] &#123;&#125; ...</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --help  show this help message and exit</div><div class=\"line\">  --debug     toggle debug output</div><div class=\"line\">  --quiet     suppress all output</div><div class=\"line\"></div><div class=\"line\">sub-commands:</div><div class=\"line\">  &#123;&#125;</div></pre></td></tr></table></figure>\n<p>Ex: Plugin</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> Controller, ex</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPlugin</span><span class=\"params\">(Controller)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myplugin'</span></div><div class=\"line\">        stacked_on = <span class=\"string\">'base'</span></div><div class=\"line\">        stacked_type = <span class=\"string\">'embedded'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @ex()</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cmd1</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Inside MyPlugin.cmd1()'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load</span><span class=\"params\">(app)</span>:</span></div><div class=\"line\">    app.handler.register(MyPlugin)</div></pre></td></tr></table></figure>\n<p>Configuration (<code>~/.myapp.conf</code>):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">[myapp]</div><div class=\"line\">plugin_dir = /path/to/myapp/plugins</div><div class=\"line\"></div><div class=\"line\">[plugin.myplugin]</div><div class=\"line\">enabled = true</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py --help</div><div class=\"line\">usage: myapp [-h] [--debug] [--quiet] &#123;cmd1&#125; ...</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --help  show this help message and exit</div><div class=\"line\">  --debug     toggle debug output</div><div class=\"line\">  --quiet     suppress all output</div><div class=\"line\"></div><div class=\"line\">sub-commands:</div><div class=\"line\">  &#123;cmd1&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$ python myapp.py cmd1</div><div class=\"line\">Inside MyPlugin.cmd1()</div></pre></td></tr></table></figure>\n<h2 id=\"Hooks\"><a href=\"#Hooks\" class=\"headerlink\" title=\"Hooks\"></a>Hooks</h2><p>Hooks provide developers the ability to tie into the framework, and applications without direct access to the runtime.  For example, a plugin might need to execute some code after arguments have been parsed, but before controller sub-commands are dispatched.  As a plugin developer, you don’t have direct access to the applications runtime code but you can still tie into it with the builtin <code>post_argument_parsing</code> hook.</p>\n<p>Cement defines several hooks that tie in to specific points throughout the application life cycle, however application developers can also define their own hooks allowing others to tie elsewhere, when needed.</p>\n<p>Ex: Executing Code Via Hooks</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_example_hook</span><span class=\"params\">(app)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Inside my_example_hook()'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        hooks = [</div><div class=\"line\">            (<span class=\"string\">'post_argument_parsing'</span>, my_example_hook),</div><div class=\"line\">        ]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py</div><div class=\"line\">Inside my_example_hook()</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>This section is intended to give a brief overview of some of the most commonly used core features of Cement.  Please do not be discouraged if you don’t “get it” right away.  Please also do not think, “is this it?”.  This is not intended to be an exhaustive end-all-be-all coverage of every feature of the framework.</p>\n<p>Some assumptions are being made here.  Primarily, we assume that you’ve used and are familiar with Python.  The overview is intended to give a high level look at using Cement.  Please dive deeper into the individual sections after the overview in order to gain a better understanding of each component.</p>\n<h2 id=\"The-Application-Object\"><a href=\"#The-Application-Object\" class=\"headerlink\" title=\"The Application Object\"></a>The Application Object</h2><p>The core of your application starts with the Cement <code>App</code> object, which we will refer to throughout this documentation in several ways:</p>\n<ul>\n<li><code>App</code> - The uninstantiated Cement <code>App</code> base class</li>\n<li><code>MyApp</code> - The uninstatiated/sub-classed Cement application you are creating</li>\n<li><code>app</code> - The instantiated application object</li>\n</ul>\n<p>Technically, Cement <code>App</code> can be used direcly (as in the example), however in practice you will almost always sub-class <code>App</code> in order to configure it for your needs (I.e. <code>MyApp</code>).</p>\n<p>Using Cement App Directly:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> App(<span class=\"string\">'myapp'</span>) <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p>Sub-classing Cement App:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py --<span class=\"built_in\">help</span></div><div class=\"line\">usage: myapp [-h] [--debug] [--quiet]</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --<span class=\"built_in\">help</span>  show this <span class=\"built_in\">help</span> message and <span class=\"built_in\">exit</span></div><div class=\"line\">  --debug     toggle debug output</div><div class=\"line\">  --quiet     suppress all output</div></pre></td></tr></table></figure>\n<h2 id=\"MetaMixin\"><a href=\"#MetaMixin\" class=\"headerlink\" title=\"MetaMixin\"></a>MetaMixin</h2><p>Cement uses <code>MetaMixin</code> classes everywhere, which allows the framework to define default functionality but also provides an easy mechanism for developers to override and customize.  </p>\n<p>This is implemented by declaring a <code>Meta</code> class, under your application and/or other Cement Handler classes.  </p>\n<p>Ex: Defining Meta Classes</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        extensions = [<span class=\"string\">'json'</span>]</div></pre></td></tr></table></figure>\n<p>All Meta-options can also be overridden by any <code>**kwargs</code> that are passed to the parent class that is being instantiated. </p>\n<p>Ex: Passing meta options via <code>**kwargs</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\">App(<span class=\"string\">'myapp'</span>, config_defaults=&#123;<span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>&#125;)</div></pre></td></tr></table></figure>\n<p>Nearly every Cement class has an associated <code>Meta</code> class, which we often refer to as <code>App.Meta</code>, <code>SomeHandlerClass.Meta</code>, etc.  The instantiated object is refered to in code as <code>app._meta</code>, <code>some_handler._meta</code>, etc.</p>\n<p>Ex: Sub-classing Cement App / Overriding Metadata Options:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App, init_defaults</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># define default application configuration settings</span></div><div class=\"line\">defaults = init_defaults(<span class=\"string\">'myapp'</span>)</div><div class=\"line\">defaults[<span class=\"string\">'myapp'</span>][<span class=\"string\">'foo'</span>] = <span class=\"string\">'bar'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        config_defaults = defaults</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div><div class=\"line\">    print(<span class=\"string\">\"Foo =&gt; %s\"</span> % app.config.get(<span class=\"string\">'myapp'</span>, <span class=\"string\">'foo'</span>))</div></pre></td></tr></table></figure>\n<p>CLI Usage</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py</div><div class=\"line\">Foo =&gt; bar</div></pre></td></tr></table></figure>\n<h2 id=\"Interfaces-and-Handlers\"><a href=\"#Interfaces-and-Handlers\" class=\"headerlink\" title=\"Interfaces and Handlers\"></a>Interfaces and Handlers</h2><p>All aspects of the framework are broken up into interfaces, and handlers. Interfaces define some functionality, and Handlers implement that functionality. Cement defines the following interfaces:</p>\n<ul>\n<li><code>extension</code> - Framework extensions loading</li>\n<li><code>log</code> - Logging to console/file</li>\n<li><code>config</code> - Application Configuration defaults, overrides by file, etc</li>\n<li><code>mail</code> - Mail sending (smtp, etc)</li>\n<li><code>plugin</code> - Application plugin loading</li>\n<li><code>output</code> - Output rendering (JSON, Yaml, Mustache Templates, etc)</li>\n<li><code>argument</code> - Command line argument parsing</li>\n<li><code>controller</code> - Command dispatch (sub-commands, sub-command arguments, etc)</li>\n<li><code>cache</code> - Key/Value data store (memcached, redis, etc)</li>\n</ul>\n<p>For example, the builtin configuration handler <code>ConfigParserConfigHandler</code>, implements the <code>config</code> interface.  Handlers are referred to by the interfaces they implement, such as <code>config.configparser</code>, <code>config.json</code>, <code>config.yaml</code>, etc.</p>\n<p class=\"tip\">Application developers can also define their own interfaces, allowing customization by plugins.</p>\n\n\n<p>Ex: Overriding Default Framework Handlers</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"><span class=\"keyword\">from</span> cement.ext.ext_configparser <span class=\"keyword\">import</span> ConfigParserConfigHandler</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyConfigHandler</span><span class=\"params\">(ConfigParserConfigHandler)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'my_config_handler'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># do something to subclass/re-implement </span></div><div class=\"line\">    <span class=\"comment\"># config handler here...</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        config_handler = <span class=\"string\">'my_config_handler'</span></div><div class=\"line\">        handlers = [</div><div class=\"line\">            MyConfigHandler</div><div class=\"line\">        ]</div></pre></td></tr></table></figure>\n<p><strong>Overriding Via Configuration Files</strong></p>\n<p><code>MyApp</code> defines and/or defaults to builtin handlers for all of the above listed core handlers.  Whatever the application code defines is the default,  however you can also override via the configuration file(s) as in the example to the right.  </p>\n<p>For example, imagine that your default <code>mail_handler</code> is <code>smtp</code> for sending email via your local SMTP server.  This is a configuration that might very on a per-user/environment basis.  Via the application configuration, you could override this with an alternative mail handler like <code>mail_handler=some_other_mail_handler</code></p>\n<p>Ex: Overriding Via Configuration File</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">[myapp]</div><div class=\"line\"></div><div class=\"line\">### override App.Meta.mail_handler </div><div class=\"line\">mail_handler = my_mail_handler</div></pre></td></tr></table></figure>\n<h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h2><p>Cement supports loading multiple configuration files out-of-the-box. Configurations loaded from files are merged in, overriding the applications default settings (<code>App.Meta.config_defaults</code>).  The default configuration handler is <code>ConfigParserConfigHandler</code>, based on <a href=\"https://docs.python.org/3/library/configparser.html\">ConfigParser</a> in the standard library, and is instantiated as <code>app.config</code>.</p>\n<p>Cement looks for configuration files in the most common places such as:</p>\n<ul>\n<li><code>/etc/myapp/myapp.conf</code></li>\n<li><code>~/.myapp.conf</code></li>\n<li><code>~/.myapp/config</code></li>\n<li>etc </li>\n</ul>\n<p>The list of configuration file paths can be customized via the meta option <code>App.Meta.config_files</code> as well as their extension (i.e. <code>.conf</code>) can also be easily modified with <code>App.Meta.config_extension</code>.</p>\n<p>The builtin configuration handler <code>ConfigParserConfigHandler</code> uses common unix-like config files where <code>blocks</code> or <code>sections</code> are defined with brackets; <code>[myapp]</code>, <code>[plugin.myplugin]</code>, <code>[interface.handler]</code>, etc.</p>\n<p>Additional support for the following file formats is provided via optional extensions:</p>\n<ul>\n<li>Json</li>\n<li>Yaml</li>\n</ul>\n<p class=\"tip\">Config handler’s provide dropin replacements for the default <code>ConfigParserConfigHandler</code>, and are often based on it.  For example, the <code>JsonConfigHandler</code> and <code>YamlConfigHandler</code> hanlers do nothing more than support reading alternative file formats.  Accessing the config settings in the app is exactly the same.</p>\n\n<p>All extensions and application plugins can support customization loaded from the application configuration file under the section <code>[interface.handler]</code>. For example, the <code>ColorLogHandler</code> extension reads it’s configuration from <code>[log.colorlog]</code>.</p>\n<p>Ex: Application Configuration Settings</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App, init_defaults</div><div class=\"line\"></div><div class=\"line\">defaults = init_defaults(<span class=\"string\">'myapp'</span>)</div><div class=\"line\">defaults[<span class=\"string\">'myapp'</span>][<span class=\"string\">'foo'</span>] = <span class=\"string\">'bar'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        config_defaults = defaults</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div><div class=\"line\">    print(<span class=\"string\">\"Foo =&gt; %s\"</span> % app.config.get(<span class=\"string\">'myapp'</span>, <span class=\"string\">'foo'</span>))</div></pre></td></tr></table></figure>\n<p>Configuration (<code>~/.myapp.conf</code>):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">[myapp]</div><div class=\"line\">foo = not-bar</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py</div><div class=\"line\">Foo =&gt; not-bar</div></pre></td></tr></table></figure>\n<p><strong>Alternative Configuration Handler Example</strong></p>\n<p>The follow is an example of overriding the default config handler with an alternative, drop-in replacement <code>YamlConfighandler</code>:</p>\n<p>Ex: Alternative Configuration Handler (Yaml):</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        extensions = [<span class=\"string\">'yaml'</span>]</div><div class=\"line\">        config_handler = <span class=\"string\">'yaml'</span></div><div class=\"line\">        config_extension = <span class=\"string\">'.yml'</span></div></pre></td></tr></table></figure>\n<p>Configuration (<code>~/.myapp.yml</code>):</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">myapp:</span></div><div class=\"line\"><span class=\"attr\">    foo:</span> <span class=\"string\">not-bar</span></div></pre></td></tr></table></figure>\n<h2 id=\"Arguments\"><a href=\"#Arguments\" class=\"headerlink\" title=\"Arguments\"></a>Arguments</h2><p>Argument parsing is based on the standard <a href=\"https://docs.python.org/3/library/argparse.html\">Argparse</a> library, with the same usage that you’re familiar with.  The argument handler <code>ArgparseArgumentHandler</code> is instantiated as <code>app.args</code>, arguments are defined with <code>app.args.add_argument()</code>, and parsed arguments are stored as <code>app.args.parsed_args</code> (or more conveniently <code>app.pargs</code> for easy reference).</p>\n<p>Ex: Simple Arguments Defined With Cement App</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> App(<span class=\"string\">'myapp'</span>) <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.args.add_argument(<span class=\"string\">'-f'</span>, <span class=\"string\">'--foo'</span>, </div><div class=\"line\">                          help=<span class=\"string\">'notorous foo option'</span>, </div><div class=\"line\">                          dest=<span class=\"string\">'foo'</span>)</div><div class=\"line\">    app.run()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># do something with parsed arguments</span></div><div class=\"line\">    <span class=\"keyword\">if</span> app.pargs.foo <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        print(<span class=\"string\">\"Foo Argument =&gt; %s\"</span> % app.pargs.foo)</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py --help</div><div class=\"line\">usage: myapp [-h] [--debug] [--quiet] [-f FOO]</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --help         show this help message and exit</div><div class=\"line\">  --debug            toggle debug output</div><div class=\"line\">  --quiet            suppress all output</div><div class=\"line\">  -f FOO, --foo FOO  notorous foo option</div><div class=\"line\"></div><div class=\"line\">$ python myapp.py -f bar</div><div class=\"line\">Foo Argument =&gt; bar</div></pre></td></tr></table></figure>\n<p><strong>Arguments Defined by Controllers</strong></p>\n<p>The power of the framework comes into play when we start talking about application controllers that streamline the process of mapping arguments and sub-commands to actions/functions as in the example (more on that later).</p>\n<p>Ex: Arguments Defined by Controllers</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App, Controller, ex</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span><span class=\"params\">(Controller)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'base'</span></div><div class=\"line\"></div><div class=\"line\">        arguments = [</div><div class=\"line\">            <span class=\"comment\"># list of tuples in the format `( [], &#123;&#125; )`</span></div><div class=\"line\">            ( [ <span class=\"string\">'-f'</span>, <span class=\"string\">'--foo'</span> ],</div><div class=\"line\">              &#123; <span class=\"string\">'help'</span> : <span class=\"string\">'notorious foo option'</span>,</div><div class=\"line\">                <span class=\"string\">'dest'</span> : <span class=\"string\">'foo'</span> &#125; ),</div><div class=\"line\">        ]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @ex(hide=True)</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_default</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Inside BaseController._default()'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># do something with parsed arguments</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.app.pargs.foo <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            print(<span class=\"string\">\"Foo Argument =&gt; %s\"</span> % self.app.pargs.foo)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        handlers = [Base]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py --help</div><div class=\"line\">usage: myapp [-h] [--debug] [--quiet] [-f FOO]</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --help         show this help message and exit</div><div class=\"line\">  --debug            toggle debug output</div><div class=\"line\">  --quiet            suppress all output</div><div class=\"line\">  -f FOO, --foo FOO  notorous foo option</div><div class=\"line\"></div><div class=\"line\">$ python myapp.py -f bar</div><div class=\"line\">Foo Argument =&gt; bar</div></pre></td></tr></table></figure>\n<h2 id=\"Logging\"><a href=\"#Logging\" class=\"headerlink\" title=\"Logging\"></a>Logging</h2><p>Logging is based on the standard <a href=\"https://docs.python.org/3/library/logging.html\">Logging</a> library, with the same usage you’re familiar with.  The logging facility is customizable via the <code>[log.logging]</code> section of an applications configuration:</p>\n<ul>\n<li><code>level</code> - The level at which to start logging (<code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>,<br><code>FATAL</code>, <code>DEBUG</code>, etc).</li>\n<li><code>file</code> (<em>path</em>) - File path to log to.</li>\n<li><code>to_console</code> (<em>bool</em>) - Whether or not to log to console.</li>\n<li><code>rotate</code> (<em>bool</em>) - Whether or not to rotate the log file when it hits<br><code>max_bytes</code></li>\n<li><code>max_bytes</code> (<em>int</em>) - Maximum file size in bytes before file gets rotated</li>\n<li><code>max_files</code> (<em>int</em>) - Maximum number of log files to keep after rotating</li>\n</ul>\n<p>Cement also includes the following optional extensions that provide drop-in replacements for the default log handler:</p>\n<ul>\n<li><code>ColorlogHandler</code> - Provides colorized log output via the <a href=\"https://github.com/borntyping/python-colorlog\">Colorlog</a> library.</li>\n</ul>\n<p>Ex: Logging Example</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> App(<span class=\"string\">'myapp'</span>) <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># log messages to console and file</span></div><div class=\"line\">    app.log.info(<span class=\"string\">'this is an info message'</span>)</div><div class=\"line\">    app.log.warning(<span class=\"string\">'this is an warning message'</span>)</div><div class=\"line\">    app.log.error(<span class=\"string\">'this is an error message'</span>)</div><div class=\"line\">    app.log.fatal(<span class=\"string\">'this is an fatal message'</span>)</div><div class=\"line\">    app.log.debug(<span class=\"string\">'this is an debug message'</span>)</div></pre></td></tr></table></figure>\n<p>Ex: Logging Configuration Example</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">[myapp]</div><div class=\"line\">log_handler = logging</div><div class=\"line\"></div><div class=\"line\">[log.logging]</div><div class=\"line\">to_console = true</div><div class=\"line\">file = /path/to/myapp.log</div><div class=\"line\">level = warning</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py</div><div class=\"line\">INFO: this is an info message</div><div class=\"line\">WARNING: this is an warning message</div><div class=\"line\">ERROR: this is an error message</div><div class=\"line\">CRITICAL: this is an fatal message</div></pre></td></tr></table></figure>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>By default, Cement does not define any output handlers.  Just like any other app, you are free to <code>print()</code> to console all you like or use the builtin  logging facility.  That said, more complex applications will benefit greatly by separating the output from the logic.  Think of output handling as the <code>view</code> in a traditional <a href=\"https://en.wikipedia.org/wiki/Model-view-controller\">MVC Framework</a>.</p>\n<p>Cement ships with several types of extensions that produce output in different forms, including the following:</p>\n<ul>\n<li>Text Rendered From Template Files</li>\n<li>Programatic Structures (JSON, Yaml, etc)</li>\n<li>Tabulated (like MySQL, etc)</li>\n<li>Etc</li>\n</ul>\n<p>The following output handlers ship with Cement:</p>\n<ul>\n<li><code>Json</code> - Produces JSON output from dicts</li>\n<li><code>Yaml</code> - Produces Yaml output from dicts</li>\n<li><code>Mustache</code> - Produces text output rendered from <a href=\"http://mustache.github.io/\">Mustache</a> templates</li>\n<li><code>Handlebars</code> - Produces text output rendered from <a href=\"https://github.com/wbond/pybars3\">Handlebars</a> templates</li>\n<li><code>Jinja2</code> - Produces text output rendered from <a href=\"http://jinja.pocoo.org/\">Jinja2</a> templates</li>\n<li><code>Tabulated</code> - Produces tabulated text output rendered via the <a href=\"https://pypi.python.org/pypi/tabulate\">Tabulate</a> library.</li>\n</ul>\n<p>Ex: Standard Output via Print Statements</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> App(<span class=\"string\">'myapp'</span>) <span class=\"keyword\">as</span> app:</div><div class=\"line\">    print(<span class=\"string\">'About Run MyApp!'</span>)</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p><strong>Multiple Output Handler Support</strong></p>\n<p>One of the unique features of Cement is that you can build your application to support multiple output handlers and formats.  Output handlers have a special attribute that allows them to be exposed via the CLI option <code>-o</code> (configurable via <code>App.Meta.core_handler_override_options</code>).  Therefore, you might have default text based output rendered from Mustache templates, but optionally output programatic structures <em>from the same dict</em> when necessary (i.e.<code>$ myapp -o json</code>).</p>\n<p>Ex: Mixed Template/JSON Output Example</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">### add optional extensions</span></div><div class=\"line\">        extensions = [<span class=\"string\">'json'</span>, <span class=\"string\">'mustache'</span>]</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">### set the default output handler</span></div><div class=\"line\">        output_handler = <span class=\"string\">'mustache'</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">### external template directory</span></div><div class=\"line\">        template_dir = <span class=\"string\">'/path/to/templates'</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">### internal template module (shipped with app code)</span></div><div class=\"line\">        template_module = <span class=\"string\">'myapp.templates'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">### create some data</span></div><div class=\"line\">    data = &#123;</div><div class=\"line\">        <span class=\"string\">'foo'</span> : <span class=\"string\">'bar'</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">### render data using mustache template (by default)</span></div><div class=\"line\">    app.render(data, <span class=\"string\">'example.m'</span>)</div></pre></td></tr></table></figure>\n<p>Ex: Mustache Template: /path/to/templates/example.m</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">The value of foo=&#123;&#123;foo&#125;&#125;.</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py --help</div><div class=\"line\">usage: myapp [-h] [--debug] [--quiet] [-o &#123;json&#125;]</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --help  show this help message and exit</div><div class=\"line\">  --debug     toggle debug output</div><div class=\"line\">  --quiet     suppress all output</div><div class=\"line\">  -o &#123;json&#125;   output handler</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$ python myapp.py</div><div class=\"line\">The value of foo=bar</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$ python myapp.py -o json</div><div class=\"line\">&#123;&quot;foo&quot;: &quot;bar&quot;&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Controllers\"><a href=\"#Controllers\" class=\"headerlink\" title=\"Controllers\"></a>Controllers</h2><p>Controllers provide a common means of organizing application logic into relevant chunks of code, as well as the ability for plugins and extensions to extend an applications capabilities. It is the <code>Controller</code> piece of the traditional  <a href=\"https://en.wikipedia.org/wiki/Model-view-controller\">MVC Framework</a>.</p>\n<p>The first controller is called <code>base</code>, and if registered will take over runtime control when <code>app.run()</code> is called.  What this means is, instead of Cement calling <code>app.args.parse_arguments()</code> directly, the application dispatch is handed over to the <code>base</code> controller, that is then responsible for parsing and handling arguments.  This is what we call <code>Runtime Dispatch</code>.</p>\n<p>The most notable action of <code>Runtime Dispatch</code> is mapping arguments and sub-commands to their respective controllers and functions.  For example, the default action when running <code>$ myapp</code> without any arguments or sub-commands is to execute the <code>BaseController._default()</code> function.</p>\n<p>Ex: Application Base Controller</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App, Controller, ex</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span><span class=\"params\">(Controller)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'base'</span></div><div class=\"line\"></div><div class=\"line\">        arguments = [</div><div class=\"line\">            <span class=\"comment\"># list of tuples in the format `( [], &#123;&#125; )`</span></div><div class=\"line\">            ( [ <span class=\"string\">'-a'</span> ],</div><div class=\"line\">              &#123; <span class=\"string\">'help'</span> : <span class=\"string\">'example a option'</span>,</div><div class=\"line\">                <span class=\"string\">'dest'</span> : <span class=\"string\">'a'</span> &#125; ),</div><div class=\"line\">        ]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_default</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Inside Base._default()'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> self.app.pargs.a:</div><div class=\"line\">            print(<span class=\"string\">'Received Option: -a'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @ex(</span></div><div class=\"line\">        help=<span class=\"string\">'sub-command under base controller'</span>,</div><div class=\"line\">        arguments=[</div><div class=\"line\">            ( [ <span class=\"string\">'-b'</span> ],</div><div class=\"line\">              &#123; <span class=\"string\">'help'</span> : <span class=\"string\">'cmd1 b option'</span> &#125; ),</div><div class=\"line\">        ]</div><div class=\"line\">    )</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cmd1</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Inside Base.cmd1()'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> self.app.pargs.b:</div><div class=\"line\">            print(<span class=\"string\">'Recieved Option: -b'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        handlers = [</div><div class=\"line\">            Base,</div><div class=\"line\">        ]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">### help output shows base namespace arguments and sub-commands</span></div><div class=\"line\"></div><div class=\"line\">$ python myapp.py --<span class=\"built_in\">help</span></div><div class=\"line\">usage: myapp [-h] [--debug] [--quiet] [-a A] &#123;cmd1&#125; ...</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --<span class=\"built_in\">help</span>  show this <span class=\"built_in\">help</span> message and <span class=\"built_in\">exit</span></div><div class=\"line\">  --debug     toggle debug output</div><div class=\"line\">  --quiet     suppress all output</div><div class=\"line\">  -a A        example a option</div><div class=\"line\"></div><div class=\"line\">sub-commands:</div><div class=\"line\">  &#123;cmd1&#125;</div><div class=\"line\">    cmd1      sub-command under base controller</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$ python myapp.py -a foo</div><div class=\"line\">Inside Base._default()</div><div class=\"line\">Received Option: -a</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">### sub-commands support their own arguments</span></div><div class=\"line\"></div><div class=\"line\">$ python myapp.py cmd1 --<span class=\"built_in\">help</span></div><div class=\"line\">usage: myapp cmd1 [-h] [-b B]</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --<span class=\"built_in\">help</span>  show this <span class=\"built_in\">help</span> message and <span class=\"built_in\">exit</span></div><div class=\"line\">  -b B        cmd1 b option</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$ python myapp.py cmd1 -b foo</div><div class=\"line\">Inside Base.cmd1()</div><div class=\"line\">Recieved Option: -b</div></pre></td></tr></table></figure>\n<p><strong>Nested / Embedded Controllers</strong></p>\n<p>Cement supports two types of controller <code>stacking</code>:</p>\n<ul>\n<li><code>nested</code> - The arguments and commands are nested under a sub-parser whose label is that of the controller.  For example, a nested controller with a label of <code>my-nested-controller</code> would be called as <code>$ myapp my-nested-controller sub-command</code>.</li>\n<li><code>embedded</code> - The arguments and commands are embedded within it’s parent controller, therefore appearing as if they were defined by the parent itself.  A sub-command under an embedded controller would be called as <code>$ myapp sub-command</code>.</li>\n</ul>\n<p>Controllers can be stacked on other controllers as many levels deep as necessary.  An <code>embedded</code> controller can be stacked on top of a <code>nested</code> controller, and vice versa.  There is little, if any, limitation.</p>\n<p><strong>Controller Arguments vs Command Arguments</strong></p>\n<p>Both Controllers and their sub-commands can have arguments defined.  Think of controllers as the primary namespace.  It’s arguments should be globally relevant within that namespace.  A sub-command within the namespace can have it’s own arguments, but are only relevant to that sub-command.</p>\n<p>I.e. <code>$ myapp -a my-controller -b my-sub-command -c</code></p>\n<p>In the above example, <code>-a</code> is relevant to the global scope of the entire application because it is defined on the <code>base</code> controller.  Option <code>-b</code> is relevant to the scope of <code>my-controller</code> and all sub-commands under it. Finally, <code>-c</code> is only relevant to the <code>my-sub-command</code> and has no use elsewhere.</p>\n<p><strong>Exposing Sub-Commands</strong></p>\n<p>By default, no commands are exposed to the CLI except that a <code>_default()</code> function will be called if no sub-command is passed (configurable by <code>Controller.Meta.default_func</code>).</p>\n<p>To expose a function as a sub-command, you must decorate it with <code>@ex()</code>. It’s usage is simple, and supports the following parameters:</p>\n<ul>\n<li><code>hide</code> (<em>bool</em>) - Whether or not to display in <code>--help</code> output.</li>\n<li><code>arguments</code> (<em>list</em>) - Argument list of tuples in the format <code>( [], {} )</code>, that are passed to <code>Argparse.add_argument(*args, **kwargs)</code>.</li>\n<li><code>**kwargs</code> - Additional keyword arguments are passed directly to Argparse when creating the sub-parser for this command.</li>\n</ul>\n<p class='tip'>Why <code>ex</code>?  Well, <code>ex</code> is short for <code>expose</code>, and just so happens that <code>@ex(</code> is exactly <code>4</code> characters, making it lineup perfectly with indented parameters.  It makes things more readable, more-better.</p>\n\n\n\n<h2 id=\"Framework-Extensions\"><a href=\"#Framework-Extensions\" class=\"headerlink\" title=\"Framework Extensions\"></a>Framework Extensions</h2><p>Cement’s Interfaces and Handlers system makes extending the framework easy, and limitless.  Cement ships dozens of extensions that either alter existing funtionality, or add to it.  For example, the default logging facility provides basic logging capabilities, however with a single line of code an application can instead use the <code>colorlog</code> extension to enable colorized console logging.  </p>\n<p>The example provides a quick look at using the <code>alarm</code> extension to handle application timeouts of long running operations</p>\n<p>Ex: Using Framework Extensions:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</div><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        extensions = [</div><div class=\"line\">            <span class=\"string\">'alarm'</span>,</div><div class=\"line\">        ]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">### set an alarm based on the max allowed run time</span></div><div class=\"line\">    app.alarm.set(<span class=\"number\">3</span>, <span class=\"string\">\"The operation timed out after 3 seconds!\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">### do something that takes time to operate</span></div><div class=\"line\">    sleep(<span class=\"number\">5</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">### stop the alarm if it ran within the time frame</span></div><div class=\"line\">    app.alarm.stop()</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py</div><div class=\"line\">ERROR: The operation timed out after 3 seconds!</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"myapp.py\"</span>, line 20, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    sleep(5)</div><div class=\"line\">  File <span class=\"string\">\"cement/core/foundation.py\"</span>, line 123, <span class=\"keyword\">in</span> cement_signal_handler</div><div class=\"line\">    raise exc.CaughtSignal(signum, frame)</div><div class=\"line\">cement.core.exc.CaughtSignal: Caught signal 14</div></pre></td></tr></table></figure>\n<p><strong>Included Extensions</strong></p>\n<p>Cement includes (but is not limited to) the following extensions:</p>\n<ul>\n<li><code>alarm</code> - Provides easy access to setting an application alarm to handle timing out operations</li>\n<li><code>argparse</code> - Provides <code>ArgparseArgumentHandler</code> and <code>ArgparseController</code> handlers built on Argparse</li>\n<li><code>colorlog</code> - Provides <code>ColorLogHandler</code> that produces colorized console logging</li>\n<li><code>configparser</code> - Provides <code>ConfigParserConfigHandler</code> handler for application configuration built on on ConfigParser</li>\n<li><code>daemon</code> - Provides daemonization, pidfile management, user/group context switching, etc</li>\n<li><code>handlebars</code> - Provides <code>HandlebarsOutputHandler</code> to render text output from Handlerbars templates</li>\n<li><code>jinja2</code> - Provides <code>Jinja2OutputHandler</code> to render text output from Jinja2 templates</li>\n<li><code>json</code> - Provides <code>JsonConfigHandler</code> and <code>JsonOutputHandler</code> to read JSON configuration files, and produce JSON structured output.</li>\n<li><code>logging</code> - Provides <code>LoggingLogHandler</code> for standard application logging</li>\n<li><code>memcached</code> - Providers <code>MemcachedCacheHandler</code> for caching built on Memcached</li>\n<li><code>mustache</code> - Provides <code>MustacheOutputHandler</code> to render text output from Mustache templates</li>\n<li><code>plugin</code> - Provides <code>CementPluginHandler</code> for application plugin support</li>\n<li><code>redis</code> - Provides <code>RedisCacheHandler</code> for caching built on Redis</li>\n<li><code>smtp</code> - Provides <code>SMTPMailHandler</code> for email messaging</li>\n<li><code>tabulate</code> - Provides <code>TabulateOutputHandler</code> for text output tabularized like MySQL, etc</li>\n<li><code>watchdog</code> - Provides cross-platform directory/file monitoring in order to handle filesystem events as they occur.</li>\n<li><code>yaml</code> - Providers <code>YamlConfigHandler</code> and <code>YamlOutputHandler</code> to read Yaml configuration files, and produce Yaml structured output.</li>\n</ul>\n<h2 id=\"Application-Plugins\"><a href=\"#Application-Plugins\" class=\"headerlink\" title=\"Application Plugins\"></a>Application Plugins</h2><p>Cement provides an interface that automatically handles the management, configuration, and loading of Application Plugins.  A Plugin is essentially the same as a Framework Extension, but is application specific where extensions are agnostic (can be used by any application).  </p>\n<p>A plugin can be anything, and provide any kind of functionality from defining runtime hooks, to extending an applications capabilities by adding nested/embedded controllers.  the only thing that a plugin must provide is a <code>load()</code> function that is called when the plugin is imported.</p>\n<p>Ex: Basic Application</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App, Controller, ex</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span><span class=\"params\">(Controller)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'base'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        handlers = [</div><div class=\"line\">            Base,</div><div class=\"line\">        ]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p>CLI Usage (without plugin enabled):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python test.py --help</div><div class=\"line\">usage: myapp [-h] [--debug] [--quiet] &#123;&#125; ...</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --help  show this help message and exit</div><div class=\"line\">  --debug     toggle debug output</div><div class=\"line\">  --quiet     suppress all output</div><div class=\"line\"></div><div class=\"line\">sub-commands:</div><div class=\"line\">  &#123;&#125;</div></pre></td></tr></table></figure>\n<p>Ex: Plugin</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> Controller, ex</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPlugin</span><span class=\"params\">(Controller)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myplugin'</span></div><div class=\"line\">        stacked_on = <span class=\"string\">'base'</span></div><div class=\"line\">        stacked_type = <span class=\"string\">'embedded'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @ex()</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cmd1</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Inside MyPlugin.cmd1()'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load</span><span class=\"params\">(app)</span>:</span></div><div class=\"line\">    app.handler.register(MyPlugin)</div></pre></td></tr></table></figure>\n<p>Configuration (<code>~/.myapp.conf</code>):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">[myapp]</div><div class=\"line\">plugin_dir = /path/to/myapp/plugins</div><div class=\"line\"></div><div class=\"line\">[plugin.myplugin]</div><div class=\"line\">enabled = true</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py --help</div><div class=\"line\">usage: myapp [-h] [--debug] [--quiet] &#123;cmd1&#125; ...</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --help  show this help message and exit</div><div class=\"line\">  --debug     toggle debug output</div><div class=\"line\">  --quiet     suppress all output</div><div class=\"line\"></div><div class=\"line\">sub-commands:</div><div class=\"line\">  &#123;cmd1&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$ python myapp.py cmd1</div><div class=\"line\">Inside MyPlugin.cmd1()</div></pre></td></tr></table></figure>\n<h2 id=\"Hooks\"><a href=\"#Hooks\" class=\"headerlink\" title=\"Hooks\"></a>Hooks</h2><p>Hooks provide developers the ability to tie into the framework, and applications without direct access to the runtime.  For example, a plugin might need to execute some code after arguments have been parsed, but before controller sub-commands are dispatched.  As a plugin developer, you don’t have direct access to the applications runtime code but you can still tie into it with the builtin <code>post_argument_parsing</code> hook.</p>\n<p>Cement defines several hooks that tie in to specific points throughout the application life cycle, however application developers can also define their own hooks allowing others to tie elsewhere, when needed.</p>\n<p>Ex: Executing Code Via Hooks</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> cement <span class=\"keyword\">import</span> App</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_example_hook</span><span class=\"params\">(app)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Inside my_example_hook()'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span><span class=\"params\">(App)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        label = <span class=\"string\">'myapp'</span></div><div class=\"line\">        hooks = [</div><div class=\"line\">            (<span class=\"string\">'post_argument_parsing'</span>, my_example_hook),</div><div class=\"line\">        ]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> MyApp() <span class=\"keyword\">as</span> app:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p>CLI Usage:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ python myapp.py</div><div class=\"line\">Inside my_example_hook()</div></pre></td></tr></table></figure>\n"},{"title":"Elastic Header","type":"examples","order":7,"_content":"\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/y91wy85p/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"portland/examples/elastic-header.md","raw":"---\ntitle: Elastic Header\ntype: examples\norder: 7\n---\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/y91wy85p/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2017-06-11T22:12:06.000Z","updated":"2017-06-11T19:28:10.000Z","path":"portland/examples/elastic-header.html","comments":1,"layout":"page","_id":"cj3wg8kn5000bq0pw55mv904y","content":"<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/y91wy85p/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/y91wy85p/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Firebase + Validation","type":"examples","order":10,"_content":"\n> This example uses [Firebase](https://firebase.google.com/) as the data persistence backend and syncs between clients in real time (you can try opening it in multiple browser tabs). In addition, it performs instant validation using computed properties and triggers CSS transitions when adding/removing items.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/pyLbpzzx/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"portland/examples/firebase.md","raw":"---\ntitle: Firebase + Validation\ntype: examples\norder: 10\n---\n\n> This example uses [Firebase](https://firebase.google.com/) as the data persistence backend and syncs between clients in real time (you can try opening it in multiple browser tabs). In addition, it performs instant validation using computed properties and triggers CSS transitions when adding/removing items.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/pyLbpzzx/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2017-06-11T22:12:06.000Z","updated":"2017-06-11T19:28:10.000Z","path":"portland/examples/firebase.html","comments":1,"layout":"page","_id":"cj3wg8kn6000cq0pw8nn3pqd1","content":"<blockquote>\n<p>This example uses <a href=\"https://firebase.google.com/\" target=\"_blank\" rel=\"external\">Firebase</a> as the data persistence backend and syncs between clients in real time (you can try opening it in multiple browser tabs). In addition, it performs instant validation using computed properties and triggers CSS transitions when adding/removing items.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/pyLbpzzx/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>This example uses <a href=\"https://firebase.google.com/\">Firebase</a> as the data persistence backend and syncs between clients in real time (you can try opening it in multiple browser tabs). In addition, it performs instant validation using computed properties and triggers CSS transitions when adding/removing items.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/pyLbpzzx/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Grid Component","type":"examples","order":3,"_content":"\n> This is an example of creating a reusable grid component and using it with external data.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/xkkbfL3L/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"portland/examples/grid-component.md","raw":"---\ntitle: Grid Component\ntype: examples\norder: 3\n---\n\n> This is an example of creating a reusable grid component and using it with external data.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/xkkbfL3L/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2017-06-11T22:12:06.000Z","updated":"2017-06-11T19:28:10.000Z","path":"portland/examples/grid-component.html","comments":1,"layout":"page","_id":"cj3wg8knc000dq0pwbgfhlupe","content":"<blockquote>\n<p>This is an example of creating a reusable grid component and using it with external data.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/xkkbfL3L/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>This is an example of creating a reusable grid component and using it with external data.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/xkkbfL3L/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"HackerNews Clone","type":"examples","order":12,"_content":"\n> This is a HackerNews clone built upon HN's official Firebase API, Vue 2.0 + vue-router + vuex, with server-side rendering.\n\n{% raw %}\n<div style=\"max-width:600px\">\n  <a href=\"https://github.com/vuejs/vue-hackernews-2.0\" target=\"_blank\">\n    <img style=\"width:100%\" src=\"/images/hn.png\">\n  </a>\n</div>\n{% endraw %}\n\n> [Live Demo](https://vue-hn.now.sh/)\n> Note: the demo may need some spin up time if nobody has accessed it for a certain period.\n>\n> [[Source](https://github.com/vuejs/vue-hackernews-2.0)]\n\n## Features\n\n- Server Side Rendering\n  - Vue + vue-router + vuex working together\n  - Server-side data pre-fetching\n  - Client-side state & DOM hydration\n- Single-file Vue Components\n  - Hot-reload in development\n  - CSS extraction for production\n- Real-time List Updates with FLIP Animation\n\n## Architecture Overview\n\n<img width=\"973\" alt=\"Hackernew clone architecture overview\" src=\"/images/hn-architecture.png\">\n","source":"portland/examples/hackernews.md","raw":"---\ntitle: HackerNews Clone\ntype: examples\norder: 12\n---\n\n> This is a HackerNews clone built upon HN's official Firebase API, Vue 2.0 + vue-router + vuex, with server-side rendering.\n\n{% raw %}\n<div style=\"max-width:600px\">\n  <a href=\"https://github.com/vuejs/vue-hackernews-2.0\" target=\"_blank\">\n    <img style=\"width:100%\" src=\"/images/hn.png\">\n  </a>\n</div>\n{% endraw %}\n\n> [Live Demo](https://vue-hn.now.sh/)\n> Note: the demo may need some spin up time if nobody has accessed it for a certain period.\n>\n> [[Source](https://github.com/vuejs/vue-hackernews-2.0)]\n\n## Features\n\n- Server Side Rendering\n  - Vue + vue-router + vuex working together\n  - Server-side data pre-fetching\n  - Client-side state & DOM hydration\n- Single-file Vue Components\n  - Hot-reload in development\n  - CSS extraction for production\n- Real-time List Updates with FLIP Animation\n\n## Architecture Overview\n\n<img width=\"973\" alt=\"Hackernew clone architecture overview\" src=\"/images/hn-architecture.png\">\n","date":"2017-06-11T22:12:06.000Z","updated":"2017-06-11T19:28:10.000Z","path":"portland/examples/hackernews.html","comments":1,"layout":"page","_id":"cj3wg8kne000eq0pw55z1l2n7","content":"<blockquote>\n<p>This is a HackerNews clone built upon HN’s official Firebase API, Vue 2.0 + vue-router + vuex, with server-side rendering.</p>\n</blockquote>\n\n<div style=\"max-width:600px\">\n  <a href=\"https://github.com/vuejs/vue-hackernews-2.0\" target=\"_blank\">\n    <img style=\"width:100%\" src=\"/images/hn.png\">\n  </a>\n</div>\n\n<blockquote>\n<p><a href=\"https://vue-hn.now.sh/\" target=\"_blank\" rel=\"external\">Live Demo</a><br>Note: the demo may need some spin up time if nobody has accessed it for a certain period.</p>\n<p>[<a href=\"https://github.com/vuejs/vue-hackernews-2.0\" target=\"_blank\" rel=\"external\">Source</a>]</p>\n</blockquote>\n<h2 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h2><ul>\n<li>Server Side Rendering<ul>\n<li>Vue + vue-router + vuex working together</li>\n<li>Server-side data pre-fetching</li>\n<li>Client-side state &amp; DOM hydration</li>\n</ul>\n</li>\n<li>Single-file Vue Components<ul>\n<li>Hot-reload in development</li>\n<li>CSS extraction for production</li>\n</ul>\n</li>\n<li>Real-time List Updates with FLIP Animation</li>\n</ul>\n<h2 id=\"Architecture-Overview\"><a href=\"#Architecture-Overview\" class=\"headerlink\" title=\"Architecture Overview\"></a>Architecture Overview</h2><p><img width=\"973\" alt=\"Hackernew clone architecture overview\" src=\"/images/hn-architecture.png\"></p>\n","excerpt":"","more":"<blockquote>\n<p>This is a HackerNews clone built upon HN’s official Firebase API, Vue 2.0 + vue-router + vuex, with server-side rendering.</p>\n</blockquote>\n\n<div style=\"max-width:600px\">\n  <a href=\"https://github.com/vuejs/vue-hackernews-2.0\" target=\"_blank\">\n    <img style=\"width:100%\" src=\"/images/hn.png\">\n  </a>\n</div>\n\n<blockquote>\n<p><a href=\"https://vue-hn.now.sh/\">Live Demo</a><br>Note: the demo may need some spin up time if nobody has accessed it for a certain period.</p>\n<p>[<a href=\"https://github.com/vuejs/vue-hackernews-2.0\">Source</a>]</p>\n</blockquote>\n<h2 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h2><ul>\n<li>Server Side Rendering<ul>\n<li>Vue + vue-router + vuex working together</li>\n<li>Server-side data pre-fetching</li>\n<li>Client-side state &amp; DOM hydration</li>\n</ul>\n</li>\n<li>Single-file Vue Components<ul>\n<li>Hot-reload in development</li>\n<li>CSS extraction for production</li>\n</ul>\n</li>\n<li>Real-time List Updates with FLIP Animation</li>\n</ul>\n<h2 id=\"Architecture-Overview\"><a href=\"#Architecture-Overview\" class=\"headerlink\" title=\"Architecture Overview\"></a>Architecture Overview</h2><p><img width=\"973\" alt=\"Hackernew clone architecture overview\" src=\"/images/hn-architecture.png\"></p>\n"},{"title":"Markdown Editor","type":"examples","order":0,"_content":"\n> Dead simple Markdown editor.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/rdjjpc7a/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"portland/examples/index.md","raw":"---\ntitle: Markdown Editor\ntype: examples\norder: 0\n---\n\n> Dead simple Markdown editor.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/rdjjpc7a/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2017-06-11T22:12:06.000Z","updated":"2017-06-11T19:28:10.000Z","path":"portland/examples/index.html","comments":1,"layout":"page","_id":"cj3wg8kne000fq0pw5e0n0tio","content":"<blockquote>\n<p>Dead simple Markdown editor.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/rdjjpc7a/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>Dead simple Markdown editor.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/chrisvfritz/rdjjpc7a/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Modal Component","type":"examples","order":6,"_content":"\n> Features used: component, prop passing, content insertion, transitions.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mwLbw11k/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"portland/examples/modal.md","raw":"---\ntitle: Modal Component\ntype: examples\norder: 6\n---\n\n> Features used: component, prop passing, content insertion, transitions.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mwLbw11k/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2017-06-11T22:12:06.000Z","updated":"2017-06-11T19:28:10.000Z","path":"portland/examples/modal.html","comments":1,"layout":"page","_id":"cj3wg8kng000gq0pw4rx8gzcm","content":"<blockquote>\n<p>Features used: component, prop passing, content insertion, transitions.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mwLbw11k/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>Features used: component, prop passing, content insertion, transitions.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mwLbw11k/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Wrapper Component","type":"examples","order":8,"_content":"\n> In this example we are integrating a 3rd party jQuery plugin (select2) by wrapping it inside a custom component.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/fruqrvdL/456/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"portland/examples/select2.md","raw":"---\ntitle: Wrapper Component\ntype: examples\norder: 8\n---\n\n> In this example we are integrating a 3rd party jQuery plugin (select2) by wrapping it inside a custom component.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/fruqrvdL/456/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2017-06-11T22:12:06.000Z","updated":"2017-06-11T19:28:10.000Z","path":"portland/examples/select2.html","comments":1,"layout":"page","_id":"cj3wg8knh000hq0pw98kuqng5","content":"<blockquote>\n<p>In this example we are integrating a 3rd party jQuery plugin (select2) by wrapping it inside a custom component.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/fruqrvdL/456/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>In this example we are integrating a 3rd party jQuery plugin (select2) by wrapping it inside a custom component.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/fruqrvdL/456/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"SVG Graph","type":"examples","order":5,"_content":"\n> This example showcases a combination of custom component, computed property, two-way binding and SVG support.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mhrckqgq/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"portland/examples/svg.md","raw":"---\ntitle: SVG Graph\ntype: examples\norder: 5\n---\n\n> This example showcases a combination of custom component, computed property, two-way binding and SVG support.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mhrckqgq/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2017-06-11T22:12:06.000Z","updated":"2017-06-11T19:28:10.000Z","path":"portland/examples/svg.html","comments":1,"layout":"page","_id":"cj3wg8kni000iq0pwwrjqp66l","content":"<blockquote>\n<p>This example showcases a combination of custom component, computed property, two-way binding and SVG support.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mhrckqgq/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>This example showcases a combination of custom component, computed property, two-way binding and SVG support.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/mhrckqgq/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"TodoMVC","type":"examples","order":11,"_content":"\n> This is a fully spec-compliant TodoMVC implementation in under 120 effective lines of JavaScript (excluding comments and blank lines).\n\n<p class=\"tip\">Note that if your web browser is configured to block 3rd-party data/cookies, the example below will not work, as the `localStorage` data will fail to be saved from JSFiddle. You'll have to click on `Edit in JSFiddle` to see the live result.</p>\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/4dr2fLb7/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"portland/examples/todomvc.md","raw":"---\ntitle: TodoMVC\ntype: examples\norder: 11\n---\n\n> This is a fully spec-compliant TodoMVC implementation in under 120 effective lines of JavaScript (excluding comments and blank lines).\n\n<p class=\"tip\">Note that if your web browser is configured to block 3rd-party data/cookies, the example below will not work, as the `localStorage` data will fail to be saved from JSFiddle. You'll have to click on `Edit in JSFiddle` to see the live result.</p>\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/4dr2fLb7/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2017-06-11T22:12:06.000Z","updated":"2017-06-11T19:28:10.000Z","path":"portland/examples/todomvc.html","comments":1,"layout":"page","_id":"cj3wg8knj000jq0pwpxoefd5f","content":"<blockquote>\n<p>This is a fully spec-compliant TodoMVC implementation in under 120 effective lines of JavaScript (excluding comments and blank lines).</p>\n</blockquote>\n<p class=\"tip\">Note that if your web browser is configured to block 3rd-party data/cookies, the example below will not work, as the <code>localStorage</code> data will fail to be saved from JSFiddle. You’ll have to click on <code>Edit in JSFiddle</code> to see the live result.</p>\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/4dr2fLb7/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>This is a fully spec-compliant TodoMVC implementation in under 120 effective lines of JavaScript (excluding comments and blank lines).</p>\n</blockquote>\n<p class=\"tip\">Note that if your web browser is configured to block 3rd-party data/cookies, the example below will not work, as the <code>localStorage</code> data will fail to be saved from JSFiddle. You’ll have to click on <code>Edit in JSFiddle</code> to see the live result.</p>\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/4dr2fLb7/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"title":"Tree View","type":"examples","order":4,"_content":"\n> Example of a simple tree view implementation showcasing recursive usage of components.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/3p0j5sgy/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","source":"portland/examples/tree-view.md","raw":"---\ntitle: Tree View\ntype: examples\norder: 4\n---\n\n> Example of a simple tree view implementation showcasing recursive usage of components.\n\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/3p0j5sgy/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","date":"2017-06-11T22:12:06.000Z","updated":"2017-06-11T19:28:10.000Z","path":"portland/examples/tree-view.html","comments":1,"layout":"page","_id":"cj3wg8knk000kq0pw30lnzj7m","content":"<blockquote>\n<p>Example of a simple tree view implementation showcasing recursive usage of components.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/3p0j5sgy/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n","excerpt":"","more":"<blockquote>\n<p>Example of a simple tree view implementation showcasing recursive usage of components.</p>\n</blockquote>\n<iframe width=\"100%\" height=\"500\" src=\"https://jsfiddle.net/yyx990803/3p0j5sgy/embedded/result,html,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n"},{"type":"api","_content":"\n## Global Config\n\n`Vue.config` is an object containing Vue's global configurations. You can modify its properties listed below before bootstrapping your application:\n\n### silent\n\n- **Type:** `boolean`\n\n- **Default:** `false`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.silent = true\n  ```\n\n  Suppress all Vue logs and warnings.\n\n### optionMergeStrategies\n\n- **Type:** `{ [key: string]: Function }`\n\n- **Default:** `{}`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.optionMergeStrategies._my_option = function (parent, child, vm) {\n    return child + 1\n  }\n\n  const Profile = Vue.extend({\n    _my_option: 1\n  })\n\n  // Profile.options._my_option = 2\n  ```\n\n  Define custom merging strategies for options.\n\n  The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument.\n\n- **See also:** [Custom Option Merging Strategies](../guide/mixins.html#Custom-Option-Merge-Strategies)\n\n### devtools\n\n- **Type:** `boolean`\n\n- **Default:** `true` (`false` in production builds)\n\n- **Usage:**\n\n  ``` js\n  // make sure to set this synchronously immediately after loading Vue\n  Vue.config.devtools = true\n  ```\n\n  Configure whether to allow [vue-devtools](https://github.com/vuejs/vue-devtools) inspection. This option's default value is `true` in development builds and `false` in production builds. You can set it to `true` to enable inspection for production builds.\n\n### errorHandler\n\n- **Type:** `Function`\n\n- **Default:** `undefined`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.errorHandler = function (err, vm, info) {\n    // handle error\n    // `info` is a Vue-specific error info, e.g. which lifecycle hook\n    // the error was found in. Only available in 2.2.0+\n  }\n  ```\n\n  Assign a handler for uncaught errors during component render function and watchers. The handler gets called with the error and the Vue instance.\n\n  > In 2.2.0, this hook also captures errors in component lifecycle hooks. Also, when this hook is `undefined`, captured errors will be logged with `console.error` instead of crashing the app.\n\n  > [Sentry](https://sentry.io), an error tracking service, provides [official integration](https://sentry.io/for/vue/) using this option.\n\n### ignoredElements\n\n- **Type:** `Array<string>`\n\n- **Default:** `[]`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.ignoredElements = [\n    'my-custom-web-component', 'another-web-component'\n  ]\n  ```\n\n  Make Vue ignore custom elements defined outside of Vue (e.g., using the Web Components APIs). Otherwise, it will throw a warning about an `Unknown custom element`, assuming that you forgot to register a global component or misspelled a component name.\n\n### keyCodes\n\n- **Type:** `{ [key: string]: number | Array<number> }`\n\n- **Default:** `{}`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.keyCodes = {\n    v: 86,\n    f1: 112,\n    // camelCase won`t work\n    mediaPlayPause: 179,\n    // instead you can use kebab-case with double quotation marks\n    \"media-play-pause\" : 179,\n    up: [38, 87]\n  }\n  ```\n\n  ```html\n  <input type=\"text\" @keyup.media-play-pause=\"method\">\n  ```\n\n  Define custom key alias(es) for v-on.\n\n### performance\n\n> New in 2.2.0\n\n- **Type:** `boolean`\n\n- **Default:** `false (from 2.2.3)`\n\n- **Usage**:\n\n  Set this to `true` to enable component init, compile, render and patch performance tracing in the browser devtool timeline. Only works in development mode and in browsers that support the [performance.mark](https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark) API.\n\n### productionTip\n\n> New in 2.2.0\n\n- **Type:** `boolean`\n\n- **Default:** `true`\n\n- **Usage**:\n\n  Set this to `false` to prevent the production tip on Vue startup.\n\n## Global API\n\n<h3 id=\"Vue-extend\">Vue.extend( options )</h3>\n\n- **Arguments:**\n  - `{Object} options`\n\n- **Usage:**\n\n  Create a \"subclass\" of the base Vue constructor. The argument should be an object containing component options.\n\n  The special case to note here is the `data` option - it must be a function when used with `Vue.extend()`.\n\n  ``` html\n  <div id=\"mount-point\"></div>\n  ```\n\n  ``` js\n  // create constructor\n  var Profile = Vue.extend({\n    template: '<p>{{firstName}} {{lastName}} aka {{alias}}</p>',\n    data: function () {\n      return {\n        firstName: 'Walter',\n        lastName: 'White',\n        alias: 'Heisenberg'\n      }\n    }\n  })\n  // create an instance of Profile and mount it on an element\n  new Profile().$mount('#mount-point')\n  ```\n\n  Will result in:\n\n  ``` html\n  <p>Walter White aka Heisenberg</p>\n  ```\n\n- **See also:** [Components](../guide/components.html)\n\n<h3 id=\"Vue-nextTick\">Vue.nextTick( [callback, context] )</h3>\n\n- **Arguments:**\n  - `{Function} [callback]`\n  - `{Object} [context]`\n\n- **Usage:**\n\n  Defer the callback to be executed after the next DOM update cycle. Use it immediately after you've changed some data to wait for the DOM update.\n\n  ``` js\n  // modify data\n  vm.msg = 'Hello'\n  // DOM not updated yet\n  Vue.nextTick(function () {\n    // DOM updated\n  })\n  ```\n\n  > New in 2.1.0: returns a Promise if no callback is provided and Promise is supported in the execution environment.\n\n- **See also:** [Async Update Queue](../guide/reactivity.html#Async-Update-Queue)\n\n<h3 id=\"Vue-set\">Vue.set( target, key, value )</h3>\n\n- **Arguments:**\n  - `{Object | Array} target`\n  - `{string | number} key`\n  - `{any} value`\n\n- **Returns:** the set value.\n\n- **Usage:**\n\n  Set a property on an object. If the object is reactive, ensure the property is created as a reactive property and trigger view updates. This is primarily used to get around the limitation that Vue cannot detect property additions.\n\n  **Note the object cannot be a Vue instance, or the root data object of a Vue instance.**\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n<h3 id=\"Vue-delete\">Vue.delete( target, key )</h3>\n\n- **Arguments:**\n  - `{Object | Array} target`\n  - `{string | number} key`\n\n- **Usage:**\n\n  Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it.\n\n  > Also works with on Array + index in 2.2.0+.\n\n  <p class=\"tip\">The target object cannot be a Vue instance, or the root data object of a Vue instance.</p>\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n<h3 id=\"Vue-directive\">Vue.directive( id, [definition] )</h3>\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function | Object} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global directive.\n\n  ``` js\n  // register\n  Vue.directive('my-directive', {\n    bind: function () {},\n    inserted: function () {},\n    update: function () {},\n    componentUpdated: function () {},\n    unbind: function () {}\n  })\n\n  // register (simple function directive)\n  Vue.directive('my-directive', function () {\n    // this will be called as `bind` and `update`\n  })\n\n  // getter, return the directive definition if registered\n  var myDirective = Vue.directive('my-directive')\n  ```\n\n- **See also:** [Custom Directives](../guide/custom-directive.html)\n\n<h3 id=\"Vue-filter\">Vue.filter( id, [definition] )</h3>\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global filter.\n\n  ``` js\n  // register\n  Vue.filter('my-filter', function (value) {\n    // return processed value\n  })\n\n  // getter, return the filter if registered\n  var myFilter = Vue.filter('my-filter')\n  ```\n\n<h3 id=\"Vue-component\">Vue.component( id, [definition] )</h3>\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function | Object} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global component. Registration also automatically sets the component's `name` with the given `id`.\n\n  ``` js\n  // register an extended constructor\n  Vue.component('my-component', Vue.extend({ /* ... */ }))\n\n  // register an options object (automatically call Vue.extend)\n  Vue.component('my-component', { /* ... */ })\n\n  // retrieve a registered component (always return constructor)\n  var MyComponent = Vue.component('my-component')\n  ```\n\n- **See also:** [Components](../guide/components.html)\n\n<h3 id=\"Vue-use\">Vue.use( plugin )</h3>\n\n- **Arguments:**\n  - `{Object | Function} plugin`\n\n- **Usage:**\n\n  Install a Vue.js plugin. If the plugin is an Object, it must expose an `install` method. If it is a function itself, it will be treated as the install method. The install method will be called with Vue as the argument.\n\n  When this method is called on the same plugin multiple times, the plugin will be installed only once.\n\n- **See also:** [Plugins](../guide/plugins.html)\n\n<h3 id=\"Vue-mixin\">Vue.mixin( mixin )</h3>\n\n- **Arguments:**\n  - `{Object} mixin`\n\n- **Usage:**\n\n  Apply a mixin globally, which affects every Vue instance created afterwards. This can be used by plugin authors to inject custom behavior into components. **Not recommended in application code**.\n\n- **See also:** [Global Mixins](../guide/mixins.html#Global-Mixin)\n\n<h3 id=\"Vue-compile\">Vue.compile( template )</h3>\n\n- **Arguments:**\n  - `{string} template`\n\n- **Usage:**\n\n  Compiles a template string into a render function. **Only available in the full build.**\n\n  ``` js\n  var res = Vue.compile('<div><span>{{ msg }}</span></div>')\n\n  new Vue({\n    data: {\n      msg: 'hello'\n    },\n    render: res.render,\n    staticRenderFns: res.staticRenderFns\n  })\n  ```\n\n- **See also:** [Render Functions](../guide/render-function.html)\n\n<h3 id=\"Vue-version\">Vue.version</h3>\n\n- **Details**: Provides the installed version of Vue as a string. This is especially useful for community plugins and components, where you might use different strategies for different versions.\n\n- **Usage**:\n\n```js\nvar version = Number(Vue.version.split('.')[0])\n\nif (version === 2) {\n  // Vue v2.x.x\n} else if (version === 1) {\n  // Vue v1.x.x\n} else {\n  // Unsupported versions of Vue\n}\n```\n\n## Options / Data\n\n### data\n\n- **Type:** `Object | Function`\n\n- **Restriction:** Only accepts `Function` when used in a component definition.\n\n- **Details:**\n\n  The data object for the Vue instance. Vue will recursively convert its properties into getter/setters to make it \"reactive\". **The object must be plain**: native objects such as browser API objects and prototype properties are ignored. A rule of thumb is that data should just be data - it is not recommended to observe objects with its own stateful behavior.\n\n  Once observed, you can no longer add reactive properties to the root data object. It is therefore recommended to declare all root-level reactive properties upfront, before creating the instance.\n\n  After the instance is created, the original data object can be accessed as `vm.$data`. The Vue instance also proxies all the properties found on the data object, so `vm.a` will be equivalent to `vm.$data.a`.\n\n  Properties that start with `_` or `$` will **not** be proxied on the Vue instance because they may conflict with Vue's internal properties and API methods. You will have to access them as `vm.$data._property`.\n\n  When defining a **component**, `data` must be declared as a function that returns the initial data object, because there will be many instances created using the same definition. If we still use a plain object for `data`, that same object will be **shared by reference** across all instances created! By providing a `data` function, every time a new instance is created, we can simply call it to return a fresh copy of the initial data.\n\n  If required, a deep clone of the original object can be obtained by passing `vm.$data` through `JSON.parse(JSON.stringify(...))`.\n\n- **Example:**\n\n  ``` js\n  var data = { a: 1 }\n\n  // direct instance creation\n  var vm = new Vue({\n    data: data\n  })\n  vm.a // -> 1\n  vm.$data === data // -> true\n\n  // must use function when in Vue.extend()\n  var Component = Vue.extend({\n    data: function () {\n      return { a: 1 }\n    }\n  })\n  ```\n\n  <p class=\"tip\">Note that __you should not use an arrow function with the `data` property__ (e.g. `data: () => { return { a: this.myProp }}`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.myProp` will be undefined.</p>\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n### props\n\n- **Type:** `Array<string> | Object`\n\n- **Details:**\n\n  A list/hash of attributes that are exposed to accept data from the parent component. It has a simple Array-based syntax and an alternative Object-based syntax that allows advanced configurations such as type checking, custom validation and default values.\n\n- **Example:**\n\n  ``` js\n  // simple syntax\n  Vue.component('props-demo-simple', {\n    props: ['size', 'myMessage']\n  })\n\n  // object syntax with validation\n  Vue.component('props-demo-advanced', {\n    props: {\n      // just type check\n      height: Number,\n      // type check plus other validations\n      age: {\n        type: Number,\n        default: 0,\n        required: true,\n        validator: function (value) {\n          return value >= 0\n        }\n      }\n    }\n  })\n  ```\n\n- **See also:** [Props](../guide/components.html#Props)\n\n### propsData\n\n- **Type:** `{ [key: string]: any }`\n\n- **Restriction:** only respected in instance creation via `new`.\n\n- **Details:**\n\n  Pass props to an instance during its creation. This is primarily intended to make unit testing easier.\n\n- **Example:**\n\n  ``` js\n  var Comp = Vue.extend({\n    props: ['msg'],\n    template: '<div>{{ msg }}</div>'\n  })\n\n  var vm = new Comp({\n    propsData: {\n      msg: 'hello'\n    }\n  })\n  ```\n\n### computed\n\n- **Type:** `{ [key: string]: Function | { get: Function, set: Function } }`\n\n- **Details:**\n\n  Computed properties to be mixed into the Vue instance. All getters and setters have their `this` context automatically bound to the Vue instance.\n\n  <p class=\"tip\">Note that __you should not use an arrow function to define a computed property__ (e.g. `aDouble: () => this.a * 2`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.a` will be undefined.</p>\n\n  Computed properties are cached, and only re-computed on reactive dependency changes. Note that if a certain dependency is out of the instance's scope (i.e. not reactive), the computed property will __not__ be updated.\n\n- **Example:**\n\n  ```js\n  var vm = new Vue({\n    data: { a: 1 },\n    computed: {\n      // get only, just need a function\n      aDouble: function () {\n        return this.a * 2\n      },\n      // both get and set\n      aPlus: {\n        get: function () {\n          return this.a + 1\n        },\n        set: function (v) {\n          this.a = v - 1\n        }\n      }\n    }\n  })\n  vm.aPlus   // -> 2\n  vm.aPlus = 3\n  vm.a       // -> 2\n  vm.aDouble // -> 4\n  ```\n\n- **See also:**\n  - [Computed Properties](../guide/computed.html)\n\n### methods\n\n- **Type:** `{ [key: string]: Function }`\n\n- **Details:**\n\n  Methods to be mixed into the Vue instance. You can access these methods directly on the VM instance, or use them in directive expressions. All methods will have their `this` context automatically bound to the Vue instance.\n\n  <p class=\"tip\">Note that __you should not use an arrow function to define a method__ (e.g. `plus: () => this.a++`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.a` will be undefined.</p>\n\n- **Example:**\n\n  ```js\n  var vm = new Vue({\n    data: { a: 1 },\n    methods: {\n      plus: function () {\n        this.a++\n      }\n    }\n  })\n  vm.plus()\n  vm.a // 2\n  ```\n\n- **See also:** [Methods and Event Handling](../guide/events.html)\n\n### watch\n\n- **Type:** `{ [key: string]: string | Function | Object }`\n\n- **Details:**\n\n  An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. The Vue instance will call `$watch()` for each entry in the object at instantiation.\n\n- **Example:**\n\n  ``` js\n  var vm = new Vue({\n    data: {\n      a: 1,\n      b: 2,\n      c: 3\n    },\n    watch: {\n      a: function (val, oldVal) {\n        console.log('new: %s, old: %s', val, oldVal)\n      },\n      // string method name\n      b: 'someMethod',\n      // deep watcher\n      c: {\n        handler: function (val, oldVal) { /* ... */ },\n        deep: true\n      }\n    }\n  })\n  vm.a = 2 // -> new: 2, old: 1\n  ```\n\n  <p class=\"tip\">Note that __you should not use an arrow function to define a watcher__ (e.g. `searchQuery: newValue => this.updateAutocomplete(newValue)`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.updateAutocomplete` will be undefined.</p>\n\n- **See also:** [Instance Methods - vm.$watch](#vm-watch)\n\n## Options / DOM\n\n### el\n\n- **Type:** `string | HTMLElement`\n\n- **Restriction:** only respected in instance creation via `new`.\n\n- **Details:**\n\n  Provide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement.\n\n  After the instance is mounted, the resolved element will be accessible as `vm.$el`.\n\n  If this option is available at instantiation, the instance will immediately enter compilation; otherwise, the user will have to explicitly call `vm.$mount()` to manually start the compilation.\n\n  <p class=\"tip\">The provided element merely serves as a mounting point. Unlike in Vue 1.x, the mounted element will be replaced with Vue-generated DOM in all cases. It is therefore not recommended to mount the root instance to `<html>` or `<body>`.</p>\n\n  <p class=\"tip\">If neither `render` function nor `template` option is present, the in-DOM HTML of the mounting DOM element will be extracted as the template. In this case, Runtime + Compiler build of Vue should be used.</p>\n\n- **See also:**\n  - [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n  - [Runtime + Compiler vs. Runtime-only](../guide/installation.html#Runtime-Compiler-vs-Runtime-only)\n\n### template\n\n- **Type:** `string`\n\n- **Details:**\n\n  A string template to be used as the markup for the Vue instance. The template will **replace** the mounted element. Any existing markup inside the mounted element will be ignored, unless content distribution slots are present in the template.\n\n  If the string starts with `#` it will be used as a querySelector and use the selected element's innerHTML as the template string. This allows the use of the common `<script type=\"x-template\">` trick to include templates.\n\n  <p class=\"tip\">From a security perspective, you should only use Vue templates that you can trust. Never use user-generated content as your template.</p>\n\n  <p class=\"tip\">If render function is present in the Vue option, the template will be ignored.</p>\n\n- **See also:**\n  - [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n  - [Content Distribution](../guide/components.html#Content-Distribution-with-Slots)\n\n### render\n\n  - **Type:** `(createElement: () => VNode) => VNode`\n\n  - **Details:**\n\n    An alternative to string templates allowing you to leverage the full programmatic power of JavaScript. The render function receives a `createElement` method as it's first argument used to create `VNode`s.\n\n    If the component is a functional component, the render function also receives an extra argument `context`, which provides access to contextual data since functional components are instance-less.\n\n    <p class=\"tip\">The `render` function has priority over the render function compiled from `template` option or in-DOM HTML template of the mounting element which is specified by the `el` option.</p>\n\n  - **See also:**\n    - [Render Functions](../guide/render-function)\n\n### renderError\n\n> New in 2.2.0\n\n  - **Type:** `(createElement: () => VNode, error: Error) => VNode`\n\n  - **Details:**\n\n    **Only works in development mode.**\n\n    Provide an alternative render output when the default `render` function encounters an error. The error will be passed to `renderError` as the second argument. This is particularly useful when used together with hot-reload.\n\n  - **Example:**\n\n    ``` js\n    new Vue({\n      render (h) {\n        throw new Error('oops')\n      },\n      renderError (h, err) {\n        return h('pre', { style: { color: 'red' }}, err.stack)\n      }\n    }).$mount('#app')\n    ```\n\n  - **See also:**\n    - [Render Functions](../guide/render-function)\n\n## Options / Lifecycle Hooks\n\nAll lifecycle hooks automatically have their `this` context bound to the instance, so that you can access data, computed properties, and methods. This means __you should not use an arrow function to define a lifecycle method__ (e.g. `created: () => this.fetchTodos()`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.fetchTodos` will be undefined.\n\n### beforeCreate\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called synchronously after the instance has just been initialized, before data observation and event/watcher setup.\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### created\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called synchronously after the instance is created. At this stage, the instance has finished processing the options which means the following have been set up: data observation, computed properties, methods, watch/event callbacks. However, the mounting phase has not been started, and the `$el` property will not be available yet.\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### beforeMount\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called right before the mounting begins: the `render` function is about to be called for the first time.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### mounted\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after the instance has just been mounted where `el` is replaced by the newly created `vm.$el`. If the root instance is mounted to an in-document element, `vm.$el` will also be in-document when `mounted` is called.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### beforeUpdate\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when the data changes, before the virtual DOM is re-rendered and patched.\n\n  You can perform further state changes in this hook and they will not trigger additional re-renders.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### updated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after a data change causes the virtual DOM to be re-rendered and patched.\n\n  The component's DOM will have been updated when this hook is called, so you can perform DOM-dependent operations here. However, in most cases you should avoid changing state inside the hook. To react to state changes, it's usually better to use a [computed property](#computed) or [watcher](#watch) instead.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### activated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when a kept-alive component is activated.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:**\n  - [Built-in Components - keep-alive](#keep-alive)\n  - [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### deactivated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when a kept-alive component is deactivated.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:**\n  - [Built-in Components - keep-alive](#keep-alive)\n  - [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### beforeDestroy\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called right before a Vue instance is destroyed. At this stage the instance is still fully functional.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### destroyed\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after a Vue instance has been destroyed. When this hook is called, all directives of the Vue instance have been unbound, all event listeners have been removed, and all child Vue instances have also been destroyed.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n## Options / Assets\n\n### directives\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of directives to be made available to the Vue instance.\n\n- **See also:**\n  - [Custom Directives](../guide/custom-directive.html)\n\n### filters\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of filters to be made available to the Vue instance.\n\n- **See also:**\n  - [`Vue.filter`](#Vue-filter)\n\n### components\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of components to be made available to the Vue instance.\n\n- **See also:**\n  - [Components](../guide/components.html)\n\n## Options / Composition\n\n### parent\n\n- **Type:** `Vue instance`\n\n- **Details:**\n\n  Specify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as `this.$parent` for the child, and the child will be pushed into the parent's `$children` array.\n\n  <p class=\"tip\">Use `$parent` and `$children` sparingly - they mostly serve as an escape-hatch. Prefer using props and events for parent-child communication.</p>\n\n### mixins\n\n- **Type:** `Array<Object>`\n\n- **Details:**\n\n  The `mixins` option accepts an array of mixin objects. These mixin objects can contain instance options just like normal instance objects, and they will be merged against the eventual options using the same option merging logic in `Vue.extend()`. e.g. If your mixin contains a created hook and the component itself also has one, both functions will be called.\n\n  Mixin hooks are called in the order they are provided, and called before the component's own hooks.\n\n- **Example:**\n\n  ``` js\n  var mixin = {\n    created: function () { console.log(1) }\n  }\n  var vm = new Vue({\n    created: function () { console.log(2) },\n    mixins: [mixin]\n  })\n  // -> 1\n  // -> 2\n  ```\n\n- **See also:** [Mixins](../guide/mixins.html)\n\n### extends\n\n- **Type:** `Object | Function`\n\n- **Details:**\n\n  Allows declaratively extending another component (could be either a plain options object or a constructor) without having to use `Vue.extend`. This is primarily intended to make it easier to extend between single file components.\n\n  This is similar to `mixins`, the difference being that the component's own options takes higher priority than the source component being extended.\n\n- **Example:**\n\n  ``` js\n  var CompA = { ... }\n\n  // extend CompA without having to call Vue.extend on either\n  var CompB = {\n    extends: CompA,\n    ...\n  }\n  ```\n\n### provide / inject\n\n> New in 2.2.0\n\n- **Type:**\n  - **provide:** `Object | () => Object`\n  - **inject:** `Array<string> | { [key: string]: string | Symbol }`\n\n- **Details:**\n\n  <p class=\"tip\">`provide` and `inject` are primarily provided for advanced plugin / component library use cases. It is NOT recommended to use them in generic application code.</p>\n\n  This pair of options are used together to allow an ancestor component to serve as a dependency injector for its all descendants, regardless of how deep the component hierarchy is, as long as they are in the same parent chain. If you are familiar with React, this is very similar to React's context feature.\n\n  The `provide` option should be an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use ES2015 Symbols as keys in this object, but only in environments that natively support `Symbol` and `Reflect.ownKeys`.\n\n  The `inject` options should be either an Array of strings or an object where the keys stand for the local binding name, and the value being the key (string or Symbol) to search for in available injections.\n\n  > Note: the `provide` and `inject` bindings are NOT reactive. This is intentional. However, if you pass down an observed object, properties on that object do remain reactive.\n\n- **Example:**\n\n  ``` js\n  var Provider = {\n    provide: {\n      foo: 'bar'\n    },\n    // ...\n  }\n\n  var Child = {\n    inject: ['foo'],\n    created () {\n      console.log(this.foo) // -> \"bar\"\n    }\n    // ...\n  }\n  ```\n\n  With ES2015 Symbols, function `provide` and object `inject`:\n  ``` js\n  const s = Symbol()\n\n  const Provider = {\n    provide () {\n      return {\n        [s]: 'foo'\n      }\n    }\n  }\n\n  const Child = {\n    inject: { s },\n    // ...\n  }\n  ```\n\n  > The next 2 examples only work with Vue > 2.2.1. Below that version, injected values were resolved after the `props` and the `data` initialization.\n\n  Using an injected value as the default for a prop:\n  ```js\n  const Child = {\n    inject: ['foo'],\n    props: {\n      bar: {\n        default () {\n          return this.foo\n        }\n      }\n    }\n  }\n  ```\n\n  Using an injected value as data entry:\n  ```js\n  const Child = {\n    inject: ['foo'],\n    data () {\n      return {\n        bar: this.foo\n      }\n    }\n  }\n  ```\n\n## Options / Misc\n\n### name\n\n- **Type:** `string`\n\n- **Restriction:** only respected when used as a component option.\n\n- **Details:**\n\n  Allow the component to recursively invoke itself in its template. Note that when a component is registered globally with `Vue.component()`, the global ID is automatically set as its name.\n\n  Another benefit of specifying a `name` option is debugging. Named components result in more helpful warning messages. Also, when inspecting an app in the [vue-devtools](https://github.com/vuejs/vue-devtools), unnamed components will show up as `<AnonymousComponent>`, which isn't very informative. By providing the `name` option, you will get a much more informative component tree.\n\n### delimiters\n\n- **Type:** `Array<string>`\n\n- **default:** `{% raw %}[\"{{\", \"}}\"]{% endraw %}`\n\n- **Details:**\n\n  Change the plain text interpolation delimiters. **This option is only available in the full build.**\n\n- **Example:**\n\n  ``` js\n  new Vue({\n    delimiters: ['${', '}']\n  })\n\n  // Delimiters changed to ES6 template string style\n  ```\n\n### functional\n\n- **Type:** `boolean`\n\n- **Details:**\n\n  Causes a component to be stateless (no `data`) and instanceless (no `this` context). They are simply a `render` function that returns virtual nodes making them much cheaper to render.\n\n- **See also:** [Functional Components](../guide/render-function.html#Functional-Components)\n\n### model\n\n> New in 2.2.0\n\n- **Type:** `{ prop?: string, event?: string }`\n\n- **Details:**\n\n  Allows a custom component to customize the prop and event used when it's used with `v-model`. By default, `v-model` on a component uses `value` as the prop and `input` as the event, but some input types such as checkboxes and radio buttons may want to use the `value` prop for a different purpose. Using the `model` option can avoid the conflict in such cases.\n\n- **Example:**\n\n  ``` js\n  Vue.component('my-checkbox', {\n    model: {\n      prop: 'checked',\n      event: 'change'\n    },\n    props: {\n      // this allows using the `value` prop for a different purpose\n      value: String,\n      // use `checked` as the prop which take the place of `value`\n      checked: {\n        type: Number,\n        default: 0\n      }\n    },\n    // ...\n  })\n  ```\n\n  ``` html\n  <my-checkbox v-model=\"foo\" value=\"some value\"></my-checkbox>\n  ```\n\n  The above will be equivalent to:\n\n  ``` html\n  <my-checkbox\n    :checked=\"foo\"\n    @change=\"val => { foo = val }\"\n    value=\"some value\">\n  </my-checkbox>\n  ```\n\n## Instance Properties\n\n### vm.$data\n\n- **Type:** `Object`\n\n- **Details:**\n\n  The data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object.\n\n- **See also:** [Options - data](#data)\n\n### vm.$props\n\n> New in 2.2.0\n\n- **Type:** `Object`\n\n- **Details:**\n\n  An object representing the current props a component has received. The Vue instance proxies access to the properties on its props object.\n\n### vm.$el\n\n- **Type:** `HTMLElement`\n\n- **Read only**\n\n- **Details:**\n\n  The root DOM element that the Vue instance is managing.\n\n### vm.$options\n\n- **Type:** `Object`\n\n- **Read only**\n\n- **Details:**\n\n  The instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options:\n\n  ``` js\n  new Vue({\n    customOption: 'foo',\n    created: function () {\n      console.log(this.$options.customOption) // -> 'foo'\n    }\n  })\n  ```\n\n### vm.$parent\n\n- **Type:** `Vue instance`\n\n- **Read only**\n\n- **Details:**\n\n  The parent instance, if the current instance has one.\n\n### vm.$root\n\n- **Type:** `Vue instance`\n\n- **Read only**\n\n- **Details:**\n\n  The root Vue instance of the current component tree. If the current instance has no parents this value will be itself.\n\n### vm.$children\n\n- **Type:** `Array<Vue instance>`\n\n- **Read only**\n\n- **Details:**\n\n  The direct child components of the current instance. **Note there's no order guarantee for `$children`, and it is not reactive.** If you find yourself trying to use `$children` for data binding, consider using an Array and `v-for` to generate child components, and use the Array as the source of truth.\n\n### vm.$slots\n\n- **Type:** `{ [name: string]: ?Array<VNode> }`\n\n- **Read only**\n\n- **Details:**\n\n  Used to programmatically access content [distributed by slots](../guide/components.html#Content-Distribution-with-Slots). Each [named slot](../guide/components.html#Named-Slots) has its own corresponding property (e.g. the contents of `slot=\"foo\"` will be found at `vm.$slots.foo`). The `default` property contains any nodes not included in a named slot.\n\n  Accessing `vm.$slots` is most useful when writing a component with a [render function](../guide/render-function.html).\n\n- **Example:**\n\n  ```html\n  <blog-post>\n    <h1 slot=\"header\">\n      About Me\n    </h1>\n\n    <p>Here's some page content, which will be included in vm.$slots.default, because it's not inside a named slot.</p>\n\n    <p slot=\"footer\">\n      Copyright 2016 Evan You\n    </p>\n\n    <p>If I have some content down here, it will also be included in vm.$slots.default.</p>.\n  </blog-post>\n  ```\n\n  ```js\n  Vue.component('blog-post', {\n    render: function (createElement) {\n      var header = this.$slots.header\n      var body   = this.$slots.default\n      var footer = this.$slots.footer\n      return createElement('div', [\n        createElement('header', header),\n        createElement('main', body),\n        createElement('footer', footer)\n      ])\n    }\n  })\n  ```\n\n- **See also:**\n  - [`<slot>` Component](#slot-1)\n  - [Content Distribution with Slots](../guide/components.html#Content-Distribution-with-Slots)\n  - [Render Functions: Slots](../guide/render-function.html#Slots)\n\n### vm.$scopedSlots\n\n> New in 2.1.0\n\n- **Type:** `{ [name: string]: props => VNode | Array<VNode> }`\n\n- **Read only**\n\n- **Details:**\n\n  Used to programmatically access [scoped slots](../guide/components.html#Scoped-Slots). For each slot, including the `default` one, the object contains a corresponding function that returns VNodes.\n\n  Accessing `vm.$scopedSlots` is most useful when writing a component with a [render function](../guide/render-function.html).\n\n- **See also:**\n  - [`<slot>` Component](#slot-1)\n  - [Scoped Slots](../guide/components.html#Scoped-Slots)\n  - [Render Functions: Slots](../guide/render-function.html#Slots)\n\n### vm.$refs\n\n- **Type:** `Object`\n\n- **Read only**\n\n- **Details:**\n\n  An object that holds child components that have `ref` registered.\n\n- **See also:**\n  - [Child Component Refs](../guide/components.html#Child-Component-Refs)\n  - [ref](#ref)\n\n### vm.$isServer\n\n- **Type:** `boolean`\n\n- **Read only**\n\n- **Details:**\n\n  Whether the current Vue instance is running on the server.\n\n- **See also:** [Server-Side Rendering](../guide/ssr.html)\n\n## Instance Methods / Data\n\n<h3 id=\"vm-watch\">vm.$watch( expOrFn, callback, [options] )</h3>\n\n- **Arguments:**\n  - `{string | Function} expOrFn`\n  - `{Function} callback`\n  - `{Object} [options]`\n    - `{boolean} deep`\n    - `{boolean} immediate`\n\n- **Returns:** `{Function} unwatch`\n\n- **Usage:**\n\n  Watch an expression or a computed function on the Vue instance for changes. The callback gets called with the new value and the old value. The expression only accepts simple dot-delimited paths. For more complex expression, use a function instead.\n\n<p class=\"tip\">Note: when mutating (rather than replacing) an Object or an Array, the old value will be the same as new value because they reference the same Object/Array. Vue doesn't keep a copy of the pre-mutate value.</p>\n\n- **Example:**\n\n  ``` js\n  // keypath\n  vm.$watch('a.b.c', function (newVal, oldVal) {\n    // do something\n  })\n\n  // function\n  vm.$watch(\n    function () {\n      return this.a + this.b\n    },\n    function (newVal, oldVal) {\n      // do something\n    }\n  )\n  ```\n\n  `vm.$watch` returns an unwatch function that stops firing the callback:\n\n  ``` js\n  var unwatch = vm.$watch('a', cb)\n  // later, teardown the watcher\n  unwatch()\n  ```\n\n- **Option: deep**\n\n  To also detect nested value changes inside Objects, you need to pass in `deep: true` in the options argument. Note that you don't need to do so to listen for Array mutations.\n\n  ``` js\n  vm.$watch('someObject', callback, {\n    deep: true\n  })\n  vm.someObject.nestedValue = 123\n  // callback is fired\n  ```\n\n- **Option: immediate**\n\n  Passing in `immediate: true` in the option will trigger the callback immediately with the current value of the expression:\n\n  ``` js\n  vm.$watch('a', callback, {\n    immediate: true\n  })\n  // callback is fired immediately with current value of `a`\n  ```\n\n<h3 id=\"vm-set\">vm.$set( target, key, value )</h3>\n\n- **Arguments:**\n  - `{Object | Array} target`\n  - `{string | number} key`\n  - `{any} value`\n\n- **Returns:** the set value.\n\n- **Usage:**\n\n  This is the **alias** of the global `Vue.set`.\n\n- **See also:** [Vue.set](#Vue-set)\n\n<h3 id=\"vm-delete\">vm.$delete( target, key )</h3>\n\n- **Arguments:**\n  - `{Object | Array} target`\n  - `{string | number} key`\n\n- **Usage:**\n\n  This is the **alias** of the global `Vue.delete`.\n\n- **See also:** [Vue.delete](#Vue-delete)\n\n## Instance Methods / Events\n\n<h3 id=\"vm-on\">vm.$on( event, callback )</h3>\n\n- **Arguments:**\n  - `{string | Array<string>} event` (array only supported in 2.2.0+)\n  - `{Function} callback`\n\n- **Usage:**\n\n  Listen for a custom event on the current vm. Events can be triggered by `vm.$emit`. The callback will receive all the additional arguments passed into these event-triggering methods.\n\n- **Example:**\n\n  ``` js\n  vm.$on('test', function (msg) {\n    console.log(msg)\n  })\n  vm.$emit('test', 'hi')\n  // -> \"hi\"\n  ```\n\n<h3 id=\"vm-once\">vm.$once( event, callback )</h3>\n\n- **Arguments:**\n  - `{string} event`\n  - `{Function} callback`\n\n- **Usage:**\n\n  Listen for a custom event, but only once. The listener will be removed once it triggers for the first time.\n\n<h3 id=\"vm-off\">vm.$off( [event, callback] )</h3>\n\n- **Arguments:**\n  - `{string} [event]`\n  - `{Function} [callback]`\n\n- **Usage:**\n\n  Remove custom event listener(s).\n\n  - If no arguments are provided, remove all event listeners;\n\n  - If only the event is provided, remove all listeners for that event;\n\n  - If both event and callback are given, remove the listener for that specific callback only.\n\n<h3 id=\"vm-emit\">vm.$emit( event, [...args] )</h3>\n\n- **Arguments:**\n  - `{string} event`\n  - `[...args]`\n\n  Trigger an event on the current instance. Any additional arguments will be passed into the listener's callback function.\n\n## Instance Methods / Lifecycle\n\n<h3 id=\"vm-mount\">vm.$mount( [elementOrSelector] )</h3>\n\n- **Arguments:**\n  - `{Element | string} [elementOrSelector]`\n  - `{boolean} [hydrating]`\n\n- **Returns:** `vm` - the instance itself\n\n- **Usage:**\n\n  If a Vue instance didn't receive the `el` option at instantiation, it will be in \"unmounted\" state, without an associated DOM element. `vm.$mount()` can be used to manually start the mounting of an unmounted Vue instance.\n\n  If `elementOrSelector` argument is not provided, the template will be rendered as an off-document element, and you will have to use native DOM API to insert it into the document yourself.\n\n  The method returns the instance itself so you can chain other instance methods after it.\n\n- **Example:**\n\n  ``` js\n  var MyComponent = Vue.extend({\n    template: '<div>Hello!</div>'\n  })\n\n  // create and mount to #app (will replace #app)\n  new MyComponent().$mount('#app')\n\n  // the above is the same as:\n  new MyComponent({ el: '#app' })\n\n  // or, render off-document and append afterwards:\n  var component = new MyComponent().$mount()\n  document.getElementById('app').appendChild(component.$el)\n  ```\n\n- **See also:**\n  - [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n  - [Server-Side Rendering](../guide/ssr.html)\n\n<h3 id=\"vm-forceUpdate\">vm.$forceUpdate()</h3>\n\n- **Usage:**\n\n  Force the Vue instance to re-render. Note it does not affect all child components, only the instance itself and child components with inserted slot content.\n\n<h3 id=\"vm-nextTick\">vm.$nextTick( [callback] )</h3>\n\n- **Arguments:**\n  - `{Function} [callback]`\n\n- **Usage:**\n\n  Defer the callback to be executed after the next DOM update cycle. Use it immediately after you've changed some data to wait for the DOM update. This is the same as the global `Vue.nextTick`, except that the callback's `this` context is automatically bound to the instance calling this method.\n\n  > New in 2.1.0: returns a Promise if no callback is provided and Promise is supported in the execution environment.\n\n- **Example:**\n\n  ``` js\n  new Vue({\n    // ...\n    methods: {\n      // ...\n      example: function () {\n        // modify data\n        this.message = 'changed'\n        // DOM is not updated yet\n        this.$nextTick(function () {\n          // DOM is now updated\n          // `this` is bound to the current instance\n          this.doSomethingElse()\n        })\n      }\n    }\n  })\n  ```\n\n- **See also:**\n  - [Vue.nextTick](#Vue-nextTick)\n  - [Async Update Queue](../guide/reactivity.html#Async-Update-Queue)\n\n<h3 id=\"vm-destroy\">vm.$destroy()</h3>\n\n- **Usage:**\n\n  Completely destroy a vm. Clean up its connections with other existing vms, unbind all its directives, turn off all event listeners.\n\n  Triggers the `beforeDestroy` and `destroyed` hooks.\n\n  <p class=\"tip\">In normal use cases you shouldn't have to call this method yourself. Prefer controlling the lifecycle of child components in a data-driven fashion using `v-if` and `v-for`.</p>\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n## Directives\n\n### v-text\n\n- **Expects:** `string`\n\n- **Details:**\n\n  Updates the element's `textContent`. If you need to update the part of `textContent`, you should use `{% raw %}{{ Mustache }}{% endraw %}` interpolations.\n\n- **Example:**\n\n  ```html\n  <span v-text=\"msg\"></span>\n  <!-- same as -->\n  <span>{{msg}}</span>\n  ```\n\n- **See also:** [Data Binding Syntax - interpolations](../guide/syntax.html#Text)\n\n### v-html\n\n- **Expects:** `string`\n\n- **Details:**\n\n  Updates the element's `innerHTML`. **Note that the contents are inserted as plain HTML - they will not be compiled as Vue templates**. If you find yourself trying to compose templates using `v-html`, try to rethink the solution by using components instead.\n\n  <p class=\"tip\">Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to [XSS attacks](https://en.wikipedia.org/wiki/Cross-site_scripting). Only use `v-html` on trusted content and **never** on user-provided content.</p>\n\n- **Example:**\n\n  ```html\n  <div v-html=\"html\"></div>\n  ```\n- **See also:** [Data Binding Syntax - interpolations](../guide/syntax.html#Raw-HTML)\n\n### v-show\n\n- **Expects:** `any`\n\n- **Usage:**\n\n  Toggle's the element's `display` CSS property based on the truthy-ness of the expression value.\n\n  This directive triggers transitions when its condition changes.\n\n- **See also:** [Conditional Rendering - v-show](../guide/conditional.html#v-show)\n\n### v-if\n\n- **Expects:** `any`\n\n- **Usage:**\n\n  Conditionally render the element based on the truthy-ness of the expression value. The element and its contained directives / components are destroyed and re-constructed during toggles. If the element is a `<template>` element, its content will be extracted as the conditional block.\n\n  This directive triggers transitions when its condition changes.\n\n  <p class=\"tip\">When used together with v-if, v-for has a higher priority than v-if. See the <a href=\"../guide/list.html#v-for-with-v-if\">list rendering guide</a> for details.</p>\n\n- **See also:** [Conditional Rendering - v-if](../guide/conditional.html)\n\n### v-else\n\n- **Does not expect expression**\n\n- **Restriction:** previous sibling element must have `v-if` or `v-else-if`.\n\n- **Usage:**\n\n  Denote the \"else block\" for `v-if` or a `v-if`/`v-else-if` chain.\n\n  ```html\n  <div v-if=\"Math.random() > 0.5\">\n    Now you see me\n  </div>\n  <div v-else>\n    Now you don't\n  </div>\n  ```\n\n- **See also:**\n  - [Conditional Rendering - v-else](../guide/conditional.html#v-else)\n\n### v-else-if\n\n> New in 2.1.0\n\n- **Expects:** `any`\n\n- **Restriction:** previous sibling element must have `v-if` or `v-else-if`.\n\n- **Usage:**\n\n  Denote the \"else if block\" for `v-if`. Can be chained.\n\n  ```html\n  <div v-if=\"type === 'A'\">\n    A\n  </div>\n  <div v-else-if=\"type === 'B'\">\n    B\n  </div>\n  <div v-else-if=\"type === 'C'\">\n    C\n  </div>\n  <div v-else>\n    Not A/B/C\n  </div>\n  ```\n\n- **See also:** [Conditional Rendering - v-else-if](../guide/conditional.html#v-else-if)\n\n### v-for\n\n- **Expects:** `Array | Object | number | string`\n\n- **Usage:**\n\n  Render the element or template block multiple times based on the source data. The directive's value must use the special syntax `alias in expression` to provide an alias for the current element being iterated on:\n\n  ``` html\n  <div v-for=\"item in items\">\n    {{ item.text }}\n  </div>\n  ```\n\n  Alternatively, you can also specify an alias for the index (or the key if used on an Object):\n\n  ``` html\n  <div v-for=\"(item, index) in items\"></div>\n  <div v-for=\"(val, key) in object\"></div>\n  <div v-for=\"(val, key, index) in object\"></div>\n  ```\n\n  The default behavior of `v-for` will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the `key` special attribute:\n\n  ``` html\n  <div v-for=\"item in items\" :key=\"item.id\">\n    {{ item.text }}\n  </div>\n  ```\n\n  <p class=\"tip\">When used together with v-if, v-for has a higher priority than v-if. See the <a href=\"../guide/list.html#v-for-with-v-if\">list rendering guide</a> for details.</p>\n\n  The detailed usage for `v-for` is explained in the guide section linked below.\n\n- **See also:**\n  - [List Rendering](../guide/list.html)\n  - [key](../guide/list.html#key)\n\n### v-on\n\n- **Shorthand:** `@`\n\n- **Expects:** `Function | Inline Statement`\n\n- **Argument:** `event (required)`\n\n- **Modifiers:**\n  - `.stop` - call `event.stopPropagation()`.\n  - `.prevent` - call `event.preventDefault()`.\n  - `.capture` - add event listener in capture mode.\n  - `.self` - only trigger handler if event was dispatched from this element.\n  - `.{keyCode | keyAlias}` - only trigger handler on certain keys.\n  - `.native` - listen for a native event on the root element of component.\n  - `.once` - trigger handler at most once.\n  - `.left` - (2.2.0+) only trigger handler for left button mouse events.\n  - `.right` - (2.2.0+) only trigger handler for right button mouse events.\n  - `.middle` - (2.2.0+) only trigger handler for middle button mouse events.\n  - `.passive` - (2.3.0+) attaches a DOM event with `{ passive: true }`.\n\n- **Usage:**\n\n  Attaches an event listener to the element. The event type is denoted by the argument. The expression can either be a method name or an inline statement, or simply omitted when there are modifiers present.\n\n  When used on a normal element, it listens to **native DOM events** only. When used on a custom element component, it also listens to **custom events** emitted on that child component.\n\n  When listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special `$event` property: `v-on:click=\"handle('ok', $event)\"`.\n\n- **Example:**\n\n  ```html\n  <!-- method handler -->\n  <button v-on:click=\"doThis\"></button>\n\n  <!-- inline statement -->\n  <button v-on:click=\"doThat('hello', $event)\"></button>\n\n  <!-- shorthand -->\n  <button @click=\"doThis\"></button>\n\n  <!-- stop propagation -->\n  <button @click.stop=\"doThis\"></button>\n\n  <!-- prevent default -->\n  <button @click.prevent=\"doThis\"></button>\n\n  <!-- prevent default without expression -->\n  <form @submit.prevent></form>\n\n  <!-- chain modifiers -->\n  <button @click.stop.prevent=\"doThis\"></button>\n\n  <!-- key modifier using keyAlias -->\n  <input @keyup.enter=\"onEnter\">\n\n  <!-- key modifier using keyCode -->\n  <input @keyup.13=\"onEnter\">\n\n  <!-- the click event will be triggered at most once -->\n  <button v-on:click.once=\"doThis\"></button>\n  ```\n\n  Listening to custom events on a child component (the handler is called when \"my-event\" is emitted on the child):\n\n  ```html\n  <my-component @my-event=\"handleThis\"></my-component>\n\n  <!-- inline statement -->\n  <my-component @my-event=\"handleThis(123, $event)\"></my-component>\n\n  <!-- native event on component -->\n  <my-component @click.native=\"onClick\"></my-component>\n  ```\n\n- **See also:**\n  - [Methods and Event Handling](../guide/events.html)\n  - [Components - Custom Events](../guide/components.html#Custom-Events)\n\n### v-bind\n\n- **Shorthand:** `:`\n\n- **Expects:** `any (with argument) | Object (without argument)`\n\n- **Argument:** `attrOrProp (optional)`\n\n- **Modifiers:**\n  - `.prop` - Bind as a DOM property instead of an attribute. ([what's the difference?](http://stackoverflow.com/questions/6003819/properties-and-attributes-in-html#answer-6004028))\n  - `.camel` - (2.1.0+) transform the kebab-case attribute name into camelCase.\n  - `.sync` - (2.3.0+) a syntax sugar that expands into a `v-on` handler for updating the bound value.\n\n- **Usage:**\n\n  Dynamically bind one or more attributes, or a component prop to an expression.\n\n  When used to bind the `class` or `style` attribute, it supports additional value types such as Array or Objects. See linked guide section below for more details.\n\n  When used for prop binding, the prop must be properly declared in the child component.\n\n  When used without an argument, can be used to bind an object containing attribute name-value pairs. Note in this mode `class` and `style` does not support Array or Objects.\n\n- **Example:**\n\n  ```html\n  <!-- bind an attribute -->\n  <img v-bind:src=\"imageSrc\">\n\n  <!-- shorthand -->\n  <img :src=\"imageSrc\">\n\n  <!-- with inline string concatenation -->\n  <img :src=\"'/path/to/images/' + fileName\">\n\n  <!-- class binding -->\n  <div :class=\"{ red: isRed }\"></div>\n  <div :class=\"[classA, classB]\"></div>\n  <div :class=\"[classA, { classB: isB, classC: isC }]\">\n\n  <!-- style binding -->\n  <div :style=\"{ fontSize: size + 'px' }\"></div>\n  <div :style=\"[styleObjectA, styleObjectB]\"></div>\n\n  <!-- binding an object of attributes -->\n  <div v-bind=\"{ id: someProp, 'other-attr': otherProp }\"></div>\n\n  <!-- DOM attribute binding with prop modifier -->\n  <div v-bind:text-content.prop=\"text\"></div>\n\n  <!-- prop binding. \"prop\" must be declared in my-component. -->\n  <my-component :prop=\"someThing\"></my-component>\n\n  <!-- pass down parent props in common with a child component -->\n  <child-component v-bind=\"$props\"></child-component>\n\n  <!-- XLink -->\n  <svg><a :xlink:special=\"foo\"></a></svg>\n  ```\n\n  The `.camel` modifier allows camelizing a `v-bind` attribute name when using in-DOM templates, e.g. the SVG `viewBox` attribute:\n\n  ``` html\n  <svg :view-box.camel=\"viewBox\"></svg>\n  ```\n\n  `.camel` is not needed if you are using string templates, or compiling with `vue-loader`/`vueify`.\n\n- **See also:**\n  - [Class and Style Bindings](../guide/class-and-style.html)\n  - [Components - Component Props](../guide/components.html#Props)\n  - [Components - `.sync` Modifier](../guide/components.html#sync-Modifier)\n\n### v-model\n\n- **Expects:** varies based on value of form inputs element or output of components\n\n- **Limited to:**\n  - `<input>`\n  - `<select>`\n  - `<textarea>`\n  - components\n\n- **Modifiers:**\n  - [`.lazy`](../guide/forms.html#lazy) - listen to `change` events instead of `input`\n  - [`.number`](../guide/forms.html#number) - cast input string to numbers\n  - [`.trim`](../guide/forms.html#trim) - trim input\n\n- **Usage:**\n\n  Create a two-way binding on a form input element or a component. For detailed usage and other notes, see the Guide section linked below.\n\n- **See also:**\n  - [Form Input Bindings](../guide/forms.html)\n  - [Components - Form Input Components using Custom Events](../guide/components.html#Form-Input-Components-using-Custom-Events)\n\n### v-pre\n\n- **Does not expect expression**\n\n- **Usage:**\n\n  Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.\n\n- **Example:**\n\n  ```html\n  <span v-pre>{{ this will not be compiled }}</span>\n   ```\n\n### v-cloak\n\n- **Does not expect expression**\n\n- **Usage:**\n\n  This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as `[v-cloak] { display: none }`, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.\n\n- **Example:**\n\n  ```css\n  [v-cloak] {\n    display: none;\n  }\n  ```\n\n  ```html\n  <div v-cloak>\n    {{ message }}\n  </div>\n  ```\n\n  The `<div>` will not be visible until the compilation is done.\n\n### v-once\n\n- **Does not expect expression**\n\n- **Details:**\n\n  Render the element and component **once** only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.\n\n  ```html\n  <!-- single element -->\n  <span v-once>This will never change: {{msg}}</span>\n  <!-- the element have children -->\n  <div v-once>\n    <h1>comment</h1>\n    <p>{{msg}}</p>\n  </div>\n  <!-- component -->\n  <my-component v-once :comment=\"msg\"></my-component>\n  <!-- v-for directive -->\n  <ul>\n    <li v-for=\"i in list\" v-once>{{i}}</li>\n  </ul>\n  ```\n\n- **See also:**\n  - [Data Binding Syntax - interpolations](../guide/syntax.html#Text)\n  - [Components - Cheap Static Components with v-once](../guide/components.html#Cheap-Static-Components-with-v-once)\n\n## Special Attributes\n\n### key\n\n- **Expects:** `string`\n\n  The `key` special attribute is primarily used as a hint for Vue's virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.\n\n  Children of the same common parent must have **unique keys**. Duplicate keys will cause render errors.\n\n  The most common use case is combined with `v-for`:\n\n  ``` html\n  <ul>\n    <li v-for=\"item in items\" :key=\"item.id\">...</li>\n  </ul>\n  ```\n\n  It can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:\n\n  - Properly trigger lifecycle hooks of a component\n  - Trigger transitions\n\n  For example:\n\n  ``` html\n  <transition>\n    <span :key=\"text\">{{ text }}</span>\n  </transition>\n  ```\n\n  When `text` changes, the `<span>` will always be replaced instead of patched, so a transition will be triggered.\n\n### ref\n\n- **Expects:** `string`\n\n  `ref` is used to register a reference to an element or a child component. The reference will be registered under the parent component's `$refs` object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance:\n\n  ``` html\n  <!-- vm.$refs.p will be the DOM node -->\n  <p ref=\"p\">hello</p>\n\n  <!-- vm.$refs.child will be the child comp instance -->\n  <child-comp ref=\"child\"></child-comp>\n  ```\n\n  When used on elements/components with `v-for`, the registered reference will be an Array containing DOM nodes or component instances.\n\n  An important note about the ref registration timing: because the refs themselves are created as a result of the render function, you cannot access them on the initial render - they don't exist yet! `$refs` is also non-reactive, therefore you should not attempt to use it in templates for data-binding.\n\n- **See also:** [Child Component Refs](../guide/components.html#Child-Component-Refs)\n\n### slot\n\n- **Expects:** `string`\n\n  Used on content inserted into child components to indicate which named slot the content belongs to.\n\n  For detailed usage, see the guide section linked below.\n\n- **See also:** [Named Slots](../guide/components.html#Named-Slots)\n\n### is\n\n- **Expects:** `string`\n\n  Used for [dynamic components](../guide/components.html#Dynamic-Components) and to work around [limitations of in-DOM templates](../guide/components.html#DOM-Template-Parsing-Caveats).\n\n  For example:\n\n  ``` html\n  <!-- component changes when currentView changes -->\n  <component v-bind:is=\"currentView\"></component>\n\n  <!-- necessary because <my-row> would be invalid inside -->\n  <!-- a <table> element and so would be hoisted out      -->\n  <table>\n    <tr is=\"my-row\"></tr>\n  </table>\n  ```\n\n  For detailed usage, follow the links in the description above.\n\n- **See also:**\n  - [Dynamic Components](../guide/components.html#Dynamic-Components)\n  - [DOM Template Parsing Caveats](../guide/components.html#DOM-Template-Parsing-Caveats)\n\n## Built-In Components\n\n### component\n\n- **Props:**\n  - `is` - string | ComponentDefinition | ComponentConstructor\n  - `inline-template` - boolean\n\n- **Usage:**\n\n  A \"meta component\" for rendering dynamic components. The actual component to render is determined by the `is` prop:\n\n  ```html\n  <!-- a dynamic component controlled by -->\n  <!-- the `componentId` property on the vm -->\n  <component :is=\"componentId\"></component>\n\n  <!-- can also render registered component or component passed as prop -->\n  <component :is=\"$options.components.child\"></component>\n  ```\n\n- **See also:** [Dynamic Components](../guide/components.html#Dynamic-Components)\n\n### transition\n\n- **Props:**\n  - `name` - string, Used to automatically generate transition CSS class names. e.g. `name: 'fade'` will auto expand to `.fade-enter`, `.fade-enter-active`, etc. Defaults to `\"v\"`.\n  - `appear` - boolean, Whether to apply transition on initial render. Defaults to `false`.\n  - `css` - boolean, Whether to apply CSS transition classes. Defaults to `true`. If set to `false`, will only trigger JavaScript hooks registered via component events.\n  - `type` - string, Specify the type of transition events to wait for to determine transition end timing. Available values are `\"transition\"` and `\"animation\"`. By default, it will automatically detect the type that has a longer duration.\n  - `mode` - string, Controls the timing sequence of leaving/entering transitions. Available modes are `\"out-in\"` and `\"in-out\"`; defaults to simultaneous.\n  - `enter-class` - string\n  - `leave-class` - string\n  - `appear-class` - string\n  - `enter-to-class` - string\n  - `leave-to-class` - string\n  - `appear-to-class` - string\n  - `enter-active-class` - string\n  - `leave-active-class` - string\n  - `appear-active-class` - string\n\n- **Events:**\n  - `before-enter`\n  - `before-leave`\n  - `before-appear`\n  - `enter`\n  - `leave`\n  - `appear`\n  - `after-enter`\n  - `after-leave`\n  - `after-appear`\n  - `enter-cancelled`\n  - `leave-cancelled` (`v-show` only)\n  - `appear-cancelled`\n\n- **Usage:**\n\n  `<transition>` serve as transition effects for **single** element/component. The `<transition>` does not render an extra DOM element, nor does it show up in the inspected component hierarchy. It simply applies the transition behavior to the wrapped content inside.\n\n  ```html\n  <!-- simple element -->\n  <transition>\n    <div v-if=\"ok\">toggled content</div>\n  </transition>\n\n  <!-- dynamic component -->\n  <transition name=\"fade\" mode=\"out-in\" appear>\n    <component :is=\"view\"></component>\n  </transition>\n\n  <!-- event hooking -->\n  <div id=\"transition-demo\">\n    <transition @after-enter=\"transitionComplete\">\n      <div v-show=\"ok\">toggled content</div>\n    </transition>\n  </div>\n  ```\n\n  ``` js\n  new Vue({\n    ...\n    methods: {\n      transitionComplete: function (el) {\n        // for passed 'el' that DOM element as the argument, something ...\n      }\n    }\n    ...\n  }).$mount('#transition-demo')\n  ```\n\n- **See also:** [Transitions: Entering, Leaving, and Lists](../guide/transitions.html)\n\n### transition-group\n\n- **Props:**\n  - `tag` - string, defaults to `span`.\n  - `move-class` - overwrite CSS class applied during moving transition.\n  - exposes the same props as `<transition>` except `mode`.\n\n- **Events:**\n  - exposes the same events as `<transition>`.\n\n- **Usage:**\n\n  `<transition-group>` serve as transition effects for **multiple** elements/components. The `<transition-group>` renders a real DOM element. By default it renders a `<span>`, and you can configure what element is should render via the `tag` attribute.\n\n  Note every child in a `<transition-group>` must be **uniquely keyed** for the animations to work properly.\n\n  `<transition-group>` supports moving transitions via CSS transform. When a child's position on screen has changed after an updated, it will get applied a moving CSS class (auto generated from the `name` attribute or configured with the `move-class` attribute). If the CSS `transform` property is \"transition-able\" when the moving class is applied, the element will be smoothly animated to its destination using the [FLIP technique](https://aerotwist.com/blog/flip-your-animations/).\n\n  ```html\n  <transition-group tag=\"ul\" name=\"slide\">\n    <li v-for=\"item in items\" :key=\"item.id\">\n      {{ item.text }}\n    </li>\n  </transition-group>\n  ```\n\n- **See also:** [Transitions: Entering, Leaving, and Lists](../guide/transitions.html)\n\n### keep-alive\n\n- **Props:**\n  - `include` - string or RegExp. Only components matched by this will be cached.\n  - `exclude` - string or RegExp. Any component matched by this will not be cached.\n\n- **Usage:**\n\n  When wrapped around a dynamic component, `<keep-alive>` caches the inactive component instances without destroying them. Similar to `<transition>`, `<keep-alive>` is an abstract component: it doesn't render a DOM element itself, and doesn't show up in the component parent chain.\n\n  When a component is toggled inside `<keep-alive>`, its `activated` and `deactivated` lifecycle hooks will be invoked accordingly.\n\n  > In 2.2.0 and above, `activated` and `deactivated` will fire for all nested components inside a `<keep-alive>` tree.\n\n  Primarily used with preserve component state or avoid re-rendering.\n\n  ```html\n  <!-- basic -->\n  <keep-alive>\n    <component :is=\"view\"></component>\n  </keep-alive>\n\n  <!-- multiple conditional children -->\n  <keep-alive>\n    <comp-a v-if=\"a > 1\"></comp-a>\n    <comp-b v-else></comp-b>\n  </keep-alive>\n\n  <!-- used together with <transition> -->\n  <transition>\n    <keep-alive>\n      <component :is=\"view\"></component>\n    </keep-alive>\n  </transition>\n  ```\n\n- **`include` and `exclude`**\n\n  > New in 2.1.0\n\n  The `include` and `exclude` props allow components to be conditionally cached. Both props can either be a comma-delimited string or a RegExp:\n\n  ``` html\n  <!-- comma-delimited string -->\n  <keep-alive include=\"a,b\">\n    <component :is=\"view\"></component>\n  </keep-alive>\n\n  <!-- regex (use v-bind) -->\n  <keep-alive :include=\"/a|b/\">\n    <component :is=\"view\"></component>\n  </keep-alive>\n  ```\n\n  The match is first checked on the component's own `name` option, then its local registration name (the key in the parent's `components` option) if the `name` option is not available. Anonymous components cannot be matched against.\n\n  <p class=\"tip\">`<keep-alive>` does not work with functional components because they do not have instances to be cached.</p>\n\n- **See also:** [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### slot\n\n- **Props:**\n  - `name` - string, Used for named slot.\n\n- **Usage:**\n\n  `<slot>` serve as content distribution outlets in component templates. `<slot>` itself will be replaced.\n\n  For detailed usage, see the guide section linked below.\n\n- **See also:** [Content Distribution with Slots](../guide/components.html#Content-Distribution-with-Slots)\n\n## VNode Interface\n\n- Please refer to the [VNode class declaration](https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js).\n\n## Server-Side Rendering\n\n- Please refer to the [vue-server-renderer package documentation](https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer).\n","source":"portland/api/index.md","raw":"---\ntype: api\n---\n\n## Global Config\n\n`Vue.config` is an object containing Vue's global configurations. You can modify its properties listed below before bootstrapping your application:\n\n### silent\n\n- **Type:** `boolean`\n\n- **Default:** `false`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.silent = true\n  ```\n\n  Suppress all Vue logs and warnings.\n\n### optionMergeStrategies\n\n- **Type:** `{ [key: string]: Function }`\n\n- **Default:** `{}`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.optionMergeStrategies._my_option = function (parent, child, vm) {\n    return child + 1\n  }\n\n  const Profile = Vue.extend({\n    _my_option: 1\n  })\n\n  // Profile.options._my_option = 2\n  ```\n\n  Define custom merging strategies for options.\n\n  The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument.\n\n- **See also:** [Custom Option Merging Strategies](../guide/mixins.html#Custom-Option-Merge-Strategies)\n\n### devtools\n\n- **Type:** `boolean`\n\n- **Default:** `true` (`false` in production builds)\n\n- **Usage:**\n\n  ``` js\n  // make sure to set this synchronously immediately after loading Vue\n  Vue.config.devtools = true\n  ```\n\n  Configure whether to allow [vue-devtools](https://github.com/vuejs/vue-devtools) inspection. This option's default value is `true` in development builds and `false` in production builds. You can set it to `true` to enable inspection for production builds.\n\n### errorHandler\n\n- **Type:** `Function`\n\n- **Default:** `undefined`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.errorHandler = function (err, vm, info) {\n    // handle error\n    // `info` is a Vue-specific error info, e.g. which lifecycle hook\n    // the error was found in. Only available in 2.2.0+\n  }\n  ```\n\n  Assign a handler for uncaught errors during component render function and watchers. The handler gets called with the error and the Vue instance.\n\n  > In 2.2.0, this hook also captures errors in component lifecycle hooks. Also, when this hook is `undefined`, captured errors will be logged with `console.error` instead of crashing the app.\n\n  > [Sentry](https://sentry.io), an error tracking service, provides [official integration](https://sentry.io/for/vue/) using this option.\n\n### ignoredElements\n\n- **Type:** `Array<string>`\n\n- **Default:** `[]`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.ignoredElements = [\n    'my-custom-web-component', 'another-web-component'\n  ]\n  ```\n\n  Make Vue ignore custom elements defined outside of Vue (e.g., using the Web Components APIs). Otherwise, it will throw a warning about an `Unknown custom element`, assuming that you forgot to register a global component or misspelled a component name.\n\n### keyCodes\n\n- **Type:** `{ [key: string]: number | Array<number> }`\n\n- **Default:** `{}`\n\n- **Usage:**\n\n  ``` js\n  Vue.config.keyCodes = {\n    v: 86,\n    f1: 112,\n    // camelCase won`t work\n    mediaPlayPause: 179,\n    // instead you can use kebab-case with double quotation marks\n    \"media-play-pause\" : 179,\n    up: [38, 87]\n  }\n  ```\n\n  ```html\n  <input type=\"text\" @keyup.media-play-pause=\"method\">\n  ```\n\n  Define custom key alias(es) for v-on.\n\n### performance\n\n> New in 2.2.0\n\n- **Type:** `boolean`\n\n- **Default:** `false (from 2.2.3)`\n\n- **Usage**:\n\n  Set this to `true` to enable component init, compile, render and patch performance tracing in the browser devtool timeline. Only works in development mode and in browsers that support the [performance.mark](https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark) API.\n\n### productionTip\n\n> New in 2.2.0\n\n- **Type:** `boolean`\n\n- **Default:** `true`\n\n- **Usage**:\n\n  Set this to `false` to prevent the production tip on Vue startup.\n\n## Global API\n\n<h3 id=\"Vue-extend\">Vue.extend( options )</h3>\n\n- **Arguments:**\n  - `{Object} options`\n\n- **Usage:**\n\n  Create a \"subclass\" of the base Vue constructor. The argument should be an object containing component options.\n\n  The special case to note here is the `data` option - it must be a function when used with `Vue.extend()`.\n\n  ``` html\n  <div id=\"mount-point\"></div>\n  ```\n\n  ``` js\n  // create constructor\n  var Profile = Vue.extend({\n    template: '<p>{{firstName}} {{lastName}} aka {{alias}}</p>',\n    data: function () {\n      return {\n        firstName: 'Walter',\n        lastName: 'White',\n        alias: 'Heisenberg'\n      }\n    }\n  })\n  // create an instance of Profile and mount it on an element\n  new Profile().$mount('#mount-point')\n  ```\n\n  Will result in:\n\n  ``` html\n  <p>Walter White aka Heisenberg</p>\n  ```\n\n- **See also:** [Components](../guide/components.html)\n\n<h3 id=\"Vue-nextTick\">Vue.nextTick( [callback, context] )</h3>\n\n- **Arguments:**\n  - `{Function} [callback]`\n  - `{Object} [context]`\n\n- **Usage:**\n\n  Defer the callback to be executed after the next DOM update cycle. Use it immediately after you've changed some data to wait for the DOM update.\n\n  ``` js\n  // modify data\n  vm.msg = 'Hello'\n  // DOM not updated yet\n  Vue.nextTick(function () {\n    // DOM updated\n  })\n  ```\n\n  > New in 2.1.0: returns a Promise if no callback is provided and Promise is supported in the execution environment.\n\n- **See also:** [Async Update Queue](../guide/reactivity.html#Async-Update-Queue)\n\n<h3 id=\"Vue-set\">Vue.set( target, key, value )</h3>\n\n- **Arguments:**\n  - `{Object | Array} target`\n  - `{string | number} key`\n  - `{any} value`\n\n- **Returns:** the set value.\n\n- **Usage:**\n\n  Set a property on an object. If the object is reactive, ensure the property is created as a reactive property and trigger view updates. This is primarily used to get around the limitation that Vue cannot detect property additions.\n\n  **Note the object cannot be a Vue instance, or the root data object of a Vue instance.**\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n<h3 id=\"Vue-delete\">Vue.delete( target, key )</h3>\n\n- **Arguments:**\n  - `{Object | Array} target`\n  - `{string | number} key`\n\n- **Usage:**\n\n  Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it.\n\n  > Also works with on Array + index in 2.2.0+.\n\n  <p class=\"tip\">The target object cannot be a Vue instance, or the root data object of a Vue instance.</p>\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n<h3 id=\"Vue-directive\">Vue.directive( id, [definition] )</h3>\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function | Object} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global directive.\n\n  ``` js\n  // register\n  Vue.directive('my-directive', {\n    bind: function () {},\n    inserted: function () {},\n    update: function () {},\n    componentUpdated: function () {},\n    unbind: function () {}\n  })\n\n  // register (simple function directive)\n  Vue.directive('my-directive', function () {\n    // this will be called as `bind` and `update`\n  })\n\n  // getter, return the directive definition if registered\n  var myDirective = Vue.directive('my-directive')\n  ```\n\n- **See also:** [Custom Directives](../guide/custom-directive.html)\n\n<h3 id=\"Vue-filter\">Vue.filter( id, [definition] )</h3>\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global filter.\n\n  ``` js\n  // register\n  Vue.filter('my-filter', function (value) {\n    // return processed value\n  })\n\n  // getter, return the filter if registered\n  var myFilter = Vue.filter('my-filter')\n  ```\n\n<h3 id=\"Vue-component\">Vue.component( id, [definition] )</h3>\n\n- **Arguments:**\n  - `{string} id`\n  - `{Function | Object} [definition]`\n\n- **Usage:**\n\n  Register or retrieve a global component. Registration also automatically sets the component's `name` with the given `id`.\n\n  ``` js\n  // register an extended constructor\n  Vue.component('my-component', Vue.extend({ /* ... */ }))\n\n  // register an options object (automatically call Vue.extend)\n  Vue.component('my-component', { /* ... */ })\n\n  // retrieve a registered component (always return constructor)\n  var MyComponent = Vue.component('my-component')\n  ```\n\n- **See also:** [Components](../guide/components.html)\n\n<h3 id=\"Vue-use\">Vue.use( plugin )</h3>\n\n- **Arguments:**\n  - `{Object | Function} plugin`\n\n- **Usage:**\n\n  Install a Vue.js plugin. If the plugin is an Object, it must expose an `install` method. If it is a function itself, it will be treated as the install method. The install method will be called with Vue as the argument.\n\n  When this method is called on the same plugin multiple times, the plugin will be installed only once.\n\n- **See also:** [Plugins](../guide/plugins.html)\n\n<h3 id=\"Vue-mixin\">Vue.mixin( mixin )</h3>\n\n- **Arguments:**\n  - `{Object} mixin`\n\n- **Usage:**\n\n  Apply a mixin globally, which affects every Vue instance created afterwards. This can be used by plugin authors to inject custom behavior into components. **Not recommended in application code**.\n\n- **See also:** [Global Mixins](../guide/mixins.html#Global-Mixin)\n\n<h3 id=\"Vue-compile\">Vue.compile( template )</h3>\n\n- **Arguments:**\n  - `{string} template`\n\n- **Usage:**\n\n  Compiles a template string into a render function. **Only available in the full build.**\n\n  ``` js\n  var res = Vue.compile('<div><span>{{ msg }}</span></div>')\n\n  new Vue({\n    data: {\n      msg: 'hello'\n    },\n    render: res.render,\n    staticRenderFns: res.staticRenderFns\n  })\n  ```\n\n- **See also:** [Render Functions](../guide/render-function.html)\n\n<h3 id=\"Vue-version\">Vue.version</h3>\n\n- **Details**: Provides the installed version of Vue as a string. This is especially useful for community plugins and components, where you might use different strategies for different versions.\n\n- **Usage**:\n\n```js\nvar version = Number(Vue.version.split('.')[0])\n\nif (version === 2) {\n  // Vue v2.x.x\n} else if (version === 1) {\n  // Vue v1.x.x\n} else {\n  // Unsupported versions of Vue\n}\n```\n\n## Options / Data\n\n### data\n\n- **Type:** `Object | Function`\n\n- **Restriction:** Only accepts `Function` when used in a component definition.\n\n- **Details:**\n\n  The data object for the Vue instance. Vue will recursively convert its properties into getter/setters to make it \"reactive\". **The object must be plain**: native objects such as browser API objects and prototype properties are ignored. A rule of thumb is that data should just be data - it is not recommended to observe objects with its own stateful behavior.\n\n  Once observed, you can no longer add reactive properties to the root data object. It is therefore recommended to declare all root-level reactive properties upfront, before creating the instance.\n\n  After the instance is created, the original data object can be accessed as `vm.$data`. The Vue instance also proxies all the properties found on the data object, so `vm.a` will be equivalent to `vm.$data.a`.\n\n  Properties that start with `_` or `$` will **not** be proxied on the Vue instance because they may conflict with Vue's internal properties and API methods. You will have to access them as `vm.$data._property`.\n\n  When defining a **component**, `data` must be declared as a function that returns the initial data object, because there will be many instances created using the same definition. If we still use a plain object for `data`, that same object will be **shared by reference** across all instances created! By providing a `data` function, every time a new instance is created, we can simply call it to return a fresh copy of the initial data.\n\n  If required, a deep clone of the original object can be obtained by passing `vm.$data` through `JSON.parse(JSON.stringify(...))`.\n\n- **Example:**\n\n  ``` js\n  var data = { a: 1 }\n\n  // direct instance creation\n  var vm = new Vue({\n    data: data\n  })\n  vm.a // -> 1\n  vm.$data === data // -> true\n\n  // must use function when in Vue.extend()\n  var Component = Vue.extend({\n    data: function () {\n      return { a: 1 }\n    }\n  })\n  ```\n\n  <p class=\"tip\">Note that __you should not use an arrow function with the `data` property__ (e.g. `data: () => { return { a: this.myProp }}`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.myProp` will be undefined.</p>\n\n- **See also:** [Reactivity in Depth](../guide/reactivity.html)\n\n### props\n\n- **Type:** `Array<string> | Object`\n\n- **Details:**\n\n  A list/hash of attributes that are exposed to accept data from the parent component. It has a simple Array-based syntax and an alternative Object-based syntax that allows advanced configurations such as type checking, custom validation and default values.\n\n- **Example:**\n\n  ``` js\n  // simple syntax\n  Vue.component('props-demo-simple', {\n    props: ['size', 'myMessage']\n  })\n\n  // object syntax with validation\n  Vue.component('props-demo-advanced', {\n    props: {\n      // just type check\n      height: Number,\n      // type check plus other validations\n      age: {\n        type: Number,\n        default: 0,\n        required: true,\n        validator: function (value) {\n          return value >= 0\n        }\n      }\n    }\n  })\n  ```\n\n- **See also:** [Props](../guide/components.html#Props)\n\n### propsData\n\n- **Type:** `{ [key: string]: any }`\n\n- **Restriction:** only respected in instance creation via `new`.\n\n- **Details:**\n\n  Pass props to an instance during its creation. This is primarily intended to make unit testing easier.\n\n- **Example:**\n\n  ``` js\n  var Comp = Vue.extend({\n    props: ['msg'],\n    template: '<div>{{ msg }}</div>'\n  })\n\n  var vm = new Comp({\n    propsData: {\n      msg: 'hello'\n    }\n  })\n  ```\n\n### computed\n\n- **Type:** `{ [key: string]: Function | { get: Function, set: Function } }`\n\n- **Details:**\n\n  Computed properties to be mixed into the Vue instance. All getters and setters have their `this` context automatically bound to the Vue instance.\n\n  <p class=\"tip\">Note that __you should not use an arrow function to define a computed property__ (e.g. `aDouble: () => this.a * 2`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.a` will be undefined.</p>\n\n  Computed properties are cached, and only re-computed on reactive dependency changes. Note that if a certain dependency is out of the instance's scope (i.e. not reactive), the computed property will __not__ be updated.\n\n- **Example:**\n\n  ```js\n  var vm = new Vue({\n    data: { a: 1 },\n    computed: {\n      // get only, just need a function\n      aDouble: function () {\n        return this.a * 2\n      },\n      // both get and set\n      aPlus: {\n        get: function () {\n          return this.a + 1\n        },\n        set: function (v) {\n          this.a = v - 1\n        }\n      }\n    }\n  })\n  vm.aPlus   // -> 2\n  vm.aPlus = 3\n  vm.a       // -> 2\n  vm.aDouble // -> 4\n  ```\n\n- **See also:**\n  - [Computed Properties](../guide/computed.html)\n\n### methods\n\n- **Type:** `{ [key: string]: Function }`\n\n- **Details:**\n\n  Methods to be mixed into the Vue instance. You can access these methods directly on the VM instance, or use them in directive expressions. All methods will have their `this` context automatically bound to the Vue instance.\n\n  <p class=\"tip\">Note that __you should not use an arrow function to define a method__ (e.g. `plus: () => this.a++`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.a` will be undefined.</p>\n\n- **Example:**\n\n  ```js\n  var vm = new Vue({\n    data: { a: 1 },\n    methods: {\n      plus: function () {\n        this.a++\n      }\n    }\n  })\n  vm.plus()\n  vm.a // 2\n  ```\n\n- **See also:** [Methods and Event Handling](../guide/events.html)\n\n### watch\n\n- **Type:** `{ [key: string]: string | Function | Object }`\n\n- **Details:**\n\n  An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. The Vue instance will call `$watch()` for each entry in the object at instantiation.\n\n- **Example:**\n\n  ``` js\n  var vm = new Vue({\n    data: {\n      a: 1,\n      b: 2,\n      c: 3\n    },\n    watch: {\n      a: function (val, oldVal) {\n        console.log('new: %s, old: %s', val, oldVal)\n      },\n      // string method name\n      b: 'someMethod',\n      // deep watcher\n      c: {\n        handler: function (val, oldVal) { /* ... */ },\n        deep: true\n      }\n    }\n  })\n  vm.a = 2 // -> new: 2, old: 1\n  ```\n\n  <p class=\"tip\">Note that __you should not use an arrow function to define a watcher__ (e.g. `searchQuery: newValue => this.updateAutocomplete(newValue)`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.updateAutocomplete` will be undefined.</p>\n\n- **See also:** [Instance Methods - vm.$watch](#vm-watch)\n\n## Options / DOM\n\n### el\n\n- **Type:** `string | HTMLElement`\n\n- **Restriction:** only respected in instance creation via `new`.\n\n- **Details:**\n\n  Provide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement.\n\n  After the instance is mounted, the resolved element will be accessible as `vm.$el`.\n\n  If this option is available at instantiation, the instance will immediately enter compilation; otherwise, the user will have to explicitly call `vm.$mount()` to manually start the compilation.\n\n  <p class=\"tip\">The provided element merely serves as a mounting point. Unlike in Vue 1.x, the mounted element will be replaced with Vue-generated DOM in all cases. It is therefore not recommended to mount the root instance to `<html>` or `<body>`.</p>\n\n  <p class=\"tip\">If neither `render` function nor `template` option is present, the in-DOM HTML of the mounting DOM element will be extracted as the template. In this case, Runtime + Compiler build of Vue should be used.</p>\n\n- **See also:**\n  - [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n  - [Runtime + Compiler vs. Runtime-only](../guide/installation.html#Runtime-Compiler-vs-Runtime-only)\n\n### template\n\n- **Type:** `string`\n\n- **Details:**\n\n  A string template to be used as the markup for the Vue instance. The template will **replace** the mounted element. Any existing markup inside the mounted element will be ignored, unless content distribution slots are present in the template.\n\n  If the string starts with `#` it will be used as a querySelector and use the selected element's innerHTML as the template string. This allows the use of the common `<script type=\"x-template\">` trick to include templates.\n\n  <p class=\"tip\">From a security perspective, you should only use Vue templates that you can trust. Never use user-generated content as your template.</p>\n\n  <p class=\"tip\">If render function is present in the Vue option, the template will be ignored.</p>\n\n- **See also:**\n  - [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n  - [Content Distribution](../guide/components.html#Content-Distribution-with-Slots)\n\n### render\n\n  - **Type:** `(createElement: () => VNode) => VNode`\n\n  - **Details:**\n\n    An alternative to string templates allowing you to leverage the full programmatic power of JavaScript. The render function receives a `createElement` method as it's first argument used to create `VNode`s.\n\n    If the component is a functional component, the render function also receives an extra argument `context`, which provides access to contextual data since functional components are instance-less.\n\n    <p class=\"tip\">The `render` function has priority over the render function compiled from `template` option or in-DOM HTML template of the mounting element which is specified by the `el` option.</p>\n\n  - **See also:**\n    - [Render Functions](../guide/render-function)\n\n### renderError\n\n> New in 2.2.0\n\n  - **Type:** `(createElement: () => VNode, error: Error) => VNode`\n\n  - **Details:**\n\n    **Only works in development mode.**\n\n    Provide an alternative render output when the default `render` function encounters an error. The error will be passed to `renderError` as the second argument. This is particularly useful when used together with hot-reload.\n\n  - **Example:**\n\n    ``` js\n    new Vue({\n      render (h) {\n        throw new Error('oops')\n      },\n      renderError (h, err) {\n        return h('pre', { style: { color: 'red' }}, err.stack)\n      }\n    }).$mount('#app')\n    ```\n\n  - **See also:**\n    - [Render Functions](../guide/render-function)\n\n## Options / Lifecycle Hooks\n\nAll lifecycle hooks automatically have their `this` context bound to the instance, so that you can access data, computed properties, and methods. This means __you should not use an arrow function to define a lifecycle method__ (e.g. `created: () => this.fetchTodos()`). The reason is arrow functions bind the parent context, so `this` will not be the Vue instance as you expect and `this.fetchTodos` will be undefined.\n\n### beforeCreate\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called synchronously after the instance has just been initialized, before data observation and event/watcher setup.\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### created\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called synchronously after the instance is created. At this stage, the instance has finished processing the options which means the following have been set up: data observation, computed properties, methods, watch/event callbacks. However, the mounting phase has not been started, and the `$el` property will not be available yet.\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### beforeMount\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called right before the mounting begins: the `render` function is about to be called for the first time.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### mounted\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after the instance has just been mounted where `el` is replaced by the newly created `vm.$el`. If the root instance is mounted to an in-document element, `vm.$el` will also be in-document when `mounted` is called.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### beforeUpdate\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when the data changes, before the virtual DOM is re-rendered and patched.\n\n  You can perform further state changes in this hook and they will not trigger additional re-renders.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### updated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after a data change causes the virtual DOM to be re-rendered and patched.\n\n  The component's DOM will have been updated when this hook is called, so you can perform DOM-dependent operations here. However, in most cases you should avoid changing state inside the hook. To react to state changes, it's usually better to use a [computed property](#computed) or [watcher](#watch) instead.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### activated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when a kept-alive component is activated.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:**\n  - [Built-in Components - keep-alive](#keep-alive)\n  - [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### deactivated\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called when a kept-alive component is deactivated.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:**\n  - [Built-in Components - keep-alive](#keep-alive)\n  - [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### beforeDestroy\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called right before a Vue instance is destroyed. At this stage the instance is still fully functional.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n### destroyed\n\n- **Type:** `Function`\n\n- **Details:**\n\n  Called after a Vue instance has been destroyed. When this hook is called, all directives of the Vue instance have been unbound, all event listeners have been removed, and all child Vue instances have also been destroyed.\n\n  **This hook is not called during server-side rendering.**\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n## Options / Assets\n\n### directives\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of directives to be made available to the Vue instance.\n\n- **See also:**\n  - [Custom Directives](../guide/custom-directive.html)\n\n### filters\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of filters to be made available to the Vue instance.\n\n- **See also:**\n  - [`Vue.filter`](#Vue-filter)\n\n### components\n\n- **Type:** `Object`\n\n- **Details:**\n\n  A hash of components to be made available to the Vue instance.\n\n- **See also:**\n  - [Components](../guide/components.html)\n\n## Options / Composition\n\n### parent\n\n- **Type:** `Vue instance`\n\n- **Details:**\n\n  Specify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as `this.$parent` for the child, and the child will be pushed into the parent's `$children` array.\n\n  <p class=\"tip\">Use `$parent` and `$children` sparingly - they mostly serve as an escape-hatch. Prefer using props and events for parent-child communication.</p>\n\n### mixins\n\n- **Type:** `Array<Object>`\n\n- **Details:**\n\n  The `mixins` option accepts an array of mixin objects. These mixin objects can contain instance options just like normal instance objects, and they will be merged against the eventual options using the same option merging logic in `Vue.extend()`. e.g. If your mixin contains a created hook and the component itself also has one, both functions will be called.\n\n  Mixin hooks are called in the order they are provided, and called before the component's own hooks.\n\n- **Example:**\n\n  ``` js\n  var mixin = {\n    created: function () { console.log(1) }\n  }\n  var vm = new Vue({\n    created: function () { console.log(2) },\n    mixins: [mixin]\n  })\n  // -> 1\n  // -> 2\n  ```\n\n- **See also:** [Mixins](../guide/mixins.html)\n\n### extends\n\n- **Type:** `Object | Function`\n\n- **Details:**\n\n  Allows declaratively extending another component (could be either a plain options object or a constructor) without having to use `Vue.extend`. This is primarily intended to make it easier to extend between single file components.\n\n  This is similar to `mixins`, the difference being that the component's own options takes higher priority than the source component being extended.\n\n- **Example:**\n\n  ``` js\n  var CompA = { ... }\n\n  // extend CompA without having to call Vue.extend on either\n  var CompB = {\n    extends: CompA,\n    ...\n  }\n  ```\n\n### provide / inject\n\n> New in 2.2.0\n\n- **Type:**\n  - **provide:** `Object | () => Object`\n  - **inject:** `Array<string> | { [key: string]: string | Symbol }`\n\n- **Details:**\n\n  <p class=\"tip\">`provide` and `inject` are primarily provided for advanced plugin / component library use cases. It is NOT recommended to use them in generic application code.</p>\n\n  This pair of options are used together to allow an ancestor component to serve as a dependency injector for its all descendants, regardless of how deep the component hierarchy is, as long as they are in the same parent chain. If you are familiar with React, this is very similar to React's context feature.\n\n  The `provide` option should be an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use ES2015 Symbols as keys in this object, but only in environments that natively support `Symbol` and `Reflect.ownKeys`.\n\n  The `inject` options should be either an Array of strings or an object where the keys stand for the local binding name, and the value being the key (string or Symbol) to search for in available injections.\n\n  > Note: the `provide` and `inject` bindings are NOT reactive. This is intentional. However, if you pass down an observed object, properties on that object do remain reactive.\n\n- **Example:**\n\n  ``` js\n  var Provider = {\n    provide: {\n      foo: 'bar'\n    },\n    // ...\n  }\n\n  var Child = {\n    inject: ['foo'],\n    created () {\n      console.log(this.foo) // -> \"bar\"\n    }\n    // ...\n  }\n  ```\n\n  With ES2015 Symbols, function `provide` and object `inject`:\n  ``` js\n  const s = Symbol()\n\n  const Provider = {\n    provide () {\n      return {\n        [s]: 'foo'\n      }\n    }\n  }\n\n  const Child = {\n    inject: { s },\n    // ...\n  }\n  ```\n\n  > The next 2 examples only work with Vue > 2.2.1. Below that version, injected values were resolved after the `props` and the `data` initialization.\n\n  Using an injected value as the default for a prop:\n  ```js\n  const Child = {\n    inject: ['foo'],\n    props: {\n      bar: {\n        default () {\n          return this.foo\n        }\n      }\n    }\n  }\n  ```\n\n  Using an injected value as data entry:\n  ```js\n  const Child = {\n    inject: ['foo'],\n    data () {\n      return {\n        bar: this.foo\n      }\n    }\n  }\n  ```\n\n## Options / Misc\n\n### name\n\n- **Type:** `string`\n\n- **Restriction:** only respected when used as a component option.\n\n- **Details:**\n\n  Allow the component to recursively invoke itself in its template. Note that when a component is registered globally with `Vue.component()`, the global ID is automatically set as its name.\n\n  Another benefit of specifying a `name` option is debugging. Named components result in more helpful warning messages. Also, when inspecting an app in the [vue-devtools](https://github.com/vuejs/vue-devtools), unnamed components will show up as `<AnonymousComponent>`, which isn't very informative. By providing the `name` option, you will get a much more informative component tree.\n\n### delimiters\n\n- **Type:** `Array<string>`\n\n- **default:** `{% raw %}[\"{{\", \"}}\"]{% endraw %}`\n\n- **Details:**\n\n  Change the plain text interpolation delimiters. **This option is only available in the full build.**\n\n- **Example:**\n\n  ``` js\n  new Vue({\n    delimiters: ['${', '}']\n  })\n\n  // Delimiters changed to ES6 template string style\n  ```\n\n### functional\n\n- **Type:** `boolean`\n\n- **Details:**\n\n  Causes a component to be stateless (no `data`) and instanceless (no `this` context). They are simply a `render` function that returns virtual nodes making them much cheaper to render.\n\n- **See also:** [Functional Components](../guide/render-function.html#Functional-Components)\n\n### model\n\n> New in 2.2.0\n\n- **Type:** `{ prop?: string, event?: string }`\n\n- **Details:**\n\n  Allows a custom component to customize the prop and event used when it's used with `v-model`. By default, `v-model` on a component uses `value` as the prop and `input` as the event, but some input types such as checkboxes and radio buttons may want to use the `value` prop for a different purpose. Using the `model` option can avoid the conflict in such cases.\n\n- **Example:**\n\n  ``` js\n  Vue.component('my-checkbox', {\n    model: {\n      prop: 'checked',\n      event: 'change'\n    },\n    props: {\n      // this allows using the `value` prop for a different purpose\n      value: String,\n      // use `checked` as the prop which take the place of `value`\n      checked: {\n        type: Number,\n        default: 0\n      }\n    },\n    // ...\n  })\n  ```\n\n  ``` html\n  <my-checkbox v-model=\"foo\" value=\"some value\"></my-checkbox>\n  ```\n\n  The above will be equivalent to:\n\n  ``` html\n  <my-checkbox\n    :checked=\"foo\"\n    @change=\"val => { foo = val }\"\n    value=\"some value\">\n  </my-checkbox>\n  ```\n\n## Instance Properties\n\n### vm.$data\n\n- **Type:** `Object`\n\n- **Details:**\n\n  The data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object.\n\n- **See also:** [Options - data](#data)\n\n### vm.$props\n\n> New in 2.2.0\n\n- **Type:** `Object`\n\n- **Details:**\n\n  An object representing the current props a component has received. The Vue instance proxies access to the properties on its props object.\n\n### vm.$el\n\n- **Type:** `HTMLElement`\n\n- **Read only**\n\n- **Details:**\n\n  The root DOM element that the Vue instance is managing.\n\n### vm.$options\n\n- **Type:** `Object`\n\n- **Read only**\n\n- **Details:**\n\n  The instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options:\n\n  ``` js\n  new Vue({\n    customOption: 'foo',\n    created: function () {\n      console.log(this.$options.customOption) // -> 'foo'\n    }\n  })\n  ```\n\n### vm.$parent\n\n- **Type:** `Vue instance`\n\n- **Read only**\n\n- **Details:**\n\n  The parent instance, if the current instance has one.\n\n### vm.$root\n\n- **Type:** `Vue instance`\n\n- **Read only**\n\n- **Details:**\n\n  The root Vue instance of the current component tree. If the current instance has no parents this value will be itself.\n\n### vm.$children\n\n- **Type:** `Array<Vue instance>`\n\n- **Read only**\n\n- **Details:**\n\n  The direct child components of the current instance. **Note there's no order guarantee for `$children`, and it is not reactive.** If you find yourself trying to use `$children` for data binding, consider using an Array and `v-for` to generate child components, and use the Array as the source of truth.\n\n### vm.$slots\n\n- **Type:** `{ [name: string]: ?Array<VNode> }`\n\n- **Read only**\n\n- **Details:**\n\n  Used to programmatically access content [distributed by slots](../guide/components.html#Content-Distribution-with-Slots). Each [named slot](../guide/components.html#Named-Slots) has its own corresponding property (e.g. the contents of `slot=\"foo\"` will be found at `vm.$slots.foo`). The `default` property contains any nodes not included in a named slot.\n\n  Accessing `vm.$slots` is most useful when writing a component with a [render function](../guide/render-function.html).\n\n- **Example:**\n\n  ```html\n  <blog-post>\n    <h1 slot=\"header\">\n      About Me\n    </h1>\n\n    <p>Here's some page content, which will be included in vm.$slots.default, because it's not inside a named slot.</p>\n\n    <p slot=\"footer\">\n      Copyright 2016 Evan You\n    </p>\n\n    <p>If I have some content down here, it will also be included in vm.$slots.default.</p>.\n  </blog-post>\n  ```\n\n  ```js\n  Vue.component('blog-post', {\n    render: function (createElement) {\n      var header = this.$slots.header\n      var body   = this.$slots.default\n      var footer = this.$slots.footer\n      return createElement('div', [\n        createElement('header', header),\n        createElement('main', body),\n        createElement('footer', footer)\n      ])\n    }\n  })\n  ```\n\n- **See also:**\n  - [`<slot>` Component](#slot-1)\n  - [Content Distribution with Slots](../guide/components.html#Content-Distribution-with-Slots)\n  - [Render Functions: Slots](../guide/render-function.html#Slots)\n\n### vm.$scopedSlots\n\n> New in 2.1.0\n\n- **Type:** `{ [name: string]: props => VNode | Array<VNode> }`\n\n- **Read only**\n\n- **Details:**\n\n  Used to programmatically access [scoped slots](../guide/components.html#Scoped-Slots). For each slot, including the `default` one, the object contains a corresponding function that returns VNodes.\n\n  Accessing `vm.$scopedSlots` is most useful when writing a component with a [render function](../guide/render-function.html).\n\n- **See also:**\n  - [`<slot>` Component](#slot-1)\n  - [Scoped Slots](../guide/components.html#Scoped-Slots)\n  - [Render Functions: Slots](../guide/render-function.html#Slots)\n\n### vm.$refs\n\n- **Type:** `Object`\n\n- **Read only**\n\n- **Details:**\n\n  An object that holds child components that have `ref` registered.\n\n- **See also:**\n  - [Child Component Refs](../guide/components.html#Child-Component-Refs)\n  - [ref](#ref)\n\n### vm.$isServer\n\n- **Type:** `boolean`\n\n- **Read only**\n\n- **Details:**\n\n  Whether the current Vue instance is running on the server.\n\n- **See also:** [Server-Side Rendering](../guide/ssr.html)\n\n## Instance Methods / Data\n\n<h3 id=\"vm-watch\">vm.$watch( expOrFn, callback, [options] )</h3>\n\n- **Arguments:**\n  - `{string | Function} expOrFn`\n  - `{Function} callback`\n  - `{Object} [options]`\n    - `{boolean} deep`\n    - `{boolean} immediate`\n\n- **Returns:** `{Function} unwatch`\n\n- **Usage:**\n\n  Watch an expression or a computed function on the Vue instance for changes. The callback gets called with the new value and the old value. The expression only accepts simple dot-delimited paths. For more complex expression, use a function instead.\n\n<p class=\"tip\">Note: when mutating (rather than replacing) an Object or an Array, the old value will be the same as new value because they reference the same Object/Array. Vue doesn't keep a copy of the pre-mutate value.</p>\n\n- **Example:**\n\n  ``` js\n  // keypath\n  vm.$watch('a.b.c', function (newVal, oldVal) {\n    // do something\n  })\n\n  // function\n  vm.$watch(\n    function () {\n      return this.a + this.b\n    },\n    function (newVal, oldVal) {\n      // do something\n    }\n  )\n  ```\n\n  `vm.$watch` returns an unwatch function that stops firing the callback:\n\n  ``` js\n  var unwatch = vm.$watch('a', cb)\n  // later, teardown the watcher\n  unwatch()\n  ```\n\n- **Option: deep**\n\n  To also detect nested value changes inside Objects, you need to pass in `deep: true` in the options argument. Note that you don't need to do so to listen for Array mutations.\n\n  ``` js\n  vm.$watch('someObject', callback, {\n    deep: true\n  })\n  vm.someObject.nestedValue = 123\n  // callback is fired\n  ```\n\n- **Option: immediate**\n\n  Passing in `immediate: true` in the option will trigger the callback immediately with the current value of the expression:\n\n  ``` js\n  vm.$watch('a', callback, {\n    immediate: true\n  })\n  // callback is fired immediately with current value of `a`\n  ```\n\n<h3 id=\"vm-set\">vm.$set( target, key, value )</h3>\n\n- **Arguments:**\n  - `{Object | Array} target`\n  - `{string | number} key`\n  - `{any} value`\n\n- **Returns:** the set value.\n\n- **Usage:**\n\n  This is the **alias** of the global `Vue.set`.\n\n- **See also:** [Vue.set](#Vue-set)\n\n<h3 id=\"vm-delete\">vm.$delete( target, key )</h3>\n\n- **Arguments:**\n  - `{Object | Array} target`\n  - `{string | number} key`\n\n- **Usage:**\n\n  This is the **alias** of the global `Vue.delete`.\n\n- **See also:** [Vue.delete](#Vue-delete)\n\n## Instance Methods / Events\n\n<h3 id=\"vm-on\">vm.$on( event, callback )</h3>\n\n- **Arguments:**\n  - `{string | Array<string>} event` (array only supported in 2.2.0+)\n  - `{Function} callback`\n\n- **Usage:**\n\n  Listen for a custom event on the current vm. Events can be triggered by `vm.$emit`. The callback will receive all the additional arguments passed into these event-triggering methods.\n\n- **Example:**\n\n  ``` js\n  vm.$on('test', function (msg) {\n    console.log(msg)\n  })\n  vm.$emit('test', 'hi')\n  // -> \"hi\"\n  ```\n\n<h3 id=\"vm-once\">vm.$once( event, callback )</h3>\n\n- **Arguments:**\n  - `{string} event`\n  - `{Function} callback`\n\n- **Usage:**\n\n  Listen for a custom event, but only once. The listener will be removed once it triggers for the first time.\n\n<h3 id=\"vm-off\">vm.$off( [event, callback] )</h3>\n\n- **Arguments:**\n  - `{string} [event]`\n  - `{Function} [callback]`\n\n- **Usage:**\n\n  Remove custom event listener(s).\n\n  - If no arguments are provided, remove all event listeners;\n\n  - If only the event is provided, remove all listeners for that event;\n\n  - If both event and callback are given, remove the listener for that specific callback only.\n\n<h3 id=\"vm-emit\">vm.$emit( event, [...args] )</h3>\n\n- **Arguments:**\n  - `{string} event`\n  - `[...args]`\n\n  Trigger an event on the current instance. Any additional arguments will be passed into the listener's callback function.\n\n## Instance Methods / Lifecycle\n\n<h3 id=\"vm-mount\">vm.$mount( [elementOrSelector] )</h3>\n\n- **Arguments:**\n  - `{Element | string} [elementOrSelector]`\n  - `{boolean} [hydrating]`\n\n- **Returns:** `vm` - the instance itself\n\n- **Usage:**\n\n  If a Vue instance didn't receive the `el` option at instantiation, it will be in \"unmounted\" state, without an associated DOM element. `vm.$mount()` can be used to manually start the mounting of an unmounted Vue instance.\n\n  If `elementOrSelector` argument is not provided, the template will be rendered as an off-document element, and you will have to use native DOM API to insert it into the document yourself.\n\n  The method returns the instance itself so you can chain other instance methods after it.\n\n- **Example:**\n\n  ``` js\n  var MyComponent = Vue.extend({\n    template: '<div>Hello!</div>'\n  })\n\n  // create and mount to #app (will replace #app)\n  new MyComponent().$mount('#app')\n\n  // the above is the same as:\n  new MyComponent({ el: '#app' })\n\n  // or, render off-document and append afterwards:\n  var component = new MyComponent().$mount()\n  document.getElementById('app').appendChild(component.$el)\n  ```\n\n- **See also:**\n  - [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n  - [Server-Side Rendering](../guide/ssr.html)\n\n<h3 id=\"vm-forceUpdate\">vm.$forceUpdate()</h3>\n\n- **Usage:**\n\n  Force the Vue instance to re-render. Note it does not affect all child components, only the instance itself and child components with inserted slot content.\n\n<h3 id=\"vm-nextTick\">vm.$nextTick( [callback] )</h3>\n\n- **Arguments:**\n  - `{Function} [callback]`\n\n- **Usage:**\n\n  Defer the callback to be executed after the next DOM update cycle. Use it immediately after you've changed some data to wait for the DOM update. This is the same as the global `Vue.nextTick`, except that the callback's `this` context is automatically bound to the instance calling this method.\n\n  > New in 2.1.0: returns a Promise if no callback is provided and Promise is supported in the execution environment.\n\n- **Example:**\n\n  ``` js\n  new Vue({\n    // ...\n    methods: {\n      // ...\n      example: function () {\n        // modify data\n        this.message = 'changed'\n        // DOM is not updated yet\n        this.$nextTick(function () {\n          // DOM is now updated\n          // `this` is bound to the current instance\n          this.doSomethingElse()\n        })\n      }\n    }\n  })\n  ```\n\n- **See also:**\n  - [Vue.nextTick](#Vue-nextTick)\n  - [Async Update Queue](../guide/reactivity.html#Async-Update-Queue)\n\n<h3 id=\"vm-destroy\">vm.$destroy()</h3>\n\n- **Usage:**\n\n  Completely destroy a vm. Clean up its connections with other existing vms, unbind all its directives, turn off all event listeners.\n\n  Triggers the `beforeDestroy` and `destroyed` hooks.\n\n  <p class=\"tip\">In normal use cases you shouldn't have to call this method yourself. Prefer controlling the lifecycle of child components in a data-driven fashion using `v-if` and `v-for`.</p>\n\n- **See also:** [Lifecycle Diagram](../guide/instance.html#Lifecycle-Diagram)\n\n## Directives\n\n### v-text\n\n- **Expects:** `string`\n\n- **Details:**\n\n  Updates the element's `textContent`. If you need to update the part of `textContent`, you should use `{% raw %}{{ Mustache }}{% endraw %}` interpolations.\n\n- **Example:**\n\n  ```html\n  <span v-text=\"msg\"></span>\n  <!-- same as -->\n  <span>{{msg}}</span>\n  ```\n\n- **See also:** [Data Binding Syntax - interpolations](../guide/syntax.html#Text)\n\n### v-html\n\n- **Expects:** `string`\n\n- **Details:**\n\n  Updates the element's `innerHTML`. **Note that the contents are inserted as plain HTML - they will not be compiled as Vue templates**. If you find yourself trying to compose templates using `v-html`, try to rethink the solution by using components instead.\n\n  <p class=\"tip\">Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to [XSS attacks](https://en.wikipedia.org/wiki/Cross-site_scripting). Only use `v-html` on trusted content and **never** on user-provided content.</p>\n\n- **Example:**\n\n  ```html\n  <div v-html=\"html\"></div>\n  ```\n- **See also:** [Data Binding Syntax - interpolations](../guide/syntax.html#Raw-HTML)\n\n### v-show\n\n- **Expects:** `any`\n\n- **Usage:**\n\n  Toggle's the element's `display` CSS property based on the truthy-ness of the expression value.\n\n  This directive triggers transitions when its condition changes.\n\n- **See also:** [Conditional Rendering - v-show](../guide/conditional.html#v-show)\n\n### v-if\n\n- **Expects:** `any`\n\n- **Usage:**\n\n  Conditionally render the element based on the truthy-ness of the expression value. The element and its contained directives / components are destroyed and re-constructed during toggles. If the element is a `<template>` element, its content will be extracted as the conditional block.\n\n  This directive triggers transitions when its condition changes.\n\n  <p class=\"tip\">When used together with v-if, v-for has a higher priority than v-if. See the <a href=\"../guide/list.html#v-for-with-v-if\">list rendering guide</a> for details.</p>\n\n- **See also:** [Conditional Rendering - v-if](../guide/conditional.html)\n\n### v-else\n\n- **Does not expect expression**\n\n- **Restriction:** previous sibling element must have `v-if` or `v-else-if`.\n\n- **Usage:**\n\n  Denote the \"else block\" for `v-if` or a `v-if`/`v-else-if` chain.\n\n  ```html\n  <div v-if=\"Math.random() > 0.5\">\n    Now you see me\n  </div>\n  <div v-else>\n    Now you don't\n  </div>\n  ```\n\n- **See also:**\n  - [Conditional Rendering - v-else](../guide/conditional.html#v-else)\n\n### v-else-if\n\n> New in 2.1.0\n\n- **Expects:** `any`\n\n- **Restriction:** previous sibling element must have `v-if` or `v-else-if`.\n\n- **Usage:**\n\n  Denote the \"else if block\" for `v-if`. Can be chained.\n\n  ```html\n  <div v-if=\"type === 'A'\">\n    A\n  </div>\n  <div v-else-if=\"type === 'B'\">\n    B\n  </div>\n  <div v-else-if=\"type === 'C'\">\n    C\n  </div>\n  <div v-else>\n    Not A/B/C\n  </div>\n  ```\n\n- **See also:** [Conditional Rendering - v-else-if](../guide/conditional.html#v-else-if)\n\n### v-for\n\n- **Expects:** `Array | Object | number | string`\n\n- **Usage:**\n\n  Render the element or template block multiple times based on the source data. The directive's value must use the special syntax `alias in expression` to provide an alias for the current element being iterated on:\n\n  ``` html\n  <div v-for=\"item in items\">\n    {{ item.text }}\n  </div>\n  ```\n\n  Alternatively, you can also specify an alias for the index (or the key if used on an Object):\n\n  ``` html\n  <div v-for=\"(item, index) in items\"></div>\n  <div v-for=\"(val, key) in object\"></div>\n  <div v-for=\"(val, key, index) in object\"></div>\n  ```\n\n  The default behavior of `v-for` will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the `key` special attribute:\n\n  ``` html\n  <div v-for=\"item in items\" :key=\"item.id\">\n    {{ item.text }}\n  </div>\n  ```\n\n  <p class=\"tip\">When used together with v-if, v-for has a higher priority than v-if. See the <a href=\"../guide/list.html#v-for-with-v-if\">list rendering guide</a> for details.</p>\n\n  The detailed usage for `v-for` is explained in the guide section linked below.\n\n- **See also:**\n  - [List Rendering](../guide/list.html)\n  - [key](../guide/list.html#key)\n\n### v-on\n\n- **Shorthand:** `@`\n\n- **Expects:** `Function | Inline Statement`\n\n- **Argument:** `event (required)`\n\n- **Modifiers:**\n  - `.stop` - call `event.stopPropagation()`.\n  - `.prevent` - call `event.preventDefault()`.\n  - `.capture` - add event listener in capture mode.\n  - `.self` - only trigger handler if event was dispatched from this element.\n  - `.{keyCode | keyAlias}` - only trigger handler on certain keys.\n  - `.native` - listen for a native event on the root element of component.\n  - `.once` - trigger handler at most once.\n  - `.left` - (2.2.0+) only trigger handler for left button mouse events.\n  - `.right` - (2.2.0+) only trigger handler for right button mouse events.\n  - `.middle` - (2.2.0+) only trigger handler for middle button mouse events.\n  - `.passive` - (2.3.0+) attaches a DOM event with `{ passive: true }`.\n\n- **Usage:**\n\n  Attaches an event listener to the element. The event type is denoted by the argument. The expression can either be a method name or an inline statement, or simply omitted when there are modifiers present.\n\n  When used on a normal element, it listens to **native DOM events** only. When used on a custom element component, it also listens to **custom events** emitted on that child component.\n\n  When listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special `$event` property: `v-on:click=\"handle('ok', $event)\"`.\n\n- **Example:**\n\n  ```html\n  <!-- method handler -->\n  <button v-on:click=\"doThis\"></button>\n\n  <!-- inline statement -->\n  <button v-on:click=\"doThat('hello', $event)\"></button>\n\n  <!-- shorthand -->\n  <button @click=\"doThis\"></button>\n\n  <!-- stop propagation -->\n  <button @click.stop=\"doThis\"></button>\n\n  <!-- prevent default -->\n  <button @click.prevent=\"doThis\"></button>\n\n  <!-- prevent default without expression -->\n  <form @submit.prevent></form>\n\n  <!-- chain modifiers -->\n  <button @click.stop.prevent=\"doThis\"></button>\n\n  <!-- key modifier using keyAlias -->\n  <input @keyup.enter=\"onEnter\">\n\n  <!-- key modifier using keyCode -->\n  <input @keyup.13=\"onEnter\">\n\n  <!-- the click event will be triggered at most once -->\n  <button v-on:click.once=\"doThis\"></button>\n  ```\n\n  Listening to custom events on a child component (the handler is called when \"my-event\" is emitted on the child):\n\n  ```html\n  <my-component @my-event=\"handleThis\"></my-component>\n\n  <!-- inline statement -->\n  <my-component @my-event=\"handleThis(123, $event)\"></my-component>\n\n  <!-- native event on component -->\n  <my-component @click.native=\"onClick\"></my-component>\n  ```\n\n- **See also:**\n  - [Methods and Event Handling](../guide/events.html)\n  - [Components - Custom Events](../guide/components.html#Custom-Events)\n\n### v-bind\n\n- **Shorthand:** `:`\n\n- **Expects:** `any (with argument) | Object (without argument)`\n\n- **Argument:** `attrOrProp (optional)`\n\n- **Modifiers:**\n  - `.prop` - Bind as a DOM property instead of an attribute. ([what's the difference?](http://stackoverflow.com/questions/6003819/properties-and-attributes-in-html#answer-6004028))\n  - `.camel` - (2.1.0+) transform the kebab-case attribute name into camelCase.\n  - `.sync` - (2.3.0+) a syntax sugar that expands into a `v-on` handler for updating the bound value.\n\n- **Usage:**\n\n  Dynamically bind one or more attributes, or a component prop to an expression.\n\n  When used to bind the `class` or `style` attribute, it supports additional value types such as Array or Objects. See linked guide section below for more details.\n\n  When used for prop binding, the prop must be properly declared in the child component.\n\n  When used without an argument, can be used to bind an object containing attribute name-value pairs. Note in this mode `class` and `style` does not support Array or Objects.\n\n- **Example:**\n\n  ```html\n  <!-- bind an attribute -->\n  <img v-bind:src=\"imageSrc\">\n\n  <!-- shorthand -->\n  <img :src=\"imageSrc\">\n\n  <!-- with inline string concatenation -->\n  <img :src=\"'/path/to/images/' + fileName\">\n\n  <!-- class binding -->\n  <div :class=\"{ red: isRed }\"></div>\n  <div :class=\"[classA, classB]\"></div>\n  <div :class=\"[classA, { classB: isB, classC: isC }]\">\n\n  <!-- style binding -->\n  <div :style=\"{ fontSize: size + 'px' }\"></div>\n  <div :style=\"[styleObjectA, styleObjectB]\"></div>\n\n  <!-- binding an object of attributes -->\n  <div v-bind=\"{ id: someProp, 'other-attr': otherProp }\"></div>\n\n  <!-- DOM attribute binding with prop modifier -->\n  <div v-bind:text-content.prop=\"text\"></div>\n\n  <!-- prop binding. \"prop\" must be declared in my-component. -->\n  <my-component :prop=\"someThing\"></my-component>\n\n  <!-- pass down parent props in common with a child component -->\n  <child-component v-bind=\"$props\"></child-component>\n\n  <!-- XLink -->\n  <svg><a :xlink:special=\"foo\"></a></svg>\n  ```\n\n  The `.camel` modifier allows camelizing a `v-bind` attribute name when using in-DOM templates, e.g. the SVG `viewBox` attribute:\n\n  ``` html\n  <svg :view-box.camel=\"viewBox\"></svg>\n  ```\n\n  `.camel` is not needed if you are using string templates, or compiling with `vue-loader`/`vueify`.\n\n- **See also:**\n  - [Class and Style Bindings](../guide/class-and-style.html)\n  - [Components - Component Props](../guide/components.html#Props)\n  - [Components - `.sync` Modifier](../guide/components.html#sync-Modifier)\n\n### v-model\n\n- **Expects:** varies based on value of form inputs element or output of components\n\n- **Limited to:**\n  - `<input>`\n  - `<select>`\n  - `<textarea>`\n  - components\n\n- **Modifiers:**\n  - [`.lazy`](../guide/forms.html#lazy) - listen to `change` events instead of `input`\n  - [`.number`](../guide/forms.html#number) - cast input string to numbers\n  - [`.trim`](../guide/forms.html#trim) - trim input\n\n- **Usage:**\n\n  Create a two-way binding on a form input element or a component. For detailed usage and other notes, see the Guide section linked below.\n\n- **See also:**\n  - [Form Input Bindings](../guide/forms.html)\n  - [Components - Form Input Components using Custom Events](../guide/components.html#Form-Input-Components-using-Custom-Events)\n\n### v-pre\n\n- **Does not expect expression**\n\n- **Usage:**\n\n  Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.\n\n- **Example:**\n\n  ```html\n  <span v-pre>{{ this will not be compiled }}</span>\n   ```\n\n### v-cloak\n\n- **Does not expect expression**\n\n- **Usage:**\n\n  This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as `[v-cloak] { display: none }`, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.\n\n- **Example:**\n\n  ```css\n  [v-cloak] {\n    display: none;\n  }\n  ```\n\n  ```html\n  <div v-cloak>\n    {{ message }}\n  </div>\n  ```\n\n  The `<div>` will not be visible until the compilation is done.\n\n### v-once\n\n- **Does not expect expression**\n\n- **Details:**\n\n  Render the element and component **once** only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.\n\n  ```html\n  <!-- single element -->\n  <span v-once>This will never change: {{msg}}</span>\n  <!-- the element have children -->\n  <div v-once>\n    <h1>comment</h1>\n    <p>{{msg}}</p>\n  </div>\n  <!-- component -->\n  <my-component v-once :comment=\"msg\"></my-component>\n  <!-- v-for directive -->\n  <ul>\n    <li v-for=\"i in list\" v-once>{{i}}</li>\n  </ul>\n  ```\n\n- **See also:**\n  - [Data Binding Syntax - interpolations](../guide/syntax.html#Text)\n  - [Components - Cheap Static Components with v-once](../guide/components.html#Cheap-Static-Components-with-v-once)\n\n## Special Attributes\n\n### key\n\n- **Expects:** `string`\n\n  The `key` special attribute is primarily used as a hint for Vue's virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.\n\n  Children of the same common parent must have **unique keys**. Duplicate keys will cause render errors.\n\n  The most common use case is combined with `v-for`:\n\n  ``` html\n  <ul>\n    <li v-for=\"item in items\" :key=\"item.id\">...</li>\n  </ul>\n  ```\n\n  It can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:\n\n  - Properly trigger lifecycle hooks of a component\n  - Trigger transitions\n\n  For example:\n\n  ``` html\n  <transition>\n    <span :key=\"text\">{{ text }}</span>\n  </transition>\n  ```\n\n  When `text` changes, the `<span>` will always be replaced instead of patched, so a transition will be triggered.\n\n### ref\n\n- **Expects:** `string`\n\n  `ref` is used to register a reference to an element or a child component. The reference will be registered under the parent component's `$refs` object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance:\n\n  ``` html\n  <!-- vm.$refs.p will be the DOM node -->\n  <p ref=\"p\">hello</p>\n\n  <!-- vm.$refs.child will be the child comp instance -->\n  <child-comp ref=\"child\"></child-comp>\n  ```\n\n  When used on elements/components with `v-for`, the registered reference will be an Array containing DOM nodes or component instances.\n\n  An important note about the ref registration timing: because the refs themselves are created as a result of the render function, you cannot access them on the initial render - they don't exist yet! `$refs` is also non-reactive, therefore you should not attempt to use it in templates for data-binding.\n\n- **See also:** [Child Component Refs](../guide/components.html#Child-Component-Refs)\n\n### slot\n\n- **Expects:** `string`\n\n  Used on content inserted into child components to indicate which named slot the content belongs to.\n\n  For detailed usage, see the guide section linked below.\n\n- **See also:** [Named Slots](../guide/components.html#Named-Slots)\n\n### is\n\n- **Expects:** `string`\n\n  Used for [dynamic components](../guide/components.html#Dynamic-Components) and to work around [limitations of in-DOM templates](../guide/components.html#DOM-Template-Parsing-Caveats).\n\n  For example:\n\n  ``` html\n  <!-- component changes when currentView changes -->\n  <component v-bind:is=\"currentView\"></component>\n\n  <!-- necessary because <my-row> would be invalid inside -->\n  <!-- a <table> element and so would be hoisted out      -->\n  <table>\n    <tr is=\"my-row\"></tr>\n  </table>\n  ```\n\n  For detailed usage, follow the links in the description above.\n\n- **See also:**\n  - [Dynamic Components](../guide/components.html#Dynamic-Components)\n  - [DOM Template Parsing Caveats](../guide/components.html#DOM-Template-Parsing-Caveats)\n\n## Built-In Components\n\n### component\n\n- **Props:**\n  - `is` - string | ComponentDefinition | ComponentConstructor\n  - `inline-template` - boolean\n\n- **Usage:**\n\n  A \"meta component\" for rendering dynamic components. The actual component to render is determined by the `is` prop:\n\n  ```html\n  <!-- a dynamic component controlled by -->\n  <!-- the `componentId` property on the vm -->\n  <component :is=\"componentId\"></component>\n\n  <!-- can also render registered component or component passed as prop -->\n  <component :is=\"$options.components.child\"></component>\n  ```\n\n- **See also:** [Dynamic Components](../guide/components.html#Dynamic-Components)\n\n### transition\n\n- **Props:**\n  - `name` - string, Used to automatically generate transition CSS class names. e.g. `name: 'fade'` will auto expand to `.fade-enter`, `.fade-enter-active`, etc. Defaults to `\"v\"`.\n  - `appear` - boolean, Whether to apply transition on initial render. Defaults to `false`.\n  - `css` - boolean, Whether to apply CSS transition classes. Defaults to `true`. If set to `false`, will only trigger JavaScript hooks registered via component events.\n  - `type` - string, Specify the type of transition events to wait for to determine transition end timing. Available values are `\"transition\"` and `\"animation\"`. By default, it will automatically detect the type that has a longer duration.\n  - `mode` - string, Controls the timing sequence of leaving/entering transitions. Available modes are `\"out-in\"` and `\"in-out\"`; defaults to simultaneous.\n  - `enter-class` - string\n  - `leave-class` - string\n  - `appear-class` - string\n  - `enter-to-class` - string\n  - `leave-to-class` - string\n  - `appear-to-class` - string\n  - `enter-active-class` - string\n  - `leave-active-class` - string\n  - `appear-active-class` - string\n\n- **Events:**\n  - `before-enter`\n  - `before-leave`\n  - `before-appear`\n  - `enter`\n  - `leave`\n  - `appear`\n  - `after-enter`\n  - `after-leave`\n  - `after-appear`\n  - `enter-cancelled`\n  - `leave-cancelled` (`v-show` only)\n  - `appear-cancelled`\n\n- **Usage:**\n\n  `<transition>` serve as transition effects for **single** element/component. The `<transition>` does not render an extra DOM element, nor does it show up in the inspected component hierarchy. It simply applies the transition behavior to the wrapped content inside.\n\n  ```html\n  <!-- simple element -->\n  <transition>\n    <div v-if=\"ok\">toggled content</div>\n  </transition>\n\n  <!-- dynamic component -->\n  <transition name=\"fade\" mode=\"out-in\" appear>\n    <component :is=\"view\"></component>\n  </transition>\n\n  <!-- event hooking -->\n  <div id=\"transition-demo\">\n    <transition @after-enter=\"transitionComplete\">\n      <div v-show=\"ok\">toggled content</div>\n    </transition>\n  </div>\n  ```\n\n  ``` js\n  new Vue({\n    ...\n    methods: {\n      transitionComplete: function (el) {\n        // for passed 'el' that DOM element as the argument, something ...\n      }\n    }\n    ...\n  }).$mount('#transition-demo')\n  ```\n\n- **See also:** [Transitions: Entering, Leaving, and Lists](../guide/transitions.html)\n\n### transition-group\n\n- **Props:**\n  - `tag` - string, defaults to `span`.\n  - `move-class` - overwrite CSS class applied during moving transition.\n  - exposes the same props as `<transition>` except `mode`.\n\n- **Events:**\n  - exposes the same events as `<transition>`.\n\n- **Usage:**\n\n  `<transition-group>` serve as transition effects for **multiple** elements/components. The `<transition-group>` renders a real DOM element. By default it renders a `<span>`, and you can configure what element is should render via the `tag` attribute.\n\n  Note every child in a `<transition-group>` must be **uniquely keyed** for the animations to work properly.\n\n  `<transition-group>` supports moving transitions via CSS transform. When a child's position on screen has changed after an updated, it will get applied a moving CSS class (auto generated from the `name` attribute or configured with the `move-class` attribute). If the CSS `transform` property is \"transition-able\" when the moving class is applied, the element will be smoothly animated to its destination using the [FLIP technique](https://aerotwist.com/blog/flip-your-animations/).\n\n  ```html\n  <transition-group tag=\"ul\" name=\"slide\">\n    <li v-for=\"item in items\" :key=\"item.id\">\n      {{ item.text }}\n    </li>\n  </transition-group>\n  ```\n\n- **See also:** [Transitions: Entering, Leaving, and Lists](../guide/transitions.html)\n\n### keep-alive\n\n- **Props:**\n  - `include` - string or RegExp. Only components matched by this will be cached.\n  - `exclude` - string or RegExp. Any component matched by this will not be cached.\n\n- **Usage:**\n\n  When wrapped around a dynamic component, `<keep-alive>` caches the inactive component instances without destroying them. Similar to `<transition>`, `<keep-alive>` is an abstract component: it doesn't render a DOM element itself, and doesn't show up in the component parent chain.\n\n  When a component is toggled inside `<keep-alive>`, its `activated` and `deactivated` lifecycle hooks will be invoked accordingly.\n\n  > In 2.2.0 and above, `activated` and `deactivated` will fire for all nested components inside a `<keep-alive>` tree.\n\n  Primarily used with preserve component state or avoid re-rendering.\n\n  ```html\n  <!-- basic -->\n  <keep-alive>\n    <component :is=\"view\"></component>\n  </keep-alive>\n\n  <!-- multiple conditional children -->\n  <keep-alive>\n    <comp-a v-if=\"a > 1\"></comp-a>\n    <comp-b v-else></comp-b>\n  </keep-alive>\n\n  <!-- used together with <transition> -->\n  <transition>\n    <keep-alive>\n      <component :is=\"view\"></component>\n    </keep-alive>\n  </transition>\n  ```\n\n- **`include` and `exclude`**\n\n  > New in 2.1.0\n\n  The `include` and `exclude` props allow components to be conditionally cached. Both props can either be a comma-delimited string or a RegExp:\n\n  ``` html\n  <!-- comma-delimited string -->\n  <keep-alive include=\"a,b\">\n    <component :is=\"view\"></component>\n  </keep-alive>\n\n  <!-- regex (use v-bind) -->\n  <keep-alive :include=\"/a|b/\">\n    <component :is=\"view\"></component>\n  </keep-alive>\n  ```\n\n  The match is first checked on the component's own `name` option, then its local registration name (the key in the parent's `components` option) if the `name` option is not available. Anonymous components cannot be matched against.\n\n  <p class=\"tip\">`<keep-alive>` does not work with functional components because they do not have instances to be cached.</p>\n\n- **See also:** [Dynamic Components - keep-alive](../guide/components.html#keep-alive)\n\n### slot\n\n- **Props:**\n  - `name` - string, Used for named slot.\n\n- **Usage:**\n\n  `<slot>` serve as content distribution outlets in component templates. `<slot>` itself will be replaced.\n\n  For detailed usage, see the guide section linked below.\n\n- **See also:** [Content Distribution with Slots](../guide/components.html#Content-Distribution-with-Slots)\n\n## VNode Interface\n\n- Please refer to the [VNode class declaration](https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js).\n\n## Server-Side Rendering\n\n- Please refer to the [vue-server-renderer package documentation](https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer).\n","date":"2017-06-11T22:12:06.000Z","updated":"2017-06-11T19:28:10.000Z","path":"portland/api/index.html","title":"","comments":1,"layout":"page","_id":"cj3wg8kno000lq0pw545opgvp","content":"<h2 id=\"Global-Config\"><a href=\"#Global-Config\" class=\"headerlink\" title=\"Global Config\"></a>Global Config</h2><p><code>Vue.config</code> is an object containing Vue’s global configurations. You can modify its properties listed below before bootstrapping your application:</p>\n<h3 id=\"silent\"><a href=\"#silent\" class=\"headerlink\" title=\"silent\"></a>silent</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>false</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.silent = <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>Suppress all Vue logs and warnings.</p>\n</li>\n</ul>\n<h3 id=\"optionMergeStrategies\"><a href=\"#optionMergeStrategies\" class=\"headerlink\" title=\"optionMergeStrategies\"></a>optionMergeStrategies</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function }</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>{}</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.optionMergeStrategies._my_option = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">parent, child, vm</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> child + <span class=\"number\">1</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Profile = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">_my_option</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Profile.options._my_option = 2</span></div></pre></td></tr></table></figure>\n<p>Define custom merging strategies for options.</p>\n<p>The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html#Custom-Option-Merge-Strategies\">Custom Option Merging Strategies</a></p>\n</li>\n</ul>\n<h3 id=\"devtools\"><a href=\"#devtools\" class=\"headerlink\" title=\"devtools\"></a>devtools</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>true</code> (<code>false</code> in production builds)</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// make sure to set this synchronously immediately after loading Vue</span></div><div class=\"line\">Vue.config.devtools = <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>Configure whether to allow <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"external\">vue-devtools</a> inspection. This option’s default value is <code>true</code> in development builds and <code>false</code> in production builds. You can set it to <code>true</code> to enable inspection for production builds.</p>\n</li>\n</ul>\n<h3 id=\"errorHandler\"><a href=\"#errorHandler\" class=\"headerlink\" title=\"errorHandler\"></a>errorHandler</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>undefined</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.errorHandler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, vm, info</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// handle error</span></div><div class=\"line\">  <span class=\"comment\">// `info` is a Vue-specific error info, e.g. which lifecycle hook</span></div><div class=\"line\">  <span class=\"comment\">// the error was found in. Only available in 2.2.0+</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Assign a handler for uncaught errors during component render function and watchers. The handler gets called with the error and the Vue instance.</p>\n<blockquote>\n<p>In 2.2.0, this hook also captures errors in component lifecycle hooks. Also, when this hook is <code>undefined</code>, captured errors will be logged with <code>console.error</code> instead of crashing the app.</p>\n<p><a href=\"https://sentry.io\" target=\"_blank\" rel=\"external\">Sentry</a>, an error tracking service, provides <a href=\"https://sentry.io/for/vue/\" target=\"_blank\" rel=\"external\">official integration</a> using this option.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"ignoredElements\"><a href=\"#ignoredElements\" class=\"headerlink\" title=\"ignoredElements\"></a>ignoredElements</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string&gt;</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>[]</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.ignoredElements = [</div><div class=\"line\">  <span class=\"string\">'my-custom-web-component'</span>, <span class=\"string\">'another-web-component'</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>Make Vue ignore custom elements defined outside of Vue (e.g., using the Web Components APIs). Otherwise, it will throw a warning about an <code>Unknown custom element</code>, assuming that you forgot to register a global component or misspelled a component name.</p>\n</li>\n</ul>\n<h3 id=\"keyCodes\"><a href=\"#keyCodes\" class=\"headerlink\" title=\"keyCodes\"></a>keyCodes</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: number | Array&lt;number&gt; }</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>{}</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.keyCodes = &#123;</div><div class=\"line\">  <span class=\"attr\">v</span>: <span class=\"number\">86</span>,</div><div class=\"line\">  <span class=\"attr\">f1</span>: <span class=\"number\">112</span>,</div><div class=\"line\">  <span class=\"comment\">// camelCase won`t work</span></div><div class=\"line\">  mediaPlayPause: <span class=\"number\">179</span>,</div><div class=\"line\">  <span class=\"comment\">// instead you can use kebab-case with double quotation marks</span></div><div class=\"line\">  <span class=\"string\">\"media-play-pause\"</span> : <span class=\"number\">179</span>,</div><div class=\"line\">  <span class=\"attr\">up</span>: [<span class=\"number\">38</span>, <span class=\"number\">87</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> @<span class=\"attr\">keyup.media-play-pause</span>=<span class=\"string\">\"method\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Define custom key alias(es) for v-on.</p>\n</li>\n</ul>\n<h3 id=\"performance\"><a href=\"#performance\" class=\"headerlink\" title=\"performance\"></a>performance</h3><blockquote>\n<p>New in 2.2.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>false (from 2.2.3)</code></p>\n</li>\n<li><p><strong>Usage</strong>:</p>\n<p>Set this to <code>true</code> to enable component init, compile, render and patch performance tracing in the browser devtool timeline. Only works in development mode and in browsers that support the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark\" target=\"_blank\" rel=\"external\">performance.mark</a> API.</p>\n</li>\n</ul>\n<h3 id=\"productionTip\"><a href=\"#productionTip\" class=\"headerlink\" title=\"productionTip\"></a>productionTip</h3><blockquote>\n<p>New in 2.2.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>true</code></p>\n</li>\n<li><p><strong>Usage</strong>:</p>\n<p>Set this to <code>false</code> to prevent the production tip on Vue startup.</p>\n</li>\n</ul>\n<h2 id=\"Global-API\"><a href=\"#Global-API\" class=\"headerlink\" title=\"Global API\"></a>Global API</h2><h3 id=\"Vue-extend\">Vue.extend( options )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} options</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Create a “subclass” of the base Vue constructor. The argument should be an object containing component options.</p>\n<p>The special case to note here is the <code>data</code> option - it must be a function when used with <code>Vue.extend()</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mount-point\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// create constructor</span></div><div class=\"line\"><span class=\"keyword\">var</span> Profile = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">firstName</span>: <span class=\"string\">'Walter'</span>,</div><div class=\"line\">      <span class=\"attr\">lastName</span>: <span class=\"string\">'White'</span>,</div><div class=\"line\">      <span class=\"attr\">alias</span>: <span class=\"string\">'Heisenberg'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// create an instance of Profile and mount it on an element</span></div><div class=\"line\"><span class=\"keyword\">new</span> Profile().$mount(<span class=\"string\">'#mount-point'</span>)</div></pre></td></tr></table></figure>\n<p>Will result in:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Walter White aka Heisenberg<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html\">Components</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-nextTick\">Vue.nextTick( [callback, context] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Function} [callback]</code></li>\n<li><code>{Object} [context]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modify data</span></div><div class=\"line\">vm.msg = <span class=\"string\">'Hello'</span></div><div class=\"line\"><span class=\"comment\">// DOM not updated yet</span></div><div class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// DOM updated</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>New in 2.1.0: returns a Promise if no callback is provided and Promise is supported in the execution environment.</p>\n</blockquote>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html#Async-Update-Queue\">Async Update Queue</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-set\">Vue.set( target, key, value )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Array} target</code></li>\n<li><code>{string | number} key</code></li>\n<li><code>{any} value</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> the set value.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Set a property on an object. If the object is reactive, ensure the property is created as a reactive property and trigger view updates. This is primarily used to get around the limitation that Vue cannot detect property additions.</p>\n<p><strong>Note the object cannot be a Vue instance, or the root data object of a Vue instance.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-delete\">Vue.delete( target, key )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Array} target</code></li>\n<li><code>{string | number} key</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it.</p>\n<blockquote>\n<p>Also works with on Array + index in 2.2.0+.</p>\n</blockquote>\n<p class=\"tip\">The target object cannot be a Vue instance, or the root data object of a Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-directive\">Vue.directive( id, [definition] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function | Object} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global directive.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// register</span></div><div class=\"line\">Vue.directive(<span class=\"string\">'my-directive'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">bind</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">inserted</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">update</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">componentUpdated</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">unbind</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// register (simple function directive)</span></div><div class=\"line\">Vue.directive(<span class=\"string\">'my-directive'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// this will be called as `bind` and `update`</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getter, return the directive definition if registered</span></div><div class=\"line\"><span class=\"keyword\">var</span> myDirective = Vue.directive(<span class=\"string\">'my-directive'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/custom-directive.html\">Custom Directives</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-filter\">Vue.filter( id, [definition] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global filter.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// register</span></div><div class=\"line\">Vue.filter(<span class=\"string\">'my-filter'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// return processed value</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getter, return the filter if registered</span></div><div class=\"line\"><span class=\"keyword\">var</span> myFilter = Vue.filter(<span class=\"string\">'my-filter'</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Vue-component\">Vue.component( id, [definition] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function | Object} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global component. Registration also automatically sets the component’s <code>name</code> with the given <code>id</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// register an extended constructor</span></div><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, Vue.extend(&#123; <span class=\"comment\">/* ... */</span> &#125;))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// register an options object (automatically call Vue.extend)</span></div><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123; <span class=\"comment\">/* ... */</span> &#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// retrieve a registered component (always return constructor)</span></div><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.component(<span class=\"string\">'my-component'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html\">Components</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-use\">Vue.use( plugin )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Function} plugin</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Install a Vue.js plugin. If the plugin is an Object, it must expose an <code>install</code> method. If it is a function itself, it will be treated as the install method. The install method will be called with Vue as the argument.</p>\n<p>When this method is called on the same plugin multiple times, the plugin will be installed only once.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/plugins.html\">Plugins</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-mixin\">Vue.mixin( mixin )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} mixin</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Apply a mixin globally, which affects every Vue instance created afterwards. This can be used by plugin authors to inject custom behavior into components. <strong>Not recommended in application code</strong>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html#Global-Mixin\">Global Mixins</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-compile\">Vue.compile( template )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} template</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Compiles a template string into a render function. <strong>Only available in the full build.</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> res = Vue.compile(<span class=\"string\">'&lt;div&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/div&gt;'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">'hello'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>: res.render,</div><div class=\"line\">  <span class=\"attr\">staticRenderFns</span>: res.staticRenderFns</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/render-function.html\">Render Functions</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-version\">Vue.version</h3>\n\n<ul>\n<li><p><strong>Details</strong>: Provides the installed version of Vue as a string. This is especially useful for community plugins and components, where you might use different strategies for different versions.</p>\n</li>\n<li><p><strong>Usage</strong>:</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> version = <span class=\"built_in\">Number</span>(Vue.version.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (version === <span class=\"number\">2</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// Vue v2.x.x</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (version === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// Vue v1.x.x</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// Unsupported versions of Vue</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Options-Data\"><a href=\"#Options-Data\" class=\"headerlink\" title=\"Options / Data\"></a>Options / Data</h2><h3 id=\"data\"><a href=\"#data\" class=\"headerlink\" title=\"data\"></a>data</h3><ul>\n<li><p><strong>Type:</strong> <code>Object | Function</code></p>\n</li>\n<li><p><strong>Restriction:</strong> Only accepts <code>Function</code> when used in a component definition.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The data object for the Vue instance. Vue will recursively convert its properties into getter/setters to make it “reactive”. <strong>The object must be plain</strong>: native objects such as browser API objects and prototype properties are ignored. A rule of thumb is that data should just be data - it is not recommended to observe objects with its own stateful behavior.</p>\n<p>Once observed, you can no longer add reactive properties to the root data object. It is therefore recommended to declare all root-level reactive properties upfront, before creating the instance.</p>\n<p>After the instance is created, the original data object can be accessed as <code>vm.$data</code>. The Vue instance also proxies all the properties found on the data object, so <code>vm.a</code> will be equivalent to <code>vm.$data.a</code>.</p>\n<p>Properties that start with <code>_</code> or <code>$</code> will <strong>not</strong> be proxied on the Vue instance because they may conflict with Vue’s internal properties and API methods. You will have to access them as <code>vm.$data._property</code>.</p>\n<p>When defining a <strong>component</strong>, <code>data</code> must be declared as a function that returns the initial data object, because there will be many instances created using the same definition. If we still use a plain object for <code>data</code>, that same object will be <strong>shared by reference</strong> across all instances created! By providing a <code>data</code> function, every time a new instance is created, we can simply call it to return a fresh copy of the initial data.</p>\n<p>If required, a deep clone of the original object can be obtained by passing <code>vm.$data</code> through <code>JSON.parse(JSON.stringify(...))</code>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// direct instance creation</span></div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: data</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.a <span class=\"comment\">// -&gt; 1</span></div><div class=\"line\">vm.$data === data <span class=\"comment\">// -&gt; true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// must use function when in Vue.extend()</span></div><div class=\"line\"><span class=\"keyword\">var</span> Component = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p class=\"tip\">Note that <strong>you should not use an arrow function with the <code>data</code> property</strong> (e.g. <code>data: () =&gt; { return { a: this.myProp }}</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.myProp</code> will be undefined.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string&gt; | Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A list/hash of attributes that are exposed to accept data from the parent component. It has a simple Array-based syntax and an alternative Object-based syntax that allows advanced configurations such as type checking, custom validation and default values.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// simple syntax</span></div><div class=\"line\">Vue.component(<span class=\"string\">'props-demo-simple'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'size'</span>, <span class=\"string\">'myMessage'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// object syntax with validation</span></div><div class=\"line\">Vue.component(<span class=\"string\">'props-demo-advanced'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// just type check</span></div><div class=\"line\">    height: <span class=\"built_in\">Number</span>,</div><div class=\"line\">    <span class=\"comment\">// type check plus other validations</span></div><div class=\"line\">    age: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">default</span>: <span class=\"number\">0</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      <span class=\"attr\">validator</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> value &gt;= <span class=\"number\">0</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Props\">Props</a></p>\n</li>\n</ul>\n<h3 id=\"propsData\"><a href=\"#propsData\" class=\"headerlink\" title=\"propsData\"></a>propsData</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: any }</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected in instance creation via <code>new</code>.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Pass props to an instance during its creation. This is primarily intended to make unit testing easier.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Comp = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'msg'</span>],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Comp(&#123;</div><div class=\"line\">  <span class=\"attr\">propsData</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">'hello'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function | { get: Function, set: Function } }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Computed properties to be mixed into the Vue instance. All getters and setters have their <code>this</code> context automatically bound to the Vue instance.</p>\n<p class=\"tip\">Note that <strong>you should not use an arrow function to define a computed property</strong> (e.g. <code>aDouble: () =&gt; this.a * 2</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.a</code> will be undefined.</p>\n\n<p>Computed properties are cached, and only re-computed on reactive dependency changes. Note that if a certain dependency is out of the instance’s scope (i.e. not reactive), the computed property will <strong>not</strong> be updated.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// get only, just need a function</span></div><div class=\"line\">    aDouble: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a * <span class=\"number\">2</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// both get and set</span></div><div class=\"line\">    aPlus: &#123;</div><div class=\"line\">      <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + <span class=\"number\">1</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.a = v - <span class=\"number\">1</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.aPlus   <span class=\"comment\">// -&gt; 2</span></div><div class=\"line\">vm.aPlus = <span class=\"number\">3</span></div><div class=\"line\">vm.a       <span class=\"comment\">// -&gt; 2</span></div><div class=\"line\">vm.aDouble <span class=\"comment\">// -&gt; 4</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/computed.html\">Computed Properties</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"methods\"><a href=\"#methods\" class=\"headerlink\" title=\"methods\"></a>methods</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Methods to be mixed into the Vue instance. You can access these methods directly on the VM instance, or use them in directive expressions. All methods will have their <code>this</code> context automatically bound to the Vue instance.</p>\n<p class=\"tip\">Note that <strong>you should not use an arrow function to define a method</strong> (e.g. <code>plus: () =&gt; this.a++</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.a</code> will be undefined.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">plus</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.a++</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.plus()</div><div class=\"line\">vm.a <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/events.html\">Methods and Event Handling</a></p>\n</li>\n</ul>\n<h3 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: string | Function | Object }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. The Vue instance will call <code>$watch()</code> for each entry in the object at instantiation.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">3</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'new: %s, old: %s'</span>, val, oldVal)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// string method name</span></div><div class=\"line\">    b: <span class=\"string\">'someMethod'</span>,</div><div class=\"line\">    <span class=\"comment\">// deep watcher</span></div><div class=\"line\">    c: &#123;</div><div class=\"line\">      <span class=\"attr\">handler</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;,</div><div class=\"line\">      <span class=\"attr\">deep</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.a = <span class=\"number\">2</span> <span class=\"comment\">// -&gt; new: 2, old: 1</span></div></pre></td></tr></table></figure>\n<p class=\"tip\">Note that <strong>you should not use an arrow function to define a watcher</strong> (e.g. <code>searchQuery: newValue =&gt; this.updateAutocomplete(newValue)</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.updateAutocomplete</code> will be undefined.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#vm-watch\">Instance Methods - vm.$watch</a></p>\n</li>\n</ul>\n<h2 id=\"Options-DOM\"><a href=\"#Options-DOM\" class=\"headerlink\" title=\"Options / DOM\"></a>Options / DOM</h2><h3 id=\"el\"><a href=\"#el\" class=\"headerlink\" title=\"el\"></a>el</h3><ul>\n<li><p><strong>Type:</strong> <code>string | HTMLElement</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected in instance creation via <code>new</code>.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Provide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement.</p>\n<p>After the instance is mounted, the resolved element will be accessible as <code>vm.$el</code>.</p>\n<p>If this option is available at instantiation, the instance will immediately enter compilation; otherwise, the user will have to explicitly call <code>vm.$mount()</code> to manually start the compilation.</p>\n<p class=\"tip\">The provided element merely serves as a mounting point. Unlike in Vue 1.x, the mounted element will be replaced with Vue-generated DOM in all cases. It is therefore not recommended to mount the root instance to <code>&lt;html&gt;</code> or <code>&lt;body&gt;</code>.</p>\n\n<p class=\"tip\">If neither <code>render</code> function nor <code>template</code> option is present, the in-DOM HTML of the mounting DOM element will be extracted as the template. In this case, Runtime + Compiler build of Vue should be used.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></li>\n<li><a href=\"../guide/installation.html#Runtime-Compiler-vs-Runtime-only\">Runtime + Compiler vs. Runtime-only</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"template\"><a href=\"#template\" class=\"headerlink\" title=\"template\"></a>template</h3><ul>\n<li><p><strong>Type:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A string template to be used as the markup for the Vue instance. The template will <strong>replace</strong> the mounted element. Any existing markup inside the mounted element will be ignored, unless content distribution slots are present in the template.</p>\n<p>If the string starts with <code>#</code> it will be used as a querySelector and use the selected element’s innerHTML as the template string. This allows the use of the common <code>&lt;script type=&quot;x-template&quot;&gt;</code> trick to include templates.</p>\n<p class=\"tip\">From a security perspective, you should only use Vue templates that you can trust. Never use user-generated content as your template.</p>\n\n<p class=\"tip\">If render function is present in the Vue option, the template will be ignored.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></li>\n<li><a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h3><ul>\n<li><p><strong>Type:</strong> <code>(createElement: () =&gt; VNode) =&gt; VNode</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An alternative to string templates allowing you to leverage the full programmatic power of JavaScript. The render function receives a <code>createElement</code> method as it’s first argument used to create <code>VNode</code>s.</p>\n<p>If the component is a functional component, the render function also receives an extra argument <code>context</code>, which provides access to contextual data since functional components are instance-less.</p>\n<p class=\"tip\">The <code>render</code> function has priority over the render function compiled from <code>template</code> option or in-DOM HTML template of the mounting element which is specified by the <code>el</code> option.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/render-function\">Render Functions</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"renderError\"><a href=\"#renderError\" class=\"headerlink\" title=\"renderError\"></a>renderError</h3><blockquote>\n<p>New in 2.2.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>(createElement: () =&gt; VNode, error: Error) =&gt; VNode</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p><strong>Only works in development mode.</strong></p>\n<p>Provide an alternative render output when the default <code>render</code> function encounters an error. The error will be passed to <code>renderError</code> as the second argument. This is particularly useful when used together with hot-reload.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  render (h) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'oops'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  renderError (h, err) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">'pre'</span>, &#123; <span class=\"attr\">style</span>: &#123; <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;&#125;, err.stack)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/render-function\">Render Functions</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Options-Lifecycle-Hooks\"><a href=\"#Options-Lifecycle-Hooks\" class=\"headerlink\" title=\"Options / Lifecycle Hooks\"></a>Options / Lifecycle Hooks</h2><p>All lifecycle hooks automatically have their <code>this</code> context bound to the instance, so that you can access data, computed properties, and methods. This means <strong>you should not use an arrow function to define a lifecycle method</strong> (e.g. <code>created: () =&gt; this.fetchTodos()</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.fetchTodos</code> will be undefined.</p>\n<h3 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate\"></a>beforeCreate</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called synchronously after the instance has just been initialized, before data observation and event/watcher setup.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created\"></a>created</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called synchronously after the instance is created. At this stage, the instance has finished processing the options which means the following have been set up: data observation, computed properties, methods, watch/event callbacks. However, the mounting phase has not been started, and the <code>$el</code> property will not be available yet.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"beforeMount\"><a href=\"#beforeMount\" class=\"headerlink\" title=\"beforeMount\"></a>beforeMount</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called right before the mounting begins: the <code>render</code> function is about to be called for the first time.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted\"></a>mounted</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after the instance has just been mounted where <code>el</code> is replaced by the newly created <code>vm.$el</code>. If the root instance is mounted to an in-document element, <code>vm.$el</code> will also be in-document when <code>mounted</code> is called.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"beforeUpdate\"><a href=\"#beforeUpdate\" class=\"headerlink\" title=\"beforeUpdate\"></a>beforeUpdate</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when the data changes, before the virtual DOM is re-rendered and patched.</p>\n<p>You can perform further state changes in this hook and they will not trigger additional re-renders.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"updated\"><a href=\"#updated\" class=\"headerlink\" title=\"updated\"></a>updated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after a data change causes the virtual DOM to be re-rendered and patched.</p>\n<p>The component’s DOM will have been updated when this hook is called, so you can perform DOM-dependent operations here. However, in most cases you should avoid changing state inside the hook. To react to state changes, it’s usually better to use a <a href=\"#computed\">computed property</a> or <a href=\"#watch\">watcher</a> instead.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"activated\"><a href=\"#activated\" class=\"headerlink\" title=\"activated\"></a>activated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when a kept-alive component is activated.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#keep-alive\">Built-in Components - keep-alive</a></li>\n<li><a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"deactivated\"><a href=\"#deactivated\" class=\"headerlink\" title=\"deactivated\"></a>deactivated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when a kept-alive component is deactivated.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#keep-alive\">Built-in Components - keep-alive</a></li>\n<li><a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"beforeDestroy\"><a href=\"#beforeDestroy\" class=\"headerlink\" title=\"beforeDestroy\"></a>beforeDestroy</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called right before a Vue instance is destroyed. At this stage the instance is still fully functional.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"destroyed\"><a href=\"#destroyed\" class=\"headerlink\" title=\"destroyed\"></a>destroyed</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after a Vue instance has been destroyed. When this hook is called, all directives of the Vue instance have been unbound, all event listeners have been removed, and all child Vue instances have also been destroyed.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h2 id=\"Options-Assets\"><a href=\"#Options-Assets\" class=\"headerlink\" title=\"Options / Assets\"></a>Options / Assets</h2><h3 id=\"directives\"><a href=\"#directives\" class=\"headerlink\" title=\"directives\"></a>directives</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of directives to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/custom-directive.html\">Custom Directives</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"filters\"><a href=\"#filters\" class=\"headerlink\" title=\"filters\"></a>filters</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of filters to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#Vue-filter\"><code>Vue.filter</code></a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"components\"></a>components</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of components to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/components.html\">Components</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Options-Composition\"><a href=\"#Options-Composition\" class=\"headerlink\" title=\"Options / Composition\"></a>Options / Composition</h2><h3 id=\"parent\"><a href=\"#parent\" class=\"headerlink\" title=\"parent\"></a>parent</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Specify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as <code>this.$parent</code> for the child, and the child will be pushed into the parent’s <code>$children</code> array.</p>\n<p class=\"tip\">Use <code>$parent</code> and <code>$children</code> sparingly - they mostly serve as an escape-hatch. Prefer using props and events for parent-child communication.</p>\n\n</li>\n</ul>\n<h3 id=\"mixins\"><a href=\"#mixins\" class=\"headerlink\" title=\"mixins\"></a>mixins</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;Object&gt;</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The <code>mixins</code> option accepts an array of mixin objects. These mixin objects can contain instance options just like normal instance objects, and they will be merged against the eventual options using the same option merging logic in <code>Vue.extend()</code>. e.g. If your mixin contains a created hook and the component itself also has one, both functions will be called.</p>\n<p>Mixin hooks are called in the order they are provided, and called before the component’s own hooks.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mixin = &#123;</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>) &#125;,</div><div class=\"line\">  <span class=\"attr\">mixins</span>: [mixin]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// -&gt; 1</span></div><div class=\"line\"><span class=\"comment\">// -&gt; 2</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html\">Mixins</a></p>\n</li>\n</ul>\n<h3 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h3><ul>\n<li><p><strong>Type:</strong> <code>Object | Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Allows declaratively extending another component (could be either a plain options object or a constructor) without having to use <code>Vue.extend</code>. This is primarily intended to make it easier to extend between single file components.</p>\n<p>This is similar to <code>mixins</code>, the difference being that the component’s own options takes higher priority than the source component being extended.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> CompA = &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// extend CompA without having to call Vue.extend on either</span></div><div class=\"line\"><span class=\"keyword\">var</span> CompB = &#123;</div><div class=\"line\">  <span class=\"attr\">extends</span>: CompA,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"provide-inject\"><a href=\"#provide-inject\" class=\"headerlink\" title=\"provide / inject\"></a>provide / inject</h3><blockquote>\n<p>New in 2.2.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong></p>\n<ul>\n<li><strong>provide:</strong> <code>Object | () =&gt; Object</code></li>\n<li><strong>inject:</strong> <code>Array&lt;string&gt; | { [key: string]: string | Symbol }</code></li>\n</ul>\n</li>\n<li><p><strong>Details:</strong></p>\n<p class=\"tip\"><code>provide</code> and <code>inject</code> are primarily provided for advanced plugin / component library use cases. It is NOT recommended to use them in generic application code.</p>\n\n<p>This pair of options are used together to allow an ancestor component to serve as a dependency injector for its all descendants, regardless of how deep the component hierarchy is, as long as they are in the same parent chain. If you are familiar with React, this is very similar to React’s context feature.</p>\n<p>The <code>provide</code> option should be an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use ES2015 Symbols as keys in this object, but only in environments that natively support <code>Symbol</code> and <code>Reflect.ownKeys</code>.</p>\n<p>The <code>inject</code> options should be either an Array of strings or an object where the keys stand for the local binding name, and the value being the key (string or Symbol) to search for in available injections.</p>\n<blockquote>\n<p>Note: the <code>provide</code> and <code>inject</code> bindings are NOT reactive. This is intentional. However, if you pass down an observed object, properties on that object do remain reactive.</p>\n</blockquote>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Provider = &#123;</div><div class=\"line\">  <span class=\"attr\">provide</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = &#123;</div><div class=\"line\">  <span class=\"attr\">inject</span>: [<span class=\"string\">'foo'</span>],</div><div class=\"line\">  created () &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.foo) <span class=\"comment\">// -&gt; \"bar\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>With ES2015 Symbols, function <code>provide</code> and object <code>inject</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"built_in\">Symbol</span>()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Provider = &#123;</div><div class=\"line\">  provide () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      [s]: <span class=\"string\">'foo'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</div><div class=\"line\">  <span class=\"attr\">inject</span>: &#123; s &#125;,</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The next 2 examples only work with Vue &gt; 2.2.1. Below that version, injected values were resolved after the <code>props</code> and the <code>data</code> initialization.</p>\n</blockquote>\n<p>Using an injected value as the default for a prop:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</div><div class=\"line\">  <span class=\"attr\">inject</span>: [<span class=\"string\">'foo'</span>],</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">bar</span>: &#123;</div><div class=\"line\">      <span class=\"keyword\">default</span> () &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.foo</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Using an injected value as data entry:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</div><div class=\"line\">  <span class=\"attr\">inject</span>: [<span class=\"string\">'foo'</span>],</div><div class=\"line\">  data () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">bar</span>: <span class=\"keyword\">this</span>.foo</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Options-Misc\"><a href=\"#Options-Misc\" class=\"headerlink\" title=\"Options / Misc\"></a>Options / Misc</h2><h3 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h3><ul>\n<li><p><strong>Type:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected when used as a component option.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Allow the component to recursively invoke itself in its template. Note that when a component is registered globally with <code>Vue.component()</code>, the global ID is automatically set as its name.</p>\n<p>Another benefit of specifying a <code>name</code> option is debugging. Named components result in more helpful warning messages. Also, when inspecting an app in the <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"external\">vue-devtools</a>, unnamed components will show up as <code>&lt;AnonymousComponent&gt;</code>, which isn’t very informative. By providing the <code>name</code> option, you will get a much more informative component tree.</p>\n</li>\n</ul>\n<h3 id=\"delimiters\"><a href=\"#delimiters\" class=\"headerlink\" title=\"delimiters\"></a>delimiters</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string&gt;</code></p>\n</li>\n<li><p><strong>default:</strong> <code>[\"{{\", \"}}\"]</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Change the plain text interpolation delimiters. <strong>This option is only available in the full build.</strong></p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">delimiters</span>: [<span class=\"string\">'$&#123;'</span>, <span class=\"string\">'&#125;'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Delimiters changed to ES6 template string style</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"functional\"><a href=\"#functional\" class=\"headerlink\" title=\"functional\"></a>functional</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Causes a component to be stateless (no <code>data</code>) and instanceless (no <code>this</code> context). They are simply a <code>render</code> function that returns virtual nodes making them much cheaper to render.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/render-function.html#Functional-Components\">Functional Components</a></p>\n</li>\n</ul>\n<h3 id=\"model\"><a href=\"#model\" class=\"headerlink\" title=\"model\"></a>model</h3><blockquote>\n<p>New in 2.2.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>{ prop?: string, event?: string }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Allows a custom component to customize the prop and event used when it’s used with <code>v-model</code>. By default, <code>v-model</code> on a component uses <code>value</code> as the prop and <code>input</code> as the event, but some input types such as checkboxes and radio buttons may want to use the <code>value</code> prop for a different purpose. Using the <code>model</code> option can avoid the conflict in such cases.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-checkbox'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">model</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">prop</span>: <span class=\"string\">'checked'</span>,</div><div class=\"line\">    <span class=\"attr\">event</span>: <span class=\"string\">'change'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// this allows using the `value` prop for a different purpose</span></div><div class=\"line\">    value: <span class=\"built_in\">String</span>,</div><div class=\"line\">    <span class=\"comment\">// use `checked` as the prop which take the place of `value`</span></div><div class=\"line\">    checked: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">default</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-checkbox</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"foo\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"some value\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-checkbox</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The above will be equivalent to:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-checkbox</span></span></div><div class=\"line\">  <span class=\"attr\">:checked</span>=<span class=\"string\">\"foo\"</span></div><div class=\"line\">  @<span class=\"attr\">change</span>=<span class=\"string\">\"val =&gt; &#123; foo = val &#125;\"</span></div><div class=\"line\">  <span class=\"attr\">value</span>=<span class=\"string\">\"some value\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-checkbox</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Instance-Properties\"><a href=\"#Instance-Properties\" class=\"headerlink\" title=\"Instance Properties\"></a>Instance Properties</h2><h3 id=\"vm-data\"><a href=\"#vm-data\" class=\"headerlink\" title=\"vm.$data\"></a>vm.$data</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#data\">Options - data</a></p>\n</li>\n</ul>\n<h3 id=\"vm-props\"><a href=\"#vm-props\" class=\"headerlink\" title=\"vm.$props\"></a>vm.$props</h3><blockquote>\n<p>New in 2.2.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An object representing the current props a component has received. The Vue instance proxies access to the properties on its props object.</p>\n</li>\n</ul>\n<h3 id=\"vm-el\"><a href=\"#vm-el\" class=\"headerlink\" title=\"vm.$el\"></a>vm.$el</h3><ul>\n<li><p><strong>Type:</strong> <code>HTMLElement</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The root DOM element that the Vue instance is managing.</p>\n</li>\n</ul>\n<h3 id=\"vm-options\"><a href=\"#vm-options\" class=\"headerlink\" title=\"vm.$options\"></a>vm.$options</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">customOption</span>: <span class=\"string\">'foo'</span>,</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$options.customOption) <span class=\"comment\">// -&gt; 'foo'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-parent\"><a href=\"#vm-parent\" class=\"headerlink\" title=\"vm.$parent\"></a>vm.$parent</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The parent instance, if the current instance has one.</p>\n</li>\n</ul>\n<h3 id=\"vm-root\"><a href=\"#vm-root\" class=\"headerlink\" title=\"vm.$root\"></a>vm.$root</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The root Vue instance of the current component tree. If the current instance has no parents this value will be itself.</p>\n</li>\n</ul>\n<h3 id=\"vm-children\"><a href=\"#vm-children\" class=\"headerlink\" title=\"vm.$children\"></a>vm.$children</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;Vue instance&gt;</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The direct child components of the current instance. <strong>Note there’s no order guarantee for <code>$children</code>, and it is not reactive.</strong> If you find yourself trying to use <code>$children</code> for data binding, consider using an Array and <code>v-for</code> to generate child components, and use the Array as the source of truth.</p>\n</li>\n</ul>\n<h3 id=\"vm-slots\"><a href=\"#vm-slots\" class=\"headerlink\" title=\"vm.$slots\"></a>vm.$slots</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [name: string]: ?Array&lt;VNode&gt; }</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Used to programmatically access content <a href=\"../guide/components.html#Content-Distribution-with-Slots\">distributed by slots</a>. Each <a href=\"../guide/components.html#Named-Slots\">named slot</a> has its own corresponding property (e.g. the contents of <code>slot=&quot;foo&quot;</code> will be found at <code>vm.$slots.foo</code>). The <code>default</code> property contains any nodes not included in a named slot.</p>\n<p>Accessing <code>vm.$slots</code> is most useful when writing a component with a <a href=\"../guide/render-function.html\">render function</a>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"header\"</span>&gt;</span></div><div class=\"line\">    About Me</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here's some page content, which will be included in vm.$slots.default, because it's not inside a named slot.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"footer\"</span>&gt;</span></div><div class=\"line\">    Copyright 2016 Evan You</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>If I have some content down here, it will also be included in vm.$slots.default.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>.</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'blog-post'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> header = <span class=\"keyword\">this</span>.$slots.header</div><div class=\"line\">    <span class=\"keyword\">var</span> body   = <span class=\"keyword\">this</span>.$slots.default</div><div class=\"line\">    <span class=\"keyword\">var</span> footer = <span class=\"keyword\">this</span>.$slots.footer</div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(<span class=\"string\">'div'</span>, [</div><div class=\"line\">      createElement(<span class=\"string\">'header'</span>, header),</div><div class=\"line\">      createElement(<span class=\"string\">'main'</span>, body),</div><div class=\"line\">      createElement(<span class=\"string\">'footer'</span>, footer)</div><div class=\"line\">    ])</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#slot-1\"><code>&lt;slot&gt;</code> Component</a></li>\n<li><a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution with Slots</a></li>\n<li><a href=\"../guide/render-function.html#Slots\">Render Functions: Slots</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-scopedSlots\"><a href=\"#vm-scopedSlots\" class=\"headerlink\" title=\"vm.$scopedSlots\"></a>vm.$scopedSlots</h3><blockquote>\n<p>New in 2.1.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>{ [name: string]: props =&gt; VNode | Array&lt;VNode&gt; }</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Used to programmatically access <a href=\"../guide/components.html#Scoped-Slots\">scoped slots</a>. For each slot, including the <code>default</code> one, the object contains a corresponding function that returns VNodes.</p>\n<p>Accessing <code>vm.$scopedSlots</code> is most useful when writing a component with a <a href=\"../guide/render-function.html\">render function</a>.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#slot-1\"><code>&lt;slot&gt;</code> Component</a></li>\n<li><a href=\"../guide/components.html#Scoped-Slots\">Scoped Slots</a></li>\n<li><a href=\"../guide/render-function.html#Slots\">Render Functions: Slots</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-refs\"><a href=\"#vm-refs\" class=\"headerlink\" title=\"vm.$refs\"></a>vm.$refs</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An object that holds child components that have <code>ref</code> registered.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/components.html#Child-Component-Refs\">Child Component Refs</a></li>\n<li><a href=\"#ref\">ref</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-isServer\"><a href=\"#vm-isServer\" class=\"headerlink\" title=\"vm.$isServer\"></a>vm.$isServer</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Whether the current Vue instance is running on the server.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/ssr.html\">Server-Side Rendering</a></p>\n</li>\n</ul>\n<h2 id=\"Instance-Methods-Data\"><a href=\"#Instance-Methods-Data\" class=\"headerlink\" title=\"Instance Methods / Data\"></a>Instance Methods / Data</h2><h3 id=\"vm-watch\">vm.$watch( expOrFn, callback, [options] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string | Function} expOrFn</code></li>\n<li><code>{Function} callback</code></li>\n<li><code>{Object} [options]</code><ul>\n<li><code>{boolean} deep</code></li>\n<li><code>{boolean} immediate</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> <code>{Function} unwatch</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Watch an expression or a computed function on the Vue instance for changes. The callback gets called with the new value and the old value. The expression only accepts simple dot-delimited paths. For more complex expression, use a function instead.</p>\n</li>\n</ul>\n<p class=\"tip\">Note: when mutating (rather than replacing) an Object or an Array, the old value will be the same as new value because they reference the same Object/Array. Vue doesn’t keep a copy of the pre-mutate value.</p>\n\n<ul>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// keypath</span></div><div class=\"line\">vm.$watch(<span class=\"string\">'a.b.c'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// do something</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// function</span></div><div class=\"line\">vm.$watch(</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + <span class=\"keyword\">this</span>.b</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\">  &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p><code>vm.$watch</code> returns an unwatch function that stops firing the callback:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> unwatch = vm.$watch(<span class=\"string\">'a'</span>, cb)</div><div class=\"line\"><span class=\"comment\">// later, teardown the watcher</span></div><div class=\"line\">unwatch()</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Option: deep</strong></p>\n<p>To also detect nested value changes inside Objects, you need to pass in <code>deep: true</code> in the options argument. Note that you don’t need to do so to listen for Array mutations.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">vm.$watch(<span class=\"string\">'someObject'</span>, callback, &#123;</div><div class=\"line\">  <span class=\"attr\">deep</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div><div class=\"line\">vm.someObject.nestedValue = <span class=\"number\">123</span></div><div class=\"line\"><span class=\"comment\">// callback is fired</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Option: immediate</strong></p>\n<p>Passing in <code>immediate: true</code> in the option will trigger the callback immediately with the current value of the expression:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">vm.$watch(<span class=\"string\">'a'</span>, callback, &#123;</div><div class=\"line\">  <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// callback is fired immediately with current value of `a`</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-set\">vm.$set( target, key, value )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Array} target</code></li>\n<li><code>{string | number} key</code></li>\n<li><code>{any} value</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> the set value.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This is the <strong>alias</strong> of the global <code>Vue.set</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#Vue-set\">Vue.set</a></p>\n</li>\n</ul>\n<h3 id=\"vm-delete\">vm.$delete( target, key )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Array} target</code></li>\n<li><code>{string | number} key</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This is the <strong>alias</strong> of the global <code>Vue.delete</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#Vue-delete\">Vue.delete</a></p>\n</li>\n</ul>\n<h2 id=\"Instance-Methods-Events\"><a href=\"#Instance-Methods-Events\" class=\"headerlink\" title=\"Instance Methods / Events\"></a>Instance Methods / Events</h2><h3 id=\"vm-on\">vm.$on( event, callback )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string | Array&lt;string&gt;} event</code> (array only supported in 2.2.0+)</li>\n<li><code>{Function} callback</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Listen for a custom event on the current vm. Events can be triggered by <code>vm.$emit</code>. The callback will receive all the additional arguments passed into these event-triggering methods.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">vm.$on(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(msg)</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.$emit(<span class=\"string\">'test'</span>, <span class=\"string\">'hi'</span>)</div><div class=\"line\"><span class=\"comment\">// -&gt; \"hi\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-once\">vm.$once( event, callback )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} event</code></li>\n<li><code>{Function} callback</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Listen for a custom event, but only once. The listener will be removed once it triggers for the first time.</p>\n</li>\n</ul>\n<h3 id=\"vm-off\">vm.$off( [event, callback] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} [event]</code></li>\n<li><code>{Function} [callback]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Remove custom event listener(s).</p>\n<ul>\n<li><p>If no arguments are provided, remove all event listeners;</p>\n</li>\n<li><p>If only the event is provided, remove all listeners for that event;</p>\n</li>\n<li><p>If both event and callback are given, remove the listener for that specific callback only.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-emit\">vm.$emit( event, […args] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} event</code></li>\n<li><code>[...args]</code></li>\n</ul>\n<p>Trigger an event on the current instance. Any additional arguments will be passed into the listener’s callback function.</p>\n</li>\n</ul>\n<h2 id=\"Instance-Methods-Lifecycle\"><a href=\"#Instance-Methods-Lifecycle\" class=\"headerlink\" title=\"Instance Methods / Lifecycle\"></a>Instance Methods / Lifecycle</h2><h3 id=\"vm-mount\">vm.$mount( [elementOrSelector] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Element | string} [elementOrSelector]</code></li>\n<li><code>{boolean} [hydrating]</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> <code>vm</code> - the instance itself</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>If a Vue instance didn’t receive the <code>el</code> option at instantiation, it will be in “unmounted” state, without an associated DOM element. <code>vm.$mount()</code> can be used to manually start the mounting of an unmounted Vue instance.</p>\n<p>If <code>elementOrSelector</code> argument is not provided, the template will be rendered as an off-document element, and you will have to use native DOM API to insert it into the document yourself.</p>\n<p>The method returns the instance itself so you can chain other instance methods after it.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;Hello!&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// create and mount to #app (will replace #app)</span></div><div class=\"line\"><span class=\"keyword\">new</span> MyComponent().$mount(<span class=\"string\">'#app'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// the above is the same as:</span></div><div class=\"line\"><span class=\"keyword\">new</span> MyComponent(&#123; <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span> &#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or, render off-document and append afterwards:</span></div><div class=\"line\"><span class=\"keyword\">var</span> component = <span class=\"keyword\">new</span> MyComponent().$mount()</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>).appendChild(component.$el)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></li>\n<li><a href=\"../guide/ssr.html\">Server-Side Rendering</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-forceUpdate\">vm.$forceUpdate()</h3>\n\n<ul>\n<li><p><strong>Usage:</strong></p>\n<p>Force the Vue instance to re-render. Note it does not affect all child components, only the instance itself and child components with inserted slot content.</p>\n</li>\n</ul>\n<h3 id=\"vm-nextTick\">vm.$nextTick( [callback] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Function} [callback]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update. This is the same as the global <code>Vue.nextTick</code>, except that the callback’s <code>this</code> context is automatically bound to the instance calling this method.</p>\n<blockquote>\n<p>New in 2.1.0: returns a Promise if no callback is provided and Promise is supported in the execution environment.</p>\n</blockquote>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    example: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// modify data</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"string\">'changed'</span></div><div class=\"line\">      <span class=\"comment\">// DOM is not updated yet</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// DOM is now updated</span></div><div class=\"line\">        <span class=\"comment\">// `this` is bound to the current instance</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.doSomethingElse()</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#Vue-nextTick\">Vue.nextTick</a></li>\n<li><a href=\"../guide/reactivity.html#Async-Update-Queue\">Async Update Queue</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-destroy\">vm.$destroy()</h3>\n\n<ul>\n<li><p><strong>Usage:</strong></p>\n<p>Completely destroy a vm. Clean up its connections with other existing vms, unbind all its directives, turn off all event listeners.</p>\n<p>Triggers the <code>beforeDestroy</code> and <code>destroyed</code> hooks.</p>\n<p class=\"tip\">In normal use cases you shouldn’t have to call this method yourself. Prefer controlling the lifecycle of child components in a data-driven fashion using <code>v-if</code> and <code>v-for</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h2 id=\"Directives\"><a href=\"#Directives\" class=\"headerlink\" title=\"Directives\"></a>Directives</h2><h3 id=\"v-text\"><a href=\"#v-text\" class=\"headerlink\" title=\"v-text\"></a>v-text</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Updates the element’s <code>textContent</code>. If you need to update the part of <code>textContent</code>, you should use <code>{{ Mustache }}</code> interpolations.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- same as --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/syntax.html#Text\">Data Binding Syntax - interpolations</a></p>\n</li>\n</ul>\n<h3 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Updates the element’s <code>innerHTML</code>. <strong>Note that the contents are inserted as plain HTML - they will not be compiled as Vue templates</strong>. If you find yourself trying to compose templates using <code>v-html</code>, try to rethink the solution by using components instead.</p>\n<p class=\"tip\">Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\" target=\"_blank\" rel=\"external\">XSS attacks</a>. Only use <code>v-html</code> on trusted content and <strong>never</strong> on user-provided content.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/syntax.html#Raw-HTML\">Data Binding Syntax - interpolations</a></p>\n</li>\n</ul>\n<h3 id=\"v-show\"><a href=\"#v-show\" class=\"headerlink\" title=\"v-show\"></a>v-show</h3><ul>\n<li><p><strong>Expects:</strong> <code>any</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Toggle’s the element’s <code>display</code> CSS property based on the truthy-ness of the expression value.</p>\n<p>This directive triggers transitions when its condition changes.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html#v-show\">Conditional Rendering - v-show</a></p>\n</li>\n</ul>\n<h3 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h3><ul>\n<li><p><strong>Expects:</strong> <code>any</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Conditionally render the element based on the truthy-ness of the expression value. The element and its contained directives / components are destroyed and re-constructed during toggles. If the element is a <code>&lt;template&gt;</code> element, its content will be extracted as the conditional block.</p>\n<p>This directive triggers transitions when its condition changes.</p>\n<p class=\"tip\">When used together with v-if, v-for has a higher priority than v-if. See the <a href=\"../guide/list.html#v-for-with-v-if\">list rendering guide</a> for details.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html\">Conditional Rendering - v-if</a></p>\n</li>\n</ul>\n<h3 id=\"v-else\"><a href=\"#v-else\" class=\"headerlink\" title=\"v-else\"></a>v-else</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Restriction:</strong> previous sibling element must have <code>v-if</code> or <code>v-else-if</code>.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Denote the “else block” for <code>v-if</code> or a <code>v-if</code>/<code>v-else-if</code> chain.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"Math.random() &gt; 0.5\"</span>&gt;</span></div><div class=\"line\">  Now you see me</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></div><div class=\"line\">  Now you don't</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/conditional.html#v-else\">Conditional Rendering - v-else</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-else-if\"><a href=\"#v-else-if\" class=\"headerlink\" title=\"v-else-if\"></a>v-else-if</h3><blockquote>\n<p>New in 2.1.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Expects:</strong> <code>any</code></p>\n</li>\n<li><p><strong>Restriction:</strong> previous sibling element must have <code>v-if</code> or <code>v-else-if</code>.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Denote the “else if block” for <code>v-if</code>. Can be chained.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"type === 'A'\"</span>&gt;</span></div><div class=\"line\">  A</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'B'\"</span>&gt;</span></div><div class=\"line\">  B</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'C'\"</span>&gt;</span></div><div class=\"line\">  C</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></div><div class=\"line\">  Not A/B/C</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html#v-else-if\">Conditional Rendering - v-else-if</a></p>\n</li>\n</ul>\n<h3 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h3><ul>\n<li><p><strong>Expects:</strong> <code>Array | Object | number | string</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Render the element or template block multiple times based on the source data. The directive’s value must use the special syntax <code>alias in expression</code> to provide an alias for the current element being iterated on:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; item.text &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Alternatively, you can also specify an alias for the index (or the key if used on an Object):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(val, key) in object\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(val, key, index) in object\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The default behavior of <code>v-for</code> will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the <code>key</code> special attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; item.text &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p class=\"tip\">When used together with v-if, v-for has a higher priority than v-if. See the <a href=\"../guide/list.html#v-for-with-v-if\">list rendering guide</a> for details.</p>\n\n<p>The detailed usage for <code>v-for</code> is explained in the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/list.html\">List Rendering</a></li>\n<li><a href=\"../guide/list.html#key\">key</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h3><ul>\n<li><p><strong>Shorthand:</strong> <code>@</code></p>\n</li>\n<li><p><strong>Expects:</strong> <code>Function | Inline Statement</code></p>\n</li>\n<li><p><strong>Argument:</strong> <code>event (required)</code></p>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><code>.stop</code> - call <code>event.stopPropagation()</code>.</li>\n<li><code>.prevent</code> - call <code>event.preventDefault()</code>.</li>\n<li><code>.capture</code> - add event listener in capture mode.</li>\n<li><code>.self</code> - only trigger handler if event was dispatched from this element.</li>\n<li><code>.{keyCode | keyAlias}</code> - only trigger handler on certain keys.</li>\n<li><code>.native</code> - listen for a native event on the root element of component.</li>\n<li><code>.once</code> - trigger handler at most once.</li>\n<li><code>.left</code> - (2.2.0+) only trigger handler for left button mouse events.</li>\n<li><code>.right</code> - (2.2.0+) only trigger handler for right button mouse events.</li>\n<li><code>.middle</code> - (2.2.0+) only trigger handler for middle button mouse events.</li>\n<li><code>.passive</code> - (2.3.0+) attaches a DOM event with <code>{ passive: true }</code>.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Attaches an event listener to the element. The event type is denoted by the argument. The expression can either be a method name or an inline statement, or simply omitted when there are modifiers present.</p>\n<p>When used on a normal element, it listens to <strong>native DOM events</strong> only. When used on a custom element component, it also listens to <strong>custom events</strong> emitted on that child component.</p>\n<p>When listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special <code>$event</code> property: <code>v-on:click=&quot;handle(&#39;ok&#39;, $event)&quot;</code>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- method handler --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- inline statement --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doThat('hello', $event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- stop propagation --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- prevent default --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- prevent default without expression --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> @<span class=\"attr\">submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- chain modifiers --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop.prevent</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- key modifier using keyAlias --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">\"onEnter\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- key modifier using keyCode --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.13</span>=<span class=\"string\">\"onEnter\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- the click event will be triggered at most once --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click.once</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Listening to custom events on a child component (the handler is called when “my-event” is emitted on the child):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">my-event</span>=<span class=\"string\">\"handleThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- inline statement --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">my-event</span>=<span class=\"string\">\"handleThis(123, $event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- native event on component --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">click.native</span>=<span class=\"string\">\"onClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/events.html\">Methods and Event Handling</a></li>\n<li><a href=\"../guide/components.html#Custom-Events\">Components - Custom Events</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h3><ul>\n<li><p><strong>Shorthand:</strong> <code>:</code></p>\n</li>\n<li><p><strong>Expects:</strong> <code>any (with argument) | Object (without argument)</code></p>\n</li>\n<li><p><strong>Argument:</strong> <code>attrOrProp (optional)</code></p>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><code>.prop</code> - Bind as a DOM property instead of an attribute. (<a href=\"http://stackoverflow.com/questions/6003819/properties-and-attributes-in-html#answer-6004028\" target=\"_blank\" rel=\"external\">what’s the difference?</a>)</li>\n<li><code>.camel</code> - (2.1.0+) transform the kebab-case attribute name into camelCase.</li>\n<li><code>.sync</code> - (2.3.0+) a syntax sugar that expands into a <code>v-on</code> handler for updating the bound value.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Dynamically bind one or more attributes, or a component prop to an expression.</p>\n<p>When used to bind the <code>class</code> or <code>style</code> attribute, it supports additional value types such as Array or Objects. See linked guide section below for more details.</p>\n<p>When used for prop binding, the prop must be properly declared in the child component.</p>\n<p>When used without an argument, can be used to bind an object containing attribute name-value pairs. Note in this mode <code>class</code> and <code>style</code> does not support Array or Objects.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- bind an attribute --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-bind:src</span>=<span class=\"string\">\"imageSrc\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"imageSrc\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- with inline string concatenation --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"'/path/to/images/' + fileName\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- class binding --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123; red: isRed &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[classA, classB]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[classA, &#123; classB: isB, classC: isC &#125;]\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- style binding --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123; fontSize: size + 'px' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"[styleObjectA, styleObjectB]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- binding an object of attributes --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"&#123; id: someProp, 'other-attr': otherProp &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- DOM attribute binding with prop modifier --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:text-content.prop</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- prop binding. \"prop\" must be declared in my-component. --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:prop</span>=<span class=\"string\">\"someThing\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- pass down parent props in common with a child component --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-component</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"$props\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- XLink --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:xlink:special</span>=<span class=\"string\">\"foo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The <code>.camel</code> modifier allows camelizing a <code>v-bind</code> attribute name when using in-DOM templates, e.g. the SVG <code>viewBox</code> attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">:view-box.camel</span>=<span class=\"string\">\"viewBox\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><code>.camel</code> is not needed if you are using string templates, or compiling with <code>vue-loader</code>/<code>vueify</code>.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/class-and-style.html\">Class and Style Bindings</a></li>\n<li><a href=\"../guide/components.html#Props\">Components - Component Props</a></li>\n<li><a href=\"../guide/components.html#sync-Modifier\">Components - <code>.sync</code> Modifier</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h3><ul>\n<li><p><strong>Expects:</strong> varies based on value of form inputs element or output of components</p>\n</li>\n<li><p><strong>Limited to:</strong></p>\n<ul>\n<li><code>&lt;input&gt;</code></li>\n<li><code>&lt;select&gt;</code></li>\n<li><code>&lt;textarea&gt;</code></li>\n<li>components</li>\n</ul>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><a href=\"../guide/forms.html#lazy\"><code>.lazy</code></a> - listen to <code>change</code> events instead of <code>input</code></li>\n<li><a href=\"../guide/forms.html#number\"><code>.number</code></a> - cast input string to numbers</li>\n<li><a href=\"../guide/forms.html#trim\"><code>.trim</code></a> - trim input</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Create a two-way binding on a form input element or a component. For detailed usage and other notes, see the Guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/forms.html\">Form Input Bindings</a></li>\n<li><a href=\"../guide/components.html#Form-Input-Components-using-Custom-Events\">Components - Form Input Components using Custom Events</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-pre\"><a href=\"#v-pre\" class=\"headerlink\" title=\"v-pre\"></a>v-pre</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"v-cloak\"><a href=\"#v-cloak\" class=\"headerlink\" title=\"v-cloak\"></a>v-cloak</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as <code>[v-cloak] { display: none }</code>, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-attr\">[v-cloak]</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-cloak</span>&gt;</span></div><div class=\"line\">  &#123;&#123; message &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The <code>&lt;div&gt;</code> will not be visible until the compilation is done.</p>\n</li>\n</ul>\n<h3 id=\"v-once\"><a href=\"#v-once\" class=\"headerlink\" title=\"v-once\"></a>v-once</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Render the element and component <strong>once</strong> only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- single element --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- the element have children --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-once</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>comment<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- component --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-once</span> <span class=\"attr\">:comment</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-for directive --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"i in list\"</span> <span class=\"attr\">v-once</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/syntax.html#Text\">Data Binding Syntax - interpolations</a></li>\n<li><a href=\"../guide/components.html#Cheap-Static-Components-with-v-once\">Components - Cheap Static Components with v-once</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Special-Attributes\"><a href=\"#Special-Attributes\" class=\"headerlink\" title=\"Special Attributes\"></a>Special Attributes</h2><h3 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p>The <code>key</code> special attribute is primarily used as a hint for Vue’s virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.</p>\n<p>Children of the same common parent must have <strong>unique keys</strong>. Duplicate keys will cause render errors.</p>\n<p>The most common use case is combined with <code>v-for</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:</p>\n<ul>\n<li>Properly trigger lifecycle hooks of a component</li>\n<li>Trigger transitions</li>\n</ul>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"text\"</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When <code>text</code> changes, the <code>&lt;span&gt;</code> will always be replaced instead of patched, so a transition will be triggered.</p>\n</li>\n</ul>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p><code>ref</code> is used to register a reference to an element or a child component. The reference will be registered under the parent component’s <code>$refs</code> object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.p will be the DOM node --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"p\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.child will be the child comp instance --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-comp</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-comp</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When used on elements/components with <code>v-for</code>, the registered reference will be an Array containing DOM nodes or component instances.</p>\n<p>An important note about the ref registration timing: because the refs themselves are created as a result of the render function, you cannot access them on the initial render - they don’t exist yet! <code>$refs</code> is also non-reactive, therefore you should not attempt to use it in templates for data-binding.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Child-Component-Refs\">Child Component Refs</a></p>\n</li>\n</ul>\n<h3 id=\"slot\"><a href=\"#slot\" class=\"headerlink\" title=\"slot\"></a>slot</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p>Used on content inserted into child components to indicate which named slot the content belongs to.</p>\n<p>For detailed usage, see the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Named-Slots\">Named Slots</a></p>\n</li>\n</ul>\n<h3 id=\"is\"><a href=\"#is\" class=\"headerlink\" title=\"is\"></a>is</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p>Used for <a href=\"../guide/components.html#Dynamic-Components\">dynamic components</a> and to work around <a href=\"../guide/components.html#DOM-Template-Parsing-Caveats\">limitations of in-DOM templates</a>.</p>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- component changes when currentView changes --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"currentView\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- necessary because &lt;my-row&gt; would be invalid inside --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- a &lt;table&gt; element and so would be hoisted out      --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">\"my-row\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>For detailed usage, follow the links in the description above.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/components.html#Dynamic-Components\">Dynamic Components</a></li>\n<li><a href=\"../guide/components.html#DOM-Template-Parsing-Caveats\">DOM Template Parsing Caveats</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Built-In-Components\"><a href=\"#Built-In-Components\" class=\"headerlink\" title=\"Built-In Components\"></a>Built-In Components</h2><h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a>component</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>is</code> - string | ComponentDefinition | ComponentConstructor</li>\n<li><code>inline-template</code> - boolean</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>A “meta component” for rendering dynamic components. The actual component to render is determined by the <code>is</code> prop:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- a dynamic component controlled by --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- the `componentId` property on the vm --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"componentId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- can also render registered component or component passed as prop --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"$options.components.child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Dynamic-Components\">Dynamic Components</a></p>\n</li>\n</ul>\n<h3 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>name</code> - string, Used to automatically generate transition CSS class names. e.g. <code>name: &#39;fade&#39;</code> will auto expand to <code>.fade-enter</code>, <code>.fade-enter-active</code>, etc. Defaults to <code>&quot;v&quot;</code>.</li>\n<li><code>appear</code> - boolean, Whether to apply transition on initial render. Defaults to <code>false</code>.</li>\n<li><code>css</code> - boolean, Whether to apply CSS transition classes. Defaults to <code>true</code>. If set to <code>false</code>, will only trigger JavaScript hooks registered via component events.</li>\n<li><code>type</code> - string, Specify the type of transition events to wait for to determine transition end timing. Available values are <code>&quot;transition&quot;</code> and <code>&quot;animation&quot;</code>. By default, it will automatically detect the type that has a longer duration.</li>\n<li><code>mode</code> - string, Controls the timing sequence of leaving/entering transitions. Available modes are <code>&quot;out-in&quot;</code> and <code>&quot;in-out&quot;</code>; defaults to simultaneous.</li>\n<li><code>enter-class</code> - string</li>\n<li><code>leave-class</code> - string</li>\n<li><code>appear-class</code> - string</li>\n<li><code>enter-to-class</code> - string</li>\n<li><code>leave-to-class</code> - string</li>\n<li><code>appear-to-class</code> - string</li>\n<li><code>enter-active-class</code> - string</li>\n<li><code>leave-active-class</code> - string</li>\n<li><code>appear-active-class</code> - string</li>\n</ul>\n</li>\n<li><p><strong>Events:</strong></p>\n<ul>\n<li><code>before-enter</code></li>\n<li><code>before-leave</code></li>\n<li><code>before-appear</code></li>\n<li><code>enter</code></li>\n<li><code>leave</code></li>\n<li><code>appear</code></li>\n<li><code>after-enter</code></li>\n<li><code>after-leave</code></li>\n<li><code>after-appear</code></li>\n<li><code>enter-cancelled</code></li>\n<li><code>leave-cancelled</code> (<code>v-show</code> only)</li>\n<li><code>appear-cancelled</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;transition&gt;</code> serve as transition effects for <strong>single</strong> element/component. The <code>&lt;transition&gt;</code> does not render an extra DOM element, nor does it show up in the inspected component hierarchy. It simply applies the transition behavior to the wrapped content inside.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- simple element --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span>toggled content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- dynamic component --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fade\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"out-in\"</span> <span class=\"attr\">appear</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- event hooking --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transition-demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> @<span class=\"attr\">after-enter</span>=<span class=\"string\">\"transitionComplete\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"ok\"</span>&gt;</span>toggled content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    <span class=\"attr\">transitionComplete</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// for passed 'el' that DOM element as the argument, something ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;).$mount(<span class=\"string\">'#transition-demo'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/transitions.html\">Transitions: Entering, Leaving, and Lists</a></p>\n</li>\n</ul>\n<h3 id=\"transition-group\"><a href=\"#transition-group\" class=\"headerlink\" title=\"transition-group\"></a>transition-group</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>tag</code> - string, defaults to <code>span</code>.</li>\n<li><code>move-class</code> - overwrite CSS class applied during moving transition.</li>\n<li>exposes the same props as <code>&lt;transition&gt;</code> except <code>mode</code>.</li>\n</ul>\n</li>\n<li><p><strong>Events:</strong></p>\n<ul>\n<li>exposes the same events as <code>&lt;transition&gt;</code>.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;transition-group&gt;</code> serve as transition effects for <strong>multiple</strong> elements/components. The <code>&lt;transition-group&gt;</code> renders a real DOM element. By default it renders a <code>&lt;span&gt;</code>, and you can configure what element is should render via the <code>tag</code> attribute.</p>\n<p>Note every child in a <code>&lt;transition-group&gt;</code> must be <strong>uniquely keyed</strong> for the animations to work properly.</p>\n<p><code>&lt;transition-group&gt;</code> supports moving transitions via CSS transform. When a child’s position on screen has changed after an updated, it will get applied a moving CSS class (auto generated from the <code>name</code> attribute or configured with the <code>move-class</code> attribute). If the CSS <code>transform</code> property is “transition-able” when the moving class is applied, the element will be smoothly animated to its destination using the <a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"external\">FLIP technique</a>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"ul\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; item.text &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/transitions.html\">Transitions: Entering, Leaving, and Lists</a></p>\n</li>\n</ul>\n<h3 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a>keep-alive</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>include</code> - string or RegExp. Only components matched by this will be cached.</li>\n<li><code>exclude</code> - string or RegExp. Any component matched by this will not be cached.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>When wrapped around a dynamic component, <code>&lt;keep-alive&gt;</code> caches the inactive component instances without destroying them. Similar to <code>&lt;transition&gt;</code>, <code>&lt;keep-alive&gt;</code> is an abstract component: it doesn’t render a DOM element itself, and doesn’t show up in the component parent chain.</p>\n<p>When a component is toggled inside <code>&lt;keep-alive&gt;</code>, its <code>activated</code> and <code>deactivated</code> lifecycle hooks will be invoked accordingly.</p>\n<blockquote>\n<p>In 2.2.0 and above, <code>activated</code> and <code>deactivated</code> will fire for all nested components inside a <code>&lt;keep-alive&gt;</code> tree.</p>\n</blockquote>\n<p>Primarily used with preserve component state or avoid re-rendering.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- basic --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- multiple conditional children --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">comp-a</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"a &gt; 1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp-a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">comp-b</span> <span class=\"attr\">v-else</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp-b</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- used together with &lt;transition&gt; --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong><code>include</code> and <code>exclude</code></strong></p>\n<blockquote>\n<p>New in 2.1.0</p>\n</blockquote>\n<p>The <code>include</code> and <code>exclude</code> props allow components to be conditionally cached. Both props can either be a comma-delimited string or a RegExp:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- comma-delimited string --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">include</span>=<span class=\"string\">\"a,b\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- regex (use v-bind) --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">\"/a|b/\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The match is first checked on the component’s own <code>name</code> option, then its local registration name (the key in the parent’s <code>components</code> option) if the <code>name</code> option is not available. Anonymous components cannot be matched against.</p>\n<p class=\"tip\"><code>&lt;keep-alive&gt;</code> does not work with functional components because they do not have instances to be cached.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></p>\n</li>\n</ul>\n<h3 id=\"slot-1\"><a href=\"#slot-1\" class=\"headerlink\" title=\"slot\"></a>slot</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>name</code> - string, Used for named slot.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;slot&gt;</code> serve as content distribution outlets in component templates. <code>&lt;slot&gt;</code> itself will be replaced.</p>\n<p>For detailed usage, see the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution with Slots</a></p>\n</li>\n</ul>\n<h2 id=\"VNode-Interface\"><a href=\"#VNode-Interface\" class=\"headerlink\" title=\"VNode Interface\"></a>VNode Interface</h2><ul>\n<li>Please refer to the <a href=\"https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js\" target=\"_blank\" rel=\"external\">VNode class declaration</a>.</li>\n</ul>\n<h2 id=\"Server-Side-Rendering\"><a href=\"#Server-Side-Rendering\" class=\"headerlink\" title=\"Server-Side Rendering\"></a>Server-Side Rendering</h2><ul>\n<li>Please refer to the <a href=\"https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer\" target=\"_blank\" rel=\"external\">vue-server-renderer package documentation</a>.</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Global-Config\"><a href=\"#Global-Config\" class=\"headerlink\" title=\"Global Config\"></a>Global Config</h2><p><code>Vue.config</code> is an object containing Vue’s global configurations. You can modify its properties listed below before bootstrapping your application:</p>\n<h3 id=\"silent\"><a href=\"#silent\" class=\"headerlink\" title=\"silent\"></a>silent</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>false</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.silent = <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>Suppress all Vue logs and warnings.</p>\n</li>\n</ul>\n<h3 id=\"optionMergeStrategies\"><a href=\"#optionMergeStrategies\" class=\"headerlink\" title=\"optionMergeStrategies\"></a>optionMergeStrategies</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function }</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>{}</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.optionMergeStrategies._my_option = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">parent, child, vm</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> child + <span class=\"number\">1</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Profile = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">_my_option</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Profile.options._my_option = 2</span></div></pre></td></tr></table></figure>\n<p>Define custom merging strategies for options.</p>\n<p>The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html#Custom-Option-Merge-Strategies\">Custom Option Merging Strategies</a></p>\n</li>\n</ul>\n<h3 id=\"devtools\"><a href=\"#devtools\" class=\"headerlink\" title=\"devtools\"></a>devtools</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>true</code> (<code>false</code> in production builds)</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// make sure to set this synchronously immediately after loading Vue</span></div><div class=\"line\">Vue.config.devtools = <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>Configure whether to allow <a href=\"https://github.com/vuejs/vue-devtools\">vue-devtools</a> inspection. This option’s default value is <code>true</code> in development builds and <code>false</code> in production builds. You can set it to <code>true</code> to enable inspection for production builds.</p>\n</li>\n</ul>\n<h3 id=\"errorHandler\"><a href=\"#errorHandler\" class=\"headerlink\" title=\"errorHandler\"></a>errorHandler</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>undefined</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.errorHandler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, vm, info</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// handle error</span></div><div class=\"line\">  <span class=\"comment\">// `info` is a Vue-specific error info, e.g. which lifecycle hook</span></div><div class=\"line\">  <span class=\"comment\">// the error was found in. Only available in 2.2.0+</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Assign a handler for uncaught errors during component render function and watchers. The handler gets called with the error and the Vue instance.</p>\n<blockquote>\n<p>In 2.2.0, this hook also captures errors in component lifecycle hooks. Also, when this hook is <code>undefined</code>, captured errors will be logged with <code>console.error</code> instead of crashing the app.</p>\n<p><a href=\"https://sentry.io\">Sentry</a>, an error tracking service, provides <a href=\"https://sentry.io/for/vue/\">official integration</a> using this option.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"ignoredElements\"><a href=\"#ignoredElements\" class=\"headerlink\" title=\"ignoredElements\"></a>ignoredElements</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string&gt;</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>[]</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.ignoredElements = [</div><div class=\"line\">  <span class=\"string\">'my-custom-web-component'</span>, <span class=\"string\">'another-web-component'</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>Make Vue ignore custom elements defined outside of Vue (e.g., using the Web Components APIs). Otherwise, it will throw a warning about an <code>Unknown custom element</code>, assuming that you forgot to register a global component or misspelled a component name.</p>\n</li>\n</ul>\n<h3 id=\"keyCodes\"><a href=\"#keyCodes\" class=\"headerlink\" title=\"keyCodes\"></a>keyCodes</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: number | Array&lt;number&gt; }</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>{}</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.config.keyCodes = &#123;</div><div class=\"line\">  <span class=\"attr\">v</span>: <span class=\"number\">86</span>,</div><div class=\"line\">  <span class=\"attr\">f1</span>: <span class=\"number\">112</span>,</div><div class=\"line\">  <span class=\"comment\">// camelCase won`t work</span></div><div class=\"line\">  mediaPlayPause: <span class=\"number\">179</span>,</div><div class=\"line\">  <span class=\"comment\">// instead you can use kebab-case with double quotation marks</span></div><div class=\"line\">  <span class=\"string\">\"media-play-pause\"</span> : <span class=\"number\">179</span>,</div><div class=\"line\">  <span class=\"attr\">up</span>: [<span class=\"number\">38</span>, <span class=\"number\">87</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> @<span class=\"attr\">keyup.media-play-pause</span>=<span class=\"string\">\"method\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Define custom key alias(es) for v-on.</p>\n</li>\n</ul>\n<h3 id=\"performance\"><a href=\"#performance\" class=\"headerlink\" title=\"performance\"></a>performance</h3><blockquote>\n<p>New in 2.2.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>false (from 2.2.3)</code></p>\n</li>\n<li><p><strong>Usage</strong>:</p>\n<p>Set this to <code>true</code> to enable component init, compile, render and patch performance tracing in the browser devtool timeline. Only works in development mode and in browsers that support the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark\">performance.mark</a> API.</p>\n</li>\n</ul>\n<h3 id=\"productionTip\"><a href=\"#productionTip\" class=\"headerlink\" title=\"productionTip\"></a>productionTip</h3><blockquote>\n<p>New in 2.2.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Default:</strong> <code>true</code></p>\n</li>\n<li><p><strong>Usage</strong>:</p>\n<p>Set this to <code>false</code> to prevent the production tip on Vue startup.</p>\n</li>\n</ul>\n<h2 id=\"Global-API\"><a href=\"#Global-API\" class=\"headerlink\" title=\"Global API\"></a>Global API</h2><h3 id=\"Vue-extend\">Vue.extend( options )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} options</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Create a “subclass” of the base Vue constructor. The argument should be an object containing component options.</p>\n<p>The special case to note here is the <code>data</code> option - it must be a function when used with <code>Vue.extend()</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mount-point\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// create constructor</span></div><div class=\"line\"><span class=\"keyword\">var</span> Profile = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">firstName</span>: <span class=\"string\">'Walter'</span>,</div><div class=\"line\">      <span class=\"attr\">lastName</span>: <span class=\"string\">'White'</span>,</div><div class=\"line\">      <span class=\"attr\">alias</span>: <span class=\"string\">'Heisenberg'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// create an instance of Profile and mount it on an element</span></div><div class=\"line\"><span class=\"keyword\">new</span> Profile().$mount(<span class=\"string\">'#mount-point'</span>)</div></pre></td></tr></table></figure>\n<p>Will result in:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Walter White aka Heisenberg<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html\">Components</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-nextTick\">Vue.nextTick( [callback, context] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Function} [callback]</code></li>\n<li><code>{Object} [context]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modify data</span></div><div class=\"line\">vm.msg = <span class=\"string\">'Hello'</span></div><div class=\"line\"><span class=\"comment\">// DOM not updated yet</span></div><div class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// DOM updated</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>New in 2.1.0: returns a Promise if no callback is provided and Promise is supported in the execution environment.</p>\n</blockquote>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html#Async-Update-Queue\">Async Update Queue</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-set\">Vue.set( target, key, value )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Array} target</code></li>\n<li><code>{string | number} key</code></li>\n<li><code>{any} value</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> the set value.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Set a property on an object. If the object is reactive, ensure the property is created as a reactive property and trigger view updates. This is primarily used to get around the limitation that Vue cannot detect property additions.</p>\n<p><strong>Note the object cannot be a Vue instance, or the root data object of a Vue instance.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-delete\">Vue.delete( target, key )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Array} target</code></li>\n<li><code>{string | number} key</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it.</p>\n<blockquote>\n<p>Also works with on Array + index in 2.2.0+.</p>\n</blockquote>\n<p class=\"tip\">The target object cannot be a Vue instance, or the root data object of a Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-directive\">Vue.directive( id, [definition] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function | Object} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global directive.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// register</span></div><div class=\"line\">Vue.directive(<span class=\"string\">'my-directive'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">bind</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">inserted</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">update</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">componentUpdated</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">unbind</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// register (simple function directive)</span></div><div class=\"line\">Vue.directive(<span class=\"string\">'my-directive'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// this will be called as `bind` and `update`</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getter, return the directive definition if registered</span></div><div class=\"line\"><span class=\"keyword\">var</span> myDirective = Vue.directive(<span class=\"string\">'my-directive'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/custom-directive.html\">Custom Directives</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-filter\">Vue.filter( id, [definition] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global filter.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// register</span></div><div class=\"line\">Vue.filter(<span class=\"string\">'my-filter'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// return processed value</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getter, return the filter if registered</span></div><div class=\"line\"><span class=\"keyword\">var</span> myFilter = Vue.filter(<span class=\"string\">'my-filter'</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Vue-component\">Vue.component( id, [definition] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} id</code></li>\n<li><code>{Function | Object} [definition]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Register or retrieve a global component. Registration also automatically sets the component’s <code>name</code> with the given <code>id</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// register an extended constructor</span></div><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, Vue.extend(&#123; <span class=\"comment\">/* ... */</span> &#125;))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// register an options object (automatically call Vue.extend)</span></div><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123; <span class=\"comment\">/* ... */</span> &#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// retrieve a registered component (always return constructor)</span></div><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.component(<span class=\"string\">'my-component'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html\">Components</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-use\">Vue.use( plugin )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Function} plugin</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Install a Vue.js plugin. If the plugin is an Object, it must expose an <code>install</code> method. If it is a function itself, it will be treated as the install method. The install method will be called with Vue as the argument.</p>\n<p>When this method is called on the same plugin multiple times, the plugin will be installed only once.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/plugins.html\">Plugins</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-mixin\">Vue.mixin( mixin )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object} mixin</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Apply a mixin globally, which affects every Vue instance created afterwards. This can be used by plugin authors to inject custom behavior into components. <strong>Not recommended in application code</strong>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html#Global-Mixin\">Global Mixins</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-compile\">Vue.compile( template )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} template</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Compiles a template string into a render function. <strong>Only available in the full build.</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> res = Vue.compile(<span class=\"string\">'&lt;div&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/div&gt;'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">'hello'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>: res.render,</div><div class=\"line\">  <span class=\"attr\">staticRenderFns</span>: res.staticRenderFns</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/render-function.html\">Render Functions</a></p>\n</li>\n</ul>\n<h3 id=\"Vue-version\">Vue.version</h3>\n\n<ul>\n<li><p><strong>Details</strong>: Provides the installed version of Vue as a string. This is especially useful for community plugins and components, where you might use different strategies for different versions.</p>\n</li>\n<li><p><strong>Usage</strong>:</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> version = <span class=\"built_in\">Number</span>(Vue.version.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (version === <span class=\"number\">2</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// Vue v2.x.x</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (version === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// Vue v1.x.x</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// Unsupported versions of Vue</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Options-Data\"><a href=\"#Options-Data\" class=\"headerlink\" title=\"Options / Data\"></a>Options / Data</h2><h3 id=\"data\"><a href=\"#data\" class=\"headerlink\" title=\"data\"></a>data</h3><ul>\n<li><p><strong>Type:</strong> <code>Object | Function</code></p>\n</li>\n<li><p><strong>Restriction:</strong> Only accepts <code>Function</code> when used in a component definition.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The data object for the Vue instance. Vue will recursively convert its properties into getter/setters to make it “reactive”. <strong>The object must be plain</strong>: native objects such as browser API objects and prototype properties are ignored. A rule of thumb is that data should just be data - it is not recommended to observe objects with its own stateful behavior.</p>\n<p>Once observed, you can no longer add reactive properties to the root data object. It is therefore recommended to declare all root-level reactive properties upfront, before creating the instance.</p>\n<p>After the instance is created, the original data object can be accessed as <code>vm.$data</code>. The Vue instance also proxies all the properties found on the data object, so <code>vm.a</code> will be equivalent to <code>vm.$data.a</code>.</p>\n<p>Properties that start with <code>_</code> or <code>$</code> will <strong>not</strong> be proxied on the Vue instance because they may conflict with Vue’s internal properties and API methods. You will have to access them as <code>vm.$data._property</code>.</p>\n<p>When defining a <strong>component</strong>, <code>data</code> must be declared as a function that returns the initial data object, because there will be many instances created using the same definition. If we still use a plain object for <code>data</code>, that same object will be <strong>shared by reference</strong> across all instances created! By providing a <code>data</code> function, every time a new instance is created, we can simply call it to return a fresh copy of the initial data.</p>\n<p>If required, a deep clone of the original object can be obtained by passing <code>vm.$data</code> through <code>JSON.parse(JSON.stringify(...))</code>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// direct instance creation</span></div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: data</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.a <span class=\"comment\">// -&gt; 1</span></div><div class=\"line\">vm.$data === data <span class=\"comment\">// -&gt; true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// must use function when in Vue.extend()</span></div><div class=\"line\"><span class=\"keyword\">var</span> Component = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p class=\"tip\">Note that <strong>you should not use an arrow function with the <code>data</code> property</strong> (e.g. <code>data: () =&gt; { return { a: this.myProp }}</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.myProp</code> will be undefined.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/reactivity.html\">Reactivity in Depth</a></p>\n</li>\n</ul>\n<h3 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string&gt; | Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A list/hash of attributes that are exposed to accept data from the parent component. It has a simple Array-based syntax and an alternative Object-based syntax that allows advanced configurations such as type checking, custom validation and default values.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// simple syntax</span></div><div class=\"line\">Vue.component(<span class=\"string\">'props-demo-simple'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'size'</span>, <span class=\"string\">'myMessage'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// object syntax with validation</span></div><div class=\"line\">Vue.component(<span class=\"string\">'props-demo-advanced'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// just type check</span></div><div class=\"line\">    height: <span class=\"built_in\">Number</span>,</div><div class=\"line\">    <span class=\"comment\">// type check plus other validations</span></div><div class=\"line\">    age: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">default</span>: <span class=\"number\">0</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      <span class=\"attr\">validator</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> value &gt;= <span class=\"number\">0</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Props\">Props</a></p>\n</li>\n</ul>\n<h3 id=\"propsData\"><a href=\"#propsData\" class=\"headerlink\" title=\"propsData\"></a>propsData</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: any }</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected in instance creation via <code>new</code>.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Pass props to an instance during its creation. This is primarily intended to make unit testing easier.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Comp = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'msg'</span>],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Comp(&#123;</div><div class=\"line\">  <span class=\"attr\">propsData</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">'hello'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function | { get: Function, set: Function } }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Computed properties to be mixed into the Vue instance. All getters and setters have their <code>this</code> context automatically bound to the Vue instance.</p>\n<p class=\"tip\">Note that <strong>you should not use an arrow function to define a computed property</strong> (e.g. <code>aDouble: () =&gt; this.a * 2</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.a</code> will be undefined.</p>\n\n<p>Computed properties are cached, and only re-computed on reactive dependency changes. Note that if a certain dependency is out of the instance’s scope (i.e. not reactive), the computed property will <strong>not</strong> be updated.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// get only, just need a function</span></div><div class=\"line\">    aDouble: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a * <span class=\"number\">2</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// both get and set</span></div><div class=\"line\">    aPlus: &#123;</div><div class=\"line\">      <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + <span class=\"number\">1</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.a = v - <span class=\"number\">1</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.aPlus   <span class=\"comment\">// -&gt; 2</span></div><div class=\"line\">vm.aPlus = <span class=\"number\">3</span></div><div class=\"line\">vm.a       <span class=\"comment\">// -&gt; 2</span></div><div class=\"line\">vm.aDouble <span class=\"comment\">// -&gt; 4</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/computed.html\">Computed Properties</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"methods\"><a href=\"#methods\" class=\"headerlink\" title=\"methods\"></a>methods</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: Function }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Methods to be mixed into the Vue instance. You can access these methods directly on the VM instance, or use them in directive expressions. All methods will have their <code>this</code> context automatically bound to the Vue instance.</p>\n<p class=\"tip\">Note that <strong>you should not use an arrow function to define a method</strong> (e.g. <code>plus: () =&gt; this.a++</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.a</code> will be undefined.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">plus</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.a++</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.plus()</div><div class=\"line\">vm.a <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/events.html\">Methods and Event Handling</a></p>\n</li>\n</ul>\n<h3 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [key: string]: string | Function | Object }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. The Vue instance will call <code>$watch()</code> for each entry in the object at instantiation.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">3</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'new: %s, old: %s'</span>, val, oldVal)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// string method name</span></div><div class=\"line\">    b: <span class=\"string\">'someMethod'</span>,</div><div class=\"line\">    <span class=\"comment\">// deep watcher</span></div><div class=\"line\">    c: &#123;</div><div class=\"line\">      <span class=\"attr\">handler</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val, oldVal</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;,</div><div class=\"line\">      <span class=\"attr\">deep</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.a = <span class=\"number\">2</span> <span class=\"comment\">// -&gt; new: 2, old: 1</span></div></pre></td></tr></table></figure>\n<p class=\"tip\">Note that <strong>you should not use an arrow function to define a watcher</strong> (e.g. <code>searchQuery: newValue =&gt; this.updateAutocomplete(newValue)</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.updateAutocomplete</code> will be undefined.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#vm-watch\">Instance Methods - vm.$watch</a></p>\n</li>\n</ul>\n<h2 id=\"Options-DOM\"><a href=\"#Options-DOM\" class=\"headerlink\" title=\"Options / DOM\"></a>Options / DOM</h2><h3 id=\"el\"><a href=\"#el\" class=\"headerlink\" title=\"el\"></a>el</h3><ul>\n<li><p><strong>Type:</strong> <code>string | HTMLElement</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected in instance creation via <code>new</code>.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Provide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement.</p>\n<p>After the instance is mounted, the resolved element will be accessible as <code>vm.$el</code>.</p>\n<p>If this option is available at instantiation, the instance will immediately enter compilation; otherwise, the user will have to explicitly call <code>vm.$mount()</code> to manually start the compilation.</p>\n<p class=\"tip\">The provided element merely serves as a mounting point. Unlike in Vue 1.x, the mounted element will be replaced with Vue-generated DOM in all cases. It is therefore not recommended to mount the root instance to <code>&lt;html&gt;</code> or <code>&lt;body&gt;</code>.</p>\n\n<p class=\"tip\">If neither <code>render</code> function nor <code>template</code> option is present, the in-DOM HTML of the mounting DOM element will be extracted as the template. In this case, Runtime + Compiler build of Vue should be used.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></li>\n<li><a href=\"../guide/installation.html#Runtime-Compiler-vs-Runtime-only\">Runtime + Compiler vs. Runtime-only</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"template\"><a href=\"#template\" class=\"headerlink\" title=\"template\"></a>template</h3><ul>\n<li><p><strong>Type:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A string template to be used as the markup for the Vue instance. The template will <strong>replace</strong> the mounted element. Any existing markup inside the mounted element will be ignored, unless content distribution slots are present in the template.</p>\n<p>If the string starts with <code>#</code> it will be used as a querySelector and use the selected element’s innerHTML as the template string. This allows the use of the common <code>&lt;script type=&quot;x-template&quot;&gt;</code> trick to include templates.</p>\n<p class=\"tip\">From a security perspective, you should only use Vue templates that you can trust. Never use user-generated content as your template.</p>\n\n<p class=\"tip\">If render function is present in the Vue option, the template will be ignored.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></li>\n<li><a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h3><ul>\n<li><p><strong>Type:</strong> <code>(createElement: () =&gt; VNode) =&gt; VNode</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An alternative to string templates allowing you to leverage the full programmatic power of JavaScript. The render function receives a <code>createElement</code> method as it’s first argument used to create <code>VNode</code>s.</p>\n<p>If the component is a functional component, the render function also receives an extra argument <code>context</code>, which provides access to contextual data since functional components are instance-less.</p>\n<p class=\"tip\">The <code>render</code> function has priority over the render function compiled from <code>template</code> option or in-DOM HTML template of the mounting element which is specified by the <code>el</code> option.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/render-function\">Render Functions</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"renderError\"><a href=\"#renderError\" class=\"headerlink\" title=\"renderError\"></a>renderError</h3><blockquote>\n<p>New in 2.2.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>(createElement: () =&gt; VNode, error: Error) =&gt; VNode</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p><strong>Only works in development mode.</strong></p>\n<p>Provide an alternative render output when the default <code>render</code> function encounters an error. The error will be passed to <code>renderError</code> as the second argument. This is particularly useful when used together with hot-reload.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  render (h) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'oops'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  renderError (h, err) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"string\">'pre'</span>, &#123; <span class=\"attr\">style</span>: &#123; <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;&#125;, err.stack)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/render-function\">Render Functions</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Options-Lifecycle-Hooks\"><a href=\"#Options-Lifecycle-Hooks\" class=\"headerlink\" title=\"Options / Lifecycle Hooks\"></a>Options / Lifecycle Hooks</h2><p>All lifecycle hooks automatically have their <code>this</code> context bound to the instance, so that you can access data, computed properties, and methods. This means <strong>you should not use an arrow function to define a lifecycle method</strong> (e.g. <code>created: () =&gt; this.fetchTodos()</code>). The reason is arrow functions bind the parent context, so <code>this</code> will not be the Vue instance as you expect and <code>this.fetchTodos</code> will be undefined.</p>\n<h3 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate\"></a>beforeCreate</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called synchronously after the instance has just been initialized, before data observation and event/watcher setup.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created\"></a>created</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called synchronously after the instance is created. At this stage, the instance has finished processing the options which means the following have been set up: data observation, computed properties, methods, watch/event callbacks. However, the mounting phase has not been started, and the <code>$el</code> property will not be available yet.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"beforeMount\"><a href=\"#beforeMount\" class=\"headerlink\" title=\"beforeMount\"></a>beforeMount</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called right before the mounting begins: the <code>render</code> function is about to be called for the first time.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted\"></a>mounted</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after the instance has just been mounted where <code>el</code> is replaced by the newly created <code>vm.$el</code>. If the root instance is mounted to an in-document element, <code>vm.$el</code> will also be in-document when <code>mounted</code> is called.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"beforeUpdate\"><a href=\"#beforeUpdate\" class=\"headerlink\" title=\"beforeUpdate\"></a>beforeUpdate</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when the data changes, before the virtual DOM is re-rendered and patched.</p>\n<p>You can perform further state changes in this hook and they will not trigger additional re-renders.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"updated\"><a href=\"#updated\" class=\"headerlink\" title=\"updated\"></a>updated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after a data change causes the virtual DOM to be re-rendered and patched.</p>\n<p>The component’s DOM will have been updated when this hook is called, so you can perform DOM-dependent operations here. However, in most cases you should avoid changing state inside the hook. To react to state changes, it’s usually better to use a <a href=\"#computed\">computed property</a> or <a href=\"#watch\">watcher</a> instead.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"activated\"><a href=\"#activated\" class=\"headerlink\" title=\"activated\"></a>activated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when a kept-alive component is activated.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#keep-alive\">Built-in Components - keep-alive</a></li>\n<li><a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"deactivated\"><a href=\"#deactivated\" class=\"headerlink\" title=\"deactivated\"></a>deactivated</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called when a kept-alive component is deactivated.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#keep-alive\">Built-in Components - keep-alive</a></li>\n<li><a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"beforeDestroy\"><a href=\"#beforeDestroy\" class=\"headerlink\" title=\"beforeDestroy\"></a>beforeDestroy</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called right before a Vue instance is destroyed. At this stage the instance is still fully functional.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h3 id=\"destroyed\"><a href=\"#destroyed\" class=\"headerlink\" title=\"destroyed\"></a>destroyed</h3><ul>\n<li><p><strong>Type:</strong> <code>Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Called after a Vue instance has been destroyed. When this hook is called, all directives of the Vue instance have been unbound, all event listeners have been removed, and all child Vue instances have also been destroyed.</p>\n<p><strong>This hook is not called during server-side rendering.</strong></p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h2 id=\"Options-Assets\"><a href=\"#Options-Assets\" class=\"headerlink\" title=\"Options / Assets\"></a>Options / Assets</h2><h3 id=\"directives\"><a href=\"#directives\" class=\"headerlink\" title=\"directives\"></a>directives</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of directives to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/custom-directive.html\">Custom Directives</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"filters\"><a href=\"#filters\" class=\"headerlink\" title=\"filters\"></a>filters</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of filters to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#Vue-filter\"><code>Vue.filter</code></a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"components\"></a>components</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>A hash of components to be made available to the Vue instance.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/components.html\">Components</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Options-Composition\"><a href=\"#Options-Composition\" class=\"headerlink\" title=\"Options / Composition\"></a>Options / Composition</h2><h3 id=\"parent\"><a href=\"#parent\" class=\"headerlink\" title=\"parent\"></a>parent</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Specify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as <code>this.$parent</code> for the child, and the child will be pushed into the parent’s <code>$children</code> array.</p>\n<p class=\"tip\">Use <code>$parent</code> and <code>$children</code> sparingly - they mostly serve as an escape-hatch. Prefer using props and events for parent-child communication.</p>\n\n</li>\n</ul>\n<h3 id=\"mixins\"><a href=\"#mixins\" class=\"headerlink\" title=\"mixins\"></a>mixins</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;Object&gt;</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The <code>mixins</code> option accepts an array of mixin objects. These mixin objects can contain instance options just like normal instance objects, and they will be merged against the eventual options using the same option merging logic in <code>Vue.extend()</code>. e.g. If your mixin contains a created hook and the component itself also has one, both functions will be called.</p>\n<p>Mixin hooks are called in the order they are provided, and called before the component’s own hooks.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mixin = &#123;</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>) &#125;,</div><div class=\"line\">  <span class=\"attr\">mixins</span>: [mixin]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// -&gt; 1</span></div><div class=\"line\"><span class=\"comment\">// -&gt; 2</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/mixins.html\">Mixins</a></p>\n</li>\n</ul>\n<h3 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h3><ul>\n<li><p><strong>Type:</strong> <code>Object | Function</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Allows declaratively extending another component (could be either a plain options object or a constructor) without having to use <code>Vue.extend</code>. This is primarily intended to make it easier to extend between single file components.</p>\n<p>This is similar to <code>mixins</code>, the difference being that the component’s own options takes higher priority than the source component being extended.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> CompA = &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// extend CompA without having to call Vue.extend on either</span></div><div class=\"line\"><span class=\"keyword\">var</span> CompB = &#123;</div><div class=\"line\">  <span class=\"attr\">extends</span>: CompA,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"provide-inject\"><a href=\"#provide-inject\" class=\"headerlink\" title=\"provide / inject\"></a>provide / inject</h3><blockquote>\n<p>New in 2.2.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong></p>\n<ul>\n<li><strong>provide:</strong> <code>Object | () =&gt; Object</code></li>\n<li><strong>inject:</strong> <code>Array&lt;string&gt; | { [key: string]: string | Symbol }</code></li>\n</ul>\n</li>\n<li><p><strong>Details:</strong></p>\n<p class=\"tip\"><code>provide</code> and <code>inject</code> are primarily provided for advanced plugin / component library use cases. It is NOT recommended to use them in generic application code.</p>\n\n<p>This pair of options are used together to allow an ancestor component to serve as a dependency injector for its all descendants, regardless of how deep the component hierarchy is, as long as they are in the same parent chain. If you are familiar with React, this is very similar to React’s context feature.</p>\n<p>The <code>provide</code> option should be an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use ES2015 Symbols as keys in this object, but only in environments that natively support <code>Symbol</code> and <code>Reflect.ownKeys</code>.</p>\n<p>The <code>inject</code> options should be either an Array of strings or an object where the keys stand for the local binding name, and the value being the key (string or Symbol) to search for in available injections.</p>\n<blockquote>\n<p>Note: the <code>provide</code> and <code>inject</code> bindings are NOT reactive. This is intentional. However, if you pass down an observed object, properties on that object do remain reactive.</p>\n</blockquote>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Provider = &#123;</div><div class=\"line\">  <span class=\"attr\">provide</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = &#123;</div><div class=\"line\">  <span class=\"attr\">inject</span>: [<span class=\"string\">'foo'</span>],</div><div class=\"line\">  created () &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.foo) <span class=\"comment\">// -&gt; \"bar\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>With ES2015 Symbols, function <code>provide</code> and object <code>inject</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"built_in\">Symbol</span>()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Provider = &#123;</div><div class=\"line\">  provide () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      [s]: <span class=\"string\">'foo'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</div><div class=\"line\">  <span class=\"attr\">inject</span>: &#123; s &#125;,</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The next 2 examples only work with Vue &gt; 2.2.1. Below that version, injected values were resolved after the <code>props</code> and the <code>data</code> initialization.</p>\n</blockquote>\n<p>Using an injected value as the default for a prop:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</div><div class=\"line\">  <span class=\"attr\">inject</span>: [<span class=\"string\">'foo'</span>],</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">bar</span>: &#123;</div><div class=\"line\">      <span class=\"keyword\">default</span> () &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.foo</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Using an injected value as data entry:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</div><div class=\"line\">  <span class=\"attr\">inject</span>: [<span class=\"string\">'foo'</span>],</div><div class=\"line\">  data () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">bar</span>: <span class=\"keyword\">this</span>.foo</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Options-Misc\"><a href=\"#Options-Misc\" class=\"headerlink\" title=\"Options / Misc\"></a>Options / Misc</h2><h3 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h3><ul>\n<li><p><strong>Type:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Restriction:</strong> only respected when used as a component option.</p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Allow the component to recursively invoke itself in its template. Note that when a component is registered globally with <code>Vue.component()</code>, the global ID is automatically set as its name.</p>\n<p>Another benefit of specifying a <code>name</code> option is debugging. Named components result in more helpful warning messages. Also, when inspecting an app in the <a href=\"https://github.com/vuejs/vue-devtools\">vue-devtools</a>, unnamed components will show up as <code>&lt;AnonymousComponent&gt;</code>, which isn’t very informative. By providing the <code>name</code> option, you will get a much more informative component tree.</p>\n</li>\n</ul>\n<h3 id=\"delimiters\"><a href=\"#delimiters\" class=\"headerlink\" title=\"delimiters\"></a>delimiters</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;string&gt;</code></p>\n</li>\n<li><p><strong>default:</strong> <code>[\"{{\", \"}}\"]</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Change the plain text interpolation delimiters. <strong>This option is only available in the full build.</strong></p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">delimiters</span>: [<span class=\"string\">'$&#123;'</span>, <span class=\"string\">'&#125;'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Delimiters changed to ES6 template string style</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"functional\"><a href=\"#functional\" class=\"headerlink\" title=\"functional\"></a>functional</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Causes a component to be stateless (no <code>data</code>) and instanceless (no <code>this</code> context). They are simply a <code>render</code> function that returns virtual nodes making them much cheaper to render.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/render-function.html#Functional-Components\">Functional Components</a></p>\n</li>\n</ul>\n<h3 id=\"model\"><a href=\"#model\" class=\"headerlink\" title=\"model\"></a>model</h3><blockquote>\n<p>New in 2.2.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>{ prop?: string, event?: string }</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Allows a custom component to customize the prop and event used when it’s used with <code>v-model</code>. By default, <code>v-model</code> on a component uses <code>value</code> as the prop and <code>input</code> as the event, but some input types such as checkboxes and radio buttons may want to use the <code>value</code> prop for a different purpose. Using the <code>model</code> option can avoid the conflict in such cases.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'my-checkbox'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">model</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">prop</span>: <span class=\"string\">'checked'</span>,</div><div class=\"line\">    <span class=\"attr\">event</span>: <span class=\"string\">'change'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"comment\">// this allows using the `value` prop for a different purpose</span></div><div class=\"line\">    value: <span class=\"built_in\">String</span>,</div><div class=\"line\">    <span class=\"comment\">// use `checked` as the prop which take the place of `value`</span></div><div class=\"line\">    checked: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">default</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-checkbox</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"foo\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"some value\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-checkbox</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The above will be equivalent to:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-checkbox</span></div><div class=\"line\">  <span class=\"attr\">:checked</span>=<span class=\"string\">\"foo\"</span></div><div class=\"line\">  @<span class=\"attr\">change</span>=<span class=\"string\">\"val =&gt; &#123; foo = val &#125;\"</span></div><div class=\"line\">  <span class=\"attr\">value</span>=<span class=\"string\">\"some value\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-checkbox</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Instance-Properties\"><a href=\"#Instance-Properties\" class=\"headerlink\" title=\"Instance Properties\"></a>Instance Properties</h2><h3 id=\"vm-data\"><a href=\"#vm-data\" class=\"headerlink\" title=\"vm.$data\"></a>vm.$data</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#data\">Options - data</a></p>\n</li>\n</ul>\n<h3 id=\"vm-props\"><a href=\"#vm-props\" class=\"headerlink\" title=\"vm.$props\"></a>vm.$props</h3><blockquote>\n<p>New in 2.2.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An object representing the current props a component has received. The Vue instance proxies access to the properties on its props object.</p>\n</li>\n</ul>\n<h3 id=\"vm-el\"><a href=\"#vm-el\" class=\"headerlink\" title=\"vm.$el\"></a>vm.$el</h3><ul>\n<li><p><strong>Type:</strong> <code>HTMLElement</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The root DOM element that the Vue instance is managing.</p>\n</li>\n</ul>\n<h3 id=\"vm-options\"><a href=\"#vm-options\" class=\"headerlink\" title=\"vm.$options\"></a>vm.$options</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">customOption</span>: <span class=\"string\">'foo'</span>,</div><div class=\"line\">  <span class=\"attr\">created</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$options.customOption) <span class=\"comment\">// -&gt; 'foo'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-parent\"><a href=\"#vm-parent\" class=\"headerlink\" title=\"vm.$parent\"></a>vm.$parent</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The parent instance, if the current instance has one.</p>\n</li>\n</ul>\n<h3 id=\"vm-root\"><a href=\"#vm-root\" class=\"headerlink\" title=\"vm.$root\"></a>vm.$root</h3><ul>\n<li><p><strong>Type:</strong> <code>Vue instance</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The root Vue instance of the current component tree. If the current instance has no parents this value will be itself.</p>\n</li>\n</ul>\n<h3 id=\"vm-children\"><a href=\"#vm-children\" class=\"headerlink\" title=\"vm.$children\"></a>vm.$children</h3><ul>\n<li><p><strong>Type:</strong> <code>Array&lt;Vue instance&gt;</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>The direct child components of the current instance. <strong>Note there’s no order guarantee for <code>$children</code>, and it is not reactive.</strong> If you find yourself trying to use <code>$children</code> for data binding, consider using an Array and <code>v-for</code> to generate child components, and use the Array as the source of truth.</p>\n</li>\n</ul>\n<h3 id=\"vm-slots\"><a href=\"#vm-slots\" class=\"headerlink\" title=\"vm.$slots\"></a>vm.$slots</h3><ul>\n<li><p><strong>Type:</strong> <code>{ [name: string]: ?Array&lt;VNode&gt; }</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Used to programmatically access content <a href=\"../guide/components.html#Content-Distribution-with-Slots\">distributed by slots</a>. Each <a href=\"../guide/components.html#Named-Slots\">named slot</a> has its own corresponding property (e.g. the contents of <code>slot=&quot;foo&quot;</code> will be found at <code>vm.$slots.foo</code>). The <code>default</code> property contains any nodes not included in a named slot.</p>\n<p>Accessing <code>vm.$slots</code> is most useful when writing a component with a <a href=\"../guide/render-function.html\">render function</a>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blog-post</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"header\"</span>&gt;</span></div><div class=\"line\">    About Me</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here's some page content, which will be included in vm.$slots.default, because it's not inside a named slot.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"footer\"</span>&gt;</span></div><div class=\"line\">    Copyright 2016 Evan You</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>If I have some content down here, it will also be included in vm.$slots.default.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>.</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">blog-post</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'blog-post'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> header = <span class=\"keyword\">this</span>.$slots.header</div><div class=\"line\">    <span class=\"keyword\">var</span> body   = <span class=\"keyword\">this</span>.$slots.default</div><div class=\"line\">    <span class=\"keyword\">var</span> footer = <span class=\"keyword\">this</span>.$slots.footer</div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(<span class=\"string\">'div'</span>, [</div><div class=\"line\">      createElement(<span class=\"string\">'header'</span>, header),</div><div class=\"line\">      createElement(<span class=\"string\">'main'</span>, body),</div><div class=\"line\">      createElement(<span class=\"string\">'footer'</span>, footer)</div><div class=\"line\">    ])</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#slot-1\"><code>&lt;slot&gt;</code> Component</a></li>\n<li><a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution with Slots</a></li>\n<li><a href=\"../guide/render-function.html#Slots\">Render Functions: Slots</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-scopedSlots\"><a href=\"#vm-scopedSlots\" class=\"headerlink\" title=\"vm.$scopedSlots\"></a>vm.$scopedSlots</h3><blockquote>\n<p>New in 2.1.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Type:</strong> <code>{ [name: string]: props =&gt; VNode | Array&lt;VNode&gt; }</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Used to programmatically access <a href=\"../guide/components.html#Scoped-Slots\">scoped slots</a>. For each slot, including the <code>default</code> one, the object contains a corresponding function that returns VNodes.</p>\n<p>Accessing <code>vm.$scopedSlots</code> is most useful when writing a component with a <a href=\"../guide/render-function.html\">render function</a>.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#slot-1\"><code>&lt;slot&gt;</code> Component</a></li>\n<li><a href=\"../guide/components.html#Scoped-Slots\">Scoped Slots</a></li>\n<li><a href=\"../guide/render-function.html#Slots\">Render Functions: Slots</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-refs\"><a href=\"#vm-refs\" class=\"headerlink\" title=\"vm.$refs\"></a>vm.$refs</h3><ul>\n<li><p><strong>Type:</strong> <code>Object</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>An object that holds child components that have <code>ref</code> registered.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/components.html#Child-Component-Refs\">Child Component Refs</a></li>\n<li><a href=\"#ref\">ref</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-isServer\"><a href=\"#vm-isServer\" class=\"headerlink\" title=\"vm.$isServer\"></a>vm.$isServer</h3><ul>\n<li><p><strong>Type:</strong> <code>boolean</code></p>\n</li>\n<li><p><strong>Read only</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Whether the current Vue instance is running on the server.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/ssr.html\">Server-Side Rendering</a></p>\n</li>\n</ul>\n<h2 id=\"Instance-Methods-Data\"><a href=\"#Instance-Methods-Data\" class=\"headerlink\" title=\"Instance Methods / Data\"></a>Instance Methods / Data</h2><h3 id=\"vm-watch\">vm.$watch( expOrFn, callback, [options] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string | Function} expOrFn</code></li>\n<li><code>{Function} callback</code></li>\n<li><code>{Object} [options]</code><ul>\n<li><code>{boolean} deep</code></li>\n<li><code>{boolean} immediate</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> <code>{Function} unwatch</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Watch an expression or a computed function on the Vue instance for changes. The callback gets called with the new value and the old value. The expression only accepts simple dot-delimited paths. For more complex expression, use a function instead.</p>\n</li>\n</ul>\n<p class=\"tip\">Note: when mutating (rather than replacing) an Object or an Array, the old value will be the same as new value because they reference the same Object/Array. Vue doesn’t keep a copy of the pre-mutate value.</p>\n\n<ul>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// keypath</span></div><div class=\"line\">vm.$watch(<span class=\"string\">'a.b.c'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// do something</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// function</span></div><div class=\"line\">vm.$watch(</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + <span class=\"keyword\">this</span>.b</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\">  &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p><code>vm.$watch</code> returns an unwatch function that stops firing the callback:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> unwatch = vm.$watch(<span class=\"string\">'a'</span>, cb)</div><div class=\"line\"><span class=\"comment\">// later, teardown the watcher</span></div><div class=\"line\">unwatch()</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Option: deep</strong></p>\n<p>To also detect nested value changes inside Objects, you need to pass in <code>deep: true</code> in the options argument. Note that you don’t need to do so to listen for Array mutations.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">vm.$watch(<span class=\"string\">'someObject'</span>, callback, &#123;</div><div class=\"line\">  <span class=\"attr\">deep</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div><div class=\"line\">vm.someObject.nestedValue = <span class=\"number\">123</span></div><div class=\"line\"><span class=\"comment\">// callback is fired</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Option: immediate</strong></p>\n<p>Passing in <code>immediate: true</code> in the option will trigger the callback immediately with the current value of the expression:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">vm.$watch(<span class=\"string\">'a'</span>, callback, &#123;</div><div class=\"line\">  <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// callback is fired immediately with current value of `a`</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-set\">vm.$set( target, key, value )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Array} target</code></li>\n<li><code>{string | number} key</code></li>\n<li><code>{any} value</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> the set value.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This is the <strong>alias</strong> of the global <code>Vue.set</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#Vue-set\">Vue.set</a></p>\n</li>\n</ul>\n<h3 id=\"vm-delete\">vm.$delete( target, key )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Object | Array} target</code></li>\n<li><code>{string | number} key</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This is the <strong>alias</strong> of the global <code>Vue.delete</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"#Vue-delete\">Vue.delete</a></p>\n</li>\n</ul>\n<h2 id=\"Instance-Methods-Events\"><a href=\"#Instance-Methods-Events\" class=\"headerlink\" title=\"Instance Methods / Events\"></a>Instance Methods / Events</h2><h3 id=\"vm-on\">vm.$on( event, callback )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string | Array&lt;string&gt;} event</code> (array only supported in 2.2.0+)</li>\n<li><code>{Function} callback</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Listen for a custom event on the current vm. Events can be triggered by <code>vm.$emit</code>. The callback will receive all the additional arguments passed into these event-triggering methods.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">vm.$on(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(msg)</div><div class=\"line\">&#125;)</div><div class=\"line\">vm.$emit(<span class=\"string\">'test'</span>, <span class=\"string\">'hi'</span>)</div><div class=\"line\"><span class=\"comment\">// -&gt; \"hi\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"vm-once\">vm.$once( event, callback )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} event</code></li>\n<li><code>{Function} callback</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Listen for a custom event, but only once. The listener will be removed once it triggers for the first time.</p>\n</li>\n</ul>\n<h3 id=\"vm-off\">vm.$off( [event, callback] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} [event]</code></li>\n<li><code>{Function} [callback]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Remove custom event listener(s).</p>\n<ul>\n<li><p>If no arguments are provided, remove all event listeners;</p>\n</li>\n<li><p>If only the event is provided, remove all listeners for that event;</p>\n</li>\n<li><p>If both event and callback are given, remove the listener for that specific callback only.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-emit\">vm.$emit( event, […args] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{string} event</code></li>\n<li><code>[...args]</code></li>\n</ul>\n<p>Trigger an event on the current instance. Any additional arguments will be passed into the listener’s callback function.</p>\n</li>\n</ul>\n<h2 id=\"Instance-Methods-Lifecycle\"><a href=\"#Instance-Methods-Lifecycle\" class=\"headerlink\" title=\"Instance Methods / Lifecycle\"></a>Instance Methods / Lifecycle</h2><h3 id=\"vm-mount\">vm.$mount( [elementOrSelector] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Element | string} [elementOrSelector]</code></li>\n<li><code>{boolean} [hydrating]</code></li>\n</ul>\n</li>\n<li><p><strong>Returns:</strong> <code>vm</code> - the instance itself</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>If a Vue instance didn’t receive the <code>el</code> option at instantiation, it will be in “unmounted” state, without an associated DOM element. <code>vm.$mount()</code> can be used to manually start the mounting of an unmounted Vue instance.</p>\n<p>If <code>elementOrSelector</code> argument is not provided, the template will be rendered as an off-document element, and you will have to use native DOM API to insert it into the document yourself.</p>\n<p>The method returns the instance itself so you can chain other instance methods after it.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;Hello!&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// create and mount to #app (will replace #app)</span></div><div class=\"line\"><span class=\"keyword\">new</span> MyComponent().$mount(<span class=\"string\">'#app'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// the above is the same as:</span></div><div class=\"line\"><span class=\"keyword\">new</span> MyComponent(&#123; <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span> &#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or, render off-document and append afterwards:</span></div><div class=\"line\"><span class=\"keyword\">var</span> component = <span class=\"keyword\">new</span> MyComponent().$mount()</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>).appendChild(component.$el)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></li>\n<li><a href=\"../guide/ssr.html\">Server-Side Rendering</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-forceUpdate\">vm.$forceUpdate()</h3>\n\n<ul>\n<li><p><strong>Usage:</strong></p>\n<p>Force the Vue instance to re-render. Note it does not affect all child components, only the instance itself and child components with inserted slot content.</p>\n</li>\n</ul>\n<h3 id=\"vm-nextTick\">vm.$nextTick( [callback] )</h3>\n\n<ul>\n<li><p><strong>Arguments:</strong></p>\n<ul>\n<li><code>{Function} [callback]</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Defer the callback to be executed after the next DOM update cycle. Use it immediately after you’ve changed some data to wait for the DOM update. This is the same as the global <code>Vue.nextTick</code>, except that the callback’s <code>this</code> context is automatically bound to the instance calling this method.</p>\n<blockquote>\n<p>New in 2.1.0: returns a Promise if no callback is provided and Promise is supported in the execution environment.</p>\n</blockquote>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    example: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// modify data</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"string\">'changed'</span></div><div class=\"line\">      <span class=\"comment\">// DOM is not updated yet</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// DOM is now updated</span></div><div class=\"line\">        <span class=\"comment\">// `this` is bound to the current instance</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.doSomethingElse()</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"#Vue-nextTick\">Vue.nextTick</a></li>\n<li><a href=\"../guide/reactivity.html#Async-Update-Queue\">Async Update Queue</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vm-destroy\">vm.$destroy()</h3>\n\n<ul>\n<li><p><strong>Usage:</strong></p>\n<p>Completely destroy a vm. Clean up its connections with other existing vms, unbind all its directives, turn off all event listeners.</p>\n<p>Triggers the <code>beforeDestroy</code> and <code>destroyed</code> hooks.</p>\n<p class=\"tip\">In normal use cases you shouldn’t have to call this method yourself. Prefer controlling the lifecycle of child components in a data-driven fashion using <code>v-if</code> and <code>v-for</code>.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/instance.html#Lifecycle-Diagram\">Lifecycle Diagram</a></p>\n</li>\n</ul>\n<h2 id=\"Directives\"><a href=\"#Directives\" class=\"headerlink\" title=\"Directives\"></a>Directives</h2><h3 id=\"v-text\"><a href=\"#v-text\" class=\"headerlink\" title=\"v-text\"></a>v-text</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Updates the element’s <code>textContent</code>. If you need to update the part of <code>textContent</code>, you should use <code>{{ Mustache }}</code> interpolations.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- same as --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/syntax.html#Text\">Data Binding Syntax - interpolations</a></p>\n</li>\n</ul>\n<h3 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Updates the element’s <code>innerHTML</code>. <strong>Note that the contents are inserted as plain HTML - they will not be compiled as Vue templates</strong>. If you find yourself trying to compose templates using <code>v-html</code>, try to rethink the solution by using components instead.</p>\n<p class=\"tip\">Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">XSS attacks</a>. Only use <code>v-html</code> on trusted content and <strong>never</strong> on user-provided content.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/syntax.html#Raw-HTML\">Data Binding Syntax - interpolations</a></p>\n</li>\n</ul>\n<h3 id=\"v-show\"><a href=\"#v-show\" class=\"headerlink\" title=\"v-show\"></a>v-show</h3><ul>\n<li><p><strong>Expects:</strong> <code>any</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Toggle’s the element’s <code>display</code> CSS property based on the truthy-ness of the expression value.</p>\n<p>This directive triggers transitions when its condition changes.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html#v-show\">Conditional Rendering - v-show</a></p>\n</li>\n</ul>\n<h3 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h3><ul>\n<li><p><strong>Expects:</strong> <code>any</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Conditionally render the element based on the truthy-ness of the expression value. The element and its contained directives / components are destroyed and re-constructed during toggles. If the element is a <code>&lt;template&gt;</code> element, its content will be extracted as the conditional block.</p>\n<p>This directive triggers transitions when its condition changes.</p>\n<p class=\"tip\">When used together with v-if, v-for has a higher priority than v-if. See the <a href=\"../guide/list.html#v-for-with-v-if\">list rendering guide</a> for details.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html\">Conditional Rendering - v-if</a></p>\n</li>\n</ul>\n<h3 id=\"v-else\"><a href=\"#v-else\" class=\"headerlink\" title=\"v-else\"></a>v-else</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Restriction:</strong> previous sibling element must have <code>v-if</code> or <code>v-else-if</code>.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Denote the “else block” for <code>v-if</code> or a <code>v-if</code>/<code>v-else-if</code> chain.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"Math.random() &gt; 0.5\"</span>&gt;</span></div><div class=\"line\">  Now you see me</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></div><div class=\"line\">  Now you don't</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/conditional.html#v-else\">Conditional Rendering - v-else</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-else-if\"><a href=\"#v-else-if\" class=\"headerlink\" title=\"v-else-if\"></a>v-else-if</h3><blockquote>\n<p>New in 2.1.0</p>\n</blockquote>\n<ul>\n<li><p><strong>Expects:</strong> <code>any</code></p>\n</li>\n<li><p><strong>Restriction:</strong> previous sibling element must have <code>v-if</code> or <code>v-else-if</code>.</p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Denote the “else if block” for <code>v-if</code>. Can be chained.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"type === 'A'\"</span>&gt;</span></div><div class=\"line\">  A</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'B'\"</span>&gt;</span></div><div class=\"line\">  B</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type === 'C'\"</span>&gt;</span></div><div class=\"line\">  C</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></div><div class=\"line\">  Not A/B/C</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/conditional.html#v-else-if\">Conditional Rendering - v-else-if</a></p>\n</li>\n</ul>\n<h3 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h3><ul>\n<li><p><strong>Expects:</strong> <code>Array | Object | number | string</code></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Render the element or template block multiple times based on the source data. The directive’s value must use the special syntax <code>alias in expression</code> to provide an alias for the current element being iterated on:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; item.text &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Alternatively, you can also specify an alias for the index (or the key if used on an Object):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in items\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(val, key) in object\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(val, key, index) in object\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The default behavior of <code>v-for</code> will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the <code>key</code> special attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; item.text &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p class=\"tip\">When used together with v-if, v-for has a higher priority than v-if. See the <a href=\"../guide/list.html#v-for-with-v-if\">list rendering guide</a> for details.</p>\n\n<p>The detailed usage for <code>v-for</code> is explained in the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/list.html\">List Rendering</a></li>\n<li><a href=\"../guide/list.html#key\">key</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h3><ul>\n<li><p><strong>Shorthand:</strong> <code>@</code></p>\n</li>\n<li><p><strong>Expects:</strong> <code>Function | Inline Statement</code></p>\n</li>\n<li><p><strong>Argument:</strong> <code>event (required)</code></p>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><code>.stop</code> - call <code>event.stopPropagation()</code>.</li>\n<li><code>.prevent</code> - call <code>event.preventDefault()</code>.</li>\n<li><code>.capture</code> - add event listener in capture mode.</li>\n<li><code>.self</code> - only trigger handler if event was dispatched from this element.</li>\n<li><code>.{keyCode | keyAlias}</code> - only trigger handler on certain keys.</li>\n<li><code>.native</code> - listen for a native event on the root element of component.</li>\n<li><code>.once</code> - trigger handler at most once.</li>\n<li><code>.left</code> - (2.2.0+) only trigger handler for left button mouse events.</li>\n<li><code>.right</code> - (2.2.0+) only trigger handler for right button mouse events.</li>\n<li><code>.middle</code> - (2.2.0+) only trigger handler for middle button mouse events.</li>\n<li><code>.passive</code> - (2.3.0+) attaches a DOM event with <code>{ passive: true }</code>.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Attaches an event listener to the element. The event type is denoted by the argument. The expression can either be a method name or an inline statement, or simply omitted when there are modifiers present.</p>\n<p>When used on a normal element, it listens to <strong>native DOM events</strong> only. When used on a custom element component, it also listens to <strong>custom events</strong> emitted on that child component.</p>\n<p>When listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special <code>$event</code> property: <code>v-on:click=&quot;handle(&#39;ok&#39;, $event)&quot;</code>.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- method handler --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- inline statement --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doThat('hello', $event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- stop propagation --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- prevent default --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- prevent default without expression --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> @<span class=\"attr\">submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- chain modifiers --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop.prevent</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- key modifier using keyAlias --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">\"onEnter\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- key modifier using keyCode --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.13</span>=<span class=\"string\">\"onEnter\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- the click event will be triggered at most once --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click.once</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Listening to custom events on a child component (the handler is called when “my-event” is emitted on the child):</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">my-event</span>=<span class=\"string\">\"handleThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- inline statement --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">my-event</span>=<span class=\"string\">\"handleThis(123, $event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- native event on component --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> @<span class=\"attr\">click.native</span>=<span class=\"string\">\"onClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/events.html\">Methods and Event Handling</a></li>\n<li><a href=\"../guide/components.html#Custom-Events\">Components - Custom Events</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h3><ul>\n<li><p><strong>Shorthand:</strong> <code>:</code></p>\n</li>\n<li><p><strong>Expects:</strong> <code>any (with argument) | Object (without argument)</code></p>\n</li>\n<li><p><strong>Argument:</strong> <code>attrOrProp (optional)</code></p>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><code>.prop</code> - Bind as a DOM property instead of an attribute. (<a href=\"http://stackoverflow.com/questions/6003819/properties-and-attributes-in-html#answer-6004028\">what’s the difference?</a>)</li>\n<li><code>.camel</code> - (2.1.0+) transform the kebab-case attribute name into camelCase.</li>\n<li><code>.sync</code> - (2.3.0+) a syntax sugar that expands into a <code>v-on</code> handler for updating the bound value.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Dynamically bind one or more attributes, or a component prop to an expression.</p>\n<p>When used to bind the <code>class</code> or <code>style</code> attribute, it supports additional value types such as Array or Objects. See linked guide section below for more details.</p>\n<p>When used for prop binding, the prop must be properly declared in the child component.</p>\n<p>When used without an argument, can be used to bind an object containing attribute name-value pairs. Note in this mode <code>class</code> and <code>style</code> does not support Array or Objects.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- bind an attribute --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-bind:src</span>=<span class=\"string\">\"imageSrc\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- shorthand --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"imageSrc\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- with inline string concatenation --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"'/path/to/images/' + fileName\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- class binding --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123; red: isRed &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[classA, classB]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[classA, &#123; classB: isB, classC: isC &#125;]\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- style binding --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"&#123; fontSize: size + 'px' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">\"[styleObjectA, styleObjectB]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- binding an object of attributes --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"&#123; id: someProp, 'other-attr': otherProp &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- DOM attribute binding with prop modifier --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:text-content.prop</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- prop binding. \"prop\" must be declared in my-component. --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:prop</span>=<span class=\"string\">\"someThing\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- pass down parent props in common with a child component --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-component</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"$props\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- XLink --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:xlink:special</span>=<span class=\"string\">\"foo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The <code>.camel</code> modifier allows camelizing a <code>v-bind</code> attribute name when using in-DOM templates, e.g. the SVG <code>viewBox</code> attribute:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">:view-box.camel</span>=<span class=\"string\">\"viewBox\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><code>.camel</code> is not needed if you are using string templates, or compiling with <code>vue-loader</code>/<code>vueify</code>.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/class-and-style.html\">Class and Style Bindings</a></li>\n<li><a href=\"../guide/components.html#Props\">Components - Component Props</a></li>\n<li><a href=\"../guide/components.html#sync-Modifier\">Components - <code>.sync</code> Modifier</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h3><ul>\n<li><p><strong>Expects:</strong> varies based on value of form inputs element or output of components</p>\n</li>\n<li><p><strong>Limited to:</strong></p>\n<ul>\n<li><code>&lt;input&gt;</code></li>\n<li><code>&lt;select&gt;</code></li>\n<li><code>&lt;textarea&gt;</code></li>\n<li>components</li>\n</ul>\n</li>\n<li><p><strong>Modifiers:</strong></p>\n<ul>\n<li><a href=\"../guide/forms.html#lazy\"><code>.lazy</code></a> - listen to <code>change</code> events instead of <code>input</code></li>\n<li><a href=\"../guide/forms.html#number\"><code>.number</code></a> - cast input string to numbers</li>\n<li><a href=\"../guide/forms.html#trim\"><code>.trim</code></a> - trim input</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Create a two-way binding on a form input element or a component. For detailed usage and other notes, see the Guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/forms.html\">Form Input Bindings</a></li>\n<li><a href=\"../guide/components.html#Form-Input-Components-using-Custom-Events\">Components - Form Input Components using Custom Events</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"v-pre\"><a href=\"#v-pre\" class=\"headerlink\" title=\"v-pre\"></a>v-pre</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"v-cloak\"><a href=\"#v-cloak\" class=\"headerlink\" title=\"v-cloak\"></a>v-cloak</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as <code>[v-cloak] { display: none }</code>, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.</p>\n</li>\n<li><p><strong>Example:</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-attr\">[v-cloak]</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-cloak</span>&gt;</span></div><div class=\"line\">  &#123;&#123; message &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The <code>&lt;div&gt;</code> will not be visible until the compilation is done.</p>\n</li>\n</ul>\n<h3 id=\"v-once\"><a href=\"#v-once\" class=\"headerlink\" title=\"v-once\"></a>v-once</h3><ul>\n<li><p><strong>Does not expect expression</strong></p>\n</li>\n<li><p><strong>Details:</strong></p>\n<p>Render the element and component <strong>once</strong> only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- single element --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- the element have children --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-once</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>comment<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- component --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-once</span> <span class=\"attr\">:comment</span>=<span class=\"string\">\"msg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-for directive --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"i in list\"</span> <span class=\"attr\">v-once</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/syntax.html#Text\">Data Binding Syntax - interpolations</a></li>\n<li><a href=\"../guide/components.html#Cheap-Static-Components-with-v-once\">Components - Cheap Static Components with v-once</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Special-Attributes\"><a href=\"#Special-Attributes\" class=\"headerlink\" title=\"Special Attributes\"></a>Special Attributes</h2><h3 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p>The <code>key</code> special attribute is primarily used as a hint for Vue’s virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.</p>\n<p>Children of the same common parent must have <strong>unique keys</strong>. Duplicate keys will cause render errors.</p>\n<p>The most common use case is combined with <code>v-for</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:</p>\n<ul>\n<li>Properly trigger lifecycle hooks of a component</li>\n<li>Trigger transitions</li>\n</ul>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"text\"</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When <code>text</code> changes, the <code>&lt;span&gt;</code> will always be replaced instead of patched, so a transition will be triggered.</p>\n</li>\n</ul>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p><code>ref</code> is used to register a reference to an element or a child component. The reference will be registered under the parent component’s <code>$refs</code> object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.p will be the DOM node --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"p\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.child will be the child comp instance --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-comp</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-comp</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>When used on elements/components with <code>v-for</code>, the registered reference will be an Array containing DOM nodes or component instances.</p>\n<p>An important note about the ref registration timing: because the refs themselves are created as a result of the render function, you cannot access them on the initial render - they don’t exist yet! <code>$refs</code> is also non-reactive, therefore you should not attempt to use it in templates for data-binding.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Child-Component-Refs\">Child Component Refs</a></p>\n</li>\n</ul>\n<h3 id=\"slot\"><a href=\"#slot\" class=\"headerlink\" title=\"slot\"></a>slot</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p>Used on content inserted into child components to indicate which named slot the content belongs to.</p>\n<p>For detailed usage, see the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Named-Slots\">Named Slots</a></p>\n</li>\n</ul>\n<h3 id=\"is\"><a href=\"#is\" class=\"headerlink\" title=\"is\"></a>is</h3><ul>\n<li><p><strong>Expects:</strong> <code>string</code></p>\n<p>Used for <a href=\"../guide/components.html#Dynamic-Components\">dynamic components</a> and to work around <a href=\"../guide/components.html#DOM-Template-Parsing-Caveats\">limitations of in-DOM templates</a>.</p>\n<p>For example:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- component changes when currentView changes --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">v-bind:is</span>=<span class=\"string\">\"currentView\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- necessary because &lt;my-row&gt; would be invalid inside --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- a &lt;table&gt; element and so would be hoisted out      --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">\"my-row\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>For detailed usage, follow the links in the description above.</p>\n</li>\n<li><p><strong>See also:</strong></p>\n<ul>\n<li><a href=\"../guide/components.html#Dynamic-Components\">Dynamic Components</a></li>\n<li><a href=\"../guide/components.html#DOM-Template-Parsing-Caveats\">DOM Template Parsing Caveats</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Built-In-Components\"><a href=\"#Built-In-Components\" class=\"headerlink\" title=\"Built-In Components\"></a>Built-In Components</h2><h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a>component</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>is</code> - string | ComponentDefinition | ComponentConstructor</li>\n<li><code>inline-template</code> - boolean</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>A “meta component” for rendering dynamic components. The actual component to render is determined by the <code>is</code> prop:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- a dynamic component controlled by --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- the `componentId` property on the vm --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"componentId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- can also render registered component or component passed as prop --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"$options.components.child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Dynamic-Components\">Dynamic Components</a></p>\n</li>\n</ul>\n<h3 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>name</code> - string, Used to automatically generate transition CSS class names. e.g. <code>name: &#39;fade&#39;</code> will auto expand to <code>.fade-enter</code>, <code>.fade-enter-active</code>, etc. Defaults to <code>&quot;v&quot;</code>.</li>\n<li><code>appear</code> - boolean, Whether to apply transition on initial render. Defaults to <code>false</code>.</li>\n<li><code>css</code> - boolean, Whether to apply CSS transition classes. Defaults to <code>true</code>. If set to <code>false</code>, will only trigger JavaScript hooks registered via component events.</li>\n<li><code>type</code> - string, Specify the type of transition events to wait for to determine transition end timing. Available values are <code>&quot;transition&quot;</code> and <code>&quot;animation&quot;</code>. By default, it will automatically detect the type that has a longer duration.</li>\n<li><code>mode</code> - string, Controls the timing sequence of leaving/entering transitions. Available modes are <code>&quot;out-in&quot;</code> and <code>&quot;in-out&quot;</code>; defaults to simultaneous.</li>\n<li><code>enter-class</code> - string</li>\n<li><code>leave-class</code> - string</li>\n<li><code>appear-class</code> - string</li>\n<li><code>enter-to-class</code> - string</li>\n<li><code>leave-to-class</code> - string</li>\n<li><code>appear-to-class</code> - string</li>\n<li><code>enter-active-class</code> - string</li>\n<li><code>leave-active-class</code> - string</li>\n<li><code>appear-active-class</code> - string</li>\n</ul>\n</li>\n<li><p><strong>Events:</strong></p>\n<ul>\n<li><code>before-enter</code></li>\n<li><code>before-leave</code></li>\n<li><code>before-appear</code></li>\n<li><code>enter</code></li>\n<li><code>leave</code></li>\n<li><code>appear</code></li>\n<li><code>after-enter</code></li>\n<li><code>after-leave</code></li>\n<li><code>after-appear</code></li>\n<li><code>enter-cancelled</code></li>\n<li><code>leave-cancelled</code> (<code>v-show</code> only)</li>\n<li><code>appear-cancelled</code></li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;transition&gt;</code> serve as transition effects for <strong>single</strong> element/component. The <code>&lt;transition&gt;</code> does not render an extra DOM element, nor does it show up in the inspected component hierarchy. It simply applies the transition behavior to the wrapped content inside.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- simple element --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span>toggled content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- dynamic component --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fade\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"out-in\"</span> <span class=\"attr\">appear</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- event hooking --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transition-demo\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> @<span class=\"attr\">after-enter</span>=<span class=\"string\">\"transitionComplete\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"ok\"</span>&gt;</span>toggled content<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    <span class=\"attr\">transitionComplete</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// for passed 'el' that DOM element as the argument, something ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;).$mount(<span class=\"string\">'#transition-demo'</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/transitions.html\">Transitions: Entering, Leaving, and Lists</a></p>\n</li>\n</ul>\n<h3 id=\"transition-group\"><a href=\"#transition-group\" class=\"headerlink\" title=\"transition-group\"></a>transition-group</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>tag</code> - string, defaults to <code>span</code>.</li>\n<li><code>move-class</code> - overwrite CSS class applied during moving transition.</li>\n<li>exposes the same props as <code>&lt;transition&gt;</code> except <code>mode</code>.</li>\n</ul>\n</li>\n<li><p><strong>Events:</strong></p>\n<ul>\n<li>exposes the same events as <code>&lt;transition&gt;</code>.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;transition-group&gt;</code> serve as transition effects for <strong>multiple</strong> elements/components. The <code>&lt;transition-group&gt;</code> renders a real DOM element. By default it renders a <code>&lt;span&gt;</code>, and you can configure what element is should render via the <code>tag</code> attribute.</p>\n<p>Note every child in a <code>&lt;transition-group&gt;</code> must be <strong>uniquely keyed</strong> for the animations to work properly.</p>\n<p><code>&lt;transition-group&gt;</code> supports moving transitions via CSS transform. When a child’s position on screen has changed after an updated, it will get applied a moving CSS class (auto generated from the <code>name</code> attribute or configured with the <code>move-class</code> attribute). If the CSS <code>transform</code> property is “transition-able” when the moving class is applied, the element will be smoothly animated to its destination using the <a href=\"https://aerotwist.com/blog/flip-your-animations/\">FLIP technique</a>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"ul\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"slide\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; item.text &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/transitions.html\">Transitions: Entering, Leaving, and Lists</a></p>\n</li>\n</ul>\n<h3 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a>keep-alive</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>include</code> - string or RegExp. Only components matched by this will be cached.</li>\n<li><code>exclude</code> - string or RegExp. Any component matched by this will not be cached.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p>When wrapped around a dynamic component, <code>&lt;keep-alive&gt;</code> caches the inactive component instances without destroying them. Similar to <code>&lt;transition&gt;</code>, <code>&lt;keep-alive&gt;</code> is an abstract component: it doesn’t render a DOM element itself, and doesn’t show up in the component parent chain.</p>\n<p>When a component is toggled inside <code>&lt;keep-alive&gt;</code>, its <code>activated</code> and <code>deactivated</code> lifecycle hooks will be invoked accordingly.</p>\n<blockquote>\n<p>In 2.2.0 and above, <code>activated</code> and <code>deactivated</code> will fire for all nested components inside a <code>&lt;keep-alive&gt;</code> tree.</p>\n</blockquote>\n<p>Primarily used with preserve component state or avoid re-rendering.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- basic --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- multiple conditional children --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">comp-a</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"a &gt; 1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp-a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">comp-b</span> <span class=\"attr\">v-else</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp-b</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- used together with &lt;transition&gt; --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong><code>include</code> and <code>exclude</code></strong></p>\n<blockquote>\n<p>New in 2.1.0</p>\n</blockquote>\n<p>The <code>include</code> and <code>exclude</code> props allow components to be conditionally cached. Both props can either be a comma-delimited string or a RegExp:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- comma-delimited string --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">include</span>=<span class=\"string\">\"a,b\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- regex (use v-bind) --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">\"/a|b/\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"view\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>The match is first checked on the component’s own <code>name</code> option, then its local registration name (the key in the parent’s <code>components</code> option) if the <code>name</code> option is not available. Anonymous components cannot be matched against.</p>\n<p class=\"tip\"><code>&lt;keep-alive&gt;</code> does not work with functional components because they do not have instances to be cached.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#keep-alive\">Dynamic Components - keep-alive</a></p>\n</li>\n</ul>\n<h3 id=\"slot-1\"><a href=\"#slot-1\" class=\"headerlink\" title=\"slot\"></a>slot</h3><ul>\n<li><p><strong>Props:</strong></p>\n<ul>\n<li><code>name</code> - string, Used for named slot.</li>\n</ul>\n</li>\n<li><p><strong>Usage:</strong></p>\n<p><code>&lt;slot&gt;</code> serve as content distribution outlets in component templates. <code>&lt;slot&gt;</code> itself will be replaced.</p>\n<p>For detailed usage, see the guide section linked below.</p>\n</li>\n<li><p><strong>See also:</strong> <a href=\"../guide/components.html#Content-Distribution-with-Slots\">Content Distribution with Slots</a></p>\n</li>\n</ul>\n<h2 id=\"VNode-Interface\"><a href=\"#VNode-Interface\" class=\"headerlink\" title=\"VNode Interface\"></a>VNode Interface</h2><ul>\n<li>Please refer to the <a href=\"https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js\">VNode class declaration</a>.</li>\n</ul>\n<h2 id=\"Server-Side-Rendering\"><a href=\"#Server-Side-Rendering\" class=\"headerlink\" title=\"Server-Side Rendering\"></a>Server-Side Rendering</h2><ul>\n<li>Please refer to the <a href=\"https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer\">vue-server-renderer package documentation</a>.</li>\n</ul>\n"}],"Post":[{"title":"Cement Portland Development","date":"2017-06-13T15:00:00.000Z","_content":"\nFIX ME\n","source":"_posts/portland-development.md","raw":"---\ntitle: Cement Portland Development\ndate: 2017-06-13 10:00:00\n---\n\nFIX ME\n","slug":"portland-development","published":1,"updated":"2017-06-14T03:02:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3wg8klo0001q0pwsx2rnj6a","content":"<p>FIX ME</p>\n","excerpt":"","more":"<p>FIX ME</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}